{
  "meta": {
    "instanceId": "408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9",
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "id": "c8221e91-9a9c-489e-a770-7c3cf2cb3328",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -1100,
        -460
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "111eccd7-51e5-4b4a-9c30-a69f90397df7",
      "name": "Get Video Subtitles",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        540,
        -360
      ],
      "parameters": {
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items",
        "options": {},
        "jsonBody": "={{\n{\n  \"downloadSubtitles\": true,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": false,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 1,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"startUrls\": [\n    {\n      \"url\": $json.url,\n      \"method\": \"GET\"\n    }\n  ],\n  \"subtitlesFormat\": \"vtt\",\n  \"subtitlesLanguage\": \"en\"\n}\n}}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "SV9BDKc1cRbZBeoL",
          "name": "Apify.com (personal token)"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "6dcd5497-89cf-4591-ae79-bd12bbde6256",
      "name": "Chunk Subtitles",
      "type": "n8n-nodes-base.set",
      "position": [
        740,
        -360
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "fa613ce2-3a2f-42e4-9add-88df00efdb85",
              "name": "vtt",
              "type": "array",
              "value": "={{\nArray(\n  Math.ceil($json.subtitles[0].vtt.length/30_000)\n).fill(0)\n  .map((_,idx) => $json.subtitles[0].vtt.substr(idx*30_000,(idx * 30_000) + 30_000))\n}}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "689fc39e-21d9-4222-9cda-858f21cacc97",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        1480,
        -520
      ],
      "parameters": {
        "mode": "insert",
        "options": {},
        "qdrantCollection": {
          "__rl": true,
          "mode": "list",
          "value": "n8n_videos",
          "cachedResultName": "n8n_videos"
        }
      },
      "credentials": {
        "qdrantApi": {
          "id": "AhUP2CNvcQDRd5au",
          "name": "clients-dev"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "ee57ffe2-e3f8-409a-a87a-b69902494598",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        1580,
        -360
      ],
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "videoId",
                "value": "={{ $('Video Ref').item.json.id }}"
              },
              {
                "name": "title",
                "value": "={{ $('Video Ref').item.json.title }}"
              },
              {
                "name": "channelId",
                "value": "={{ $('Video Ref').item.json.channelId }}"
              },
              {
                "name": "url",
                "value": "={{ $('Video Ref').item.json.url }}"
              },
              {
                "name": "type",
                "value": "={{ $('Video Ref').item.json.type }}"
              }
            ]
          }
        },
        "jsonData": "={{ $json.vtt.replaceAll('\\n\\n', '\\n') }}",
        "jsonMode": "expressionData"
      },
      "typeVersion": 1
    },
    {
      "id": "4ce56ce3-73fc-4ba3-abbf-0401d44ce748",
      "name": "Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        1460,
        -360
      ],
      "parameters": {
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "a910822d-073f-42a6-8f6d-5c04dc59fba2",
      "name": "Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "position": [
        1660,
        -240
      ],
      "parameters": {
        "options": {},
        "chunkSize": 3000
      },
      "typeVersion": 1
    },
    {
      "id": "0361055c-8fc2-488a-9c43-8e0492648756",
      "name": "For Each Video",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -400,
        -360
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "77243da4-38cb-430b-b8f3-2698ec6dd022",
      "name": "Video Ref",
      "type": "n8n-nodes-base.noOp",
      "position": [
        340,
        -360
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "fe63938a-8c17-4191-8fdc-cd044f5de080",
      "name": "For Each Chunk",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1240,
        -400
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "4bbbc54a-30b6-4395-bb06-0145dde9abd9",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        1920,
        -400
      ],
      "webhookId": "45ae600a-d26f-444b-bbe0-792c5602fe8d",
      "parameters": {
        "amount": 1
      },
      "executeOnce": true,
      "typeVersion": 1.1
    },
    {
      "id": "6f581ad9-abc5-4ef7-b2ce-1267ba67999d",
      "name": "Clean Up Output",
      "type": "n8n-nodes-base.set",
      "position": [
        2100,
        160
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "e9a68e02-1559-4ce5-b338-5259f1030d25",
              "name": "title",
              "type": "string",
              "value": "={{ $json.title }}"
            },
            {
              "id": "3fb553d6-79a1-41f2-8b72-581d667adcea",
              "name": "url",
              "type": "string",
              "value": "=https://www.youtube.com/watch?v={{ $json.videoId }}"
            },
            {
              "id": "9f435790-5b84-4a23-ac39-561c87d0eea1",
              "name": "extract",
              "type": "string",
              "value": "={{ $json.extract.replaceAll('\\n', ' ') }}"
            },
            {
              "id": "f3d63c6e-d5c9-40b6-a9a7-ebfe7c6c9a41",
              "name": "timestamp",
              "type": "string",
              "value": "={{\n(function(str){\n  return str.length === 3\n  ? str[1] + ':' + str[2]\n  : str.join(':');\n})($json.timestamp.split(':'))\n}}"
            },
            {
              "id": "f937c492-ddbe-40fe-8e12-a21c21832e4a",
              "name": "videoId",
              "type": "string",
              "value": "={{ $json.videoId }}"
            },
            {
              "id": "2245a7b6-cf9e-4c39-875b-5bf80b1353bc",
              "name": "video_ts",
              "type": "string",
              "value": "={{\n(function(timestamp){\n  const buffer = 5;\n  let [hr,min,sec] = timestamp.map(x => Number(x));\n  if (sec === undefined){ sec = min; min = hr; hr = 0 }\n  return Math.max((hr * 60 * 60) + (min * 60) + sec - buffer, 0);\n})($json.timestamp.split(':'))\n}}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "27c19284-1ce6-4756-b385-6433096d4b84",
      "name": "Sort By Video ID",
      "type": "n8n-nodes-base.sort",
      "position": [
        2280,
        160
      ],
      "parameters": {
        "options": {},
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "videoId"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "dc70ab23-8fb0-4f7f-9833-5d6b01407b69",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        3620,
        220
      ],
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        },
        "respondWith": "text",
        "responseBody": "=<div id=\"answer\">\n  <div id=\"answer-legend\">AI Summary</div>\n  {{ $json.text }}\n</div>\n{{ $json.results }}"
      },
      "executeOnce": false,
      "typeVersion": 1.1
    },
    {
      "id": "1c4eac3a-1412-4e24-85fd-359aa065e3db",
      "name": "Extract Results",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "position": [
        1080,
        300
      ],
      "parameters": {
        "text": "=<transcripts>\n{{ $json.hits\n  .map(item => `<transcript>${item.toJsonString()}</transcript>`).join('\\n')\n}}\n</transcripts>\n<user_query>\n{{ $('Get Query').first().json.query }}\n</user_query>",
        "options": {
          "systemPromptTemplate": "=Your task is to analyse the collection of video transcripts and extract the parts relevant to the user's query.\n* When returning your response, provide from 3 and up to 10 results as extracts of the transcript combined with their timestamps (MM:SS) and include the video title and url.\n* When getting the extract for the results, as this will be read by the user, return only the text of the transcript and remove any vtt tags, annotations, markers.\n* Refer to the metadata for video title and video url."
        },
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\":\"object\",\n    \"required\": [\n      \"title\",\"url\",\"extract\",\"timestamp\",\"videoId\"\n    ],\n    \"properties\": {\n      \"title\": { \"type\": \"string\" },\n       \"extract\": {\n         \"type\": \"string\",\n         \"description\": \"extract and transcribe the relevant parts of the transcript removing vtt annotations and markers.\"\n       },\n       \"timestamp\": { \"type\": \"string\" },\n       \"videoId\": { \"type\": \"string\" }\n    }\n  }\n}"
      },
      "executeOnce": false,
      "typeVersion": 1
    },
    {
      "id": "cc2d88f7-065d-489a-bfc4-cbc13268b59a",
      "name": "SEARCH API",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -1100,
        360
      ],
      "webhookId": "e2768373-66ad-4ad2-948f-c5e278d39595",
      "parameters": {
        "path": "n8n_videos/api/search",
        "options": {
          "ignoreBots": false
        },
        "responseMode": "responseNode"
      },
      "typeVersion": 2
    },
    {
      "id": "ae2fb16b-2a31-4616-a2b9-6cd634b64647",
      "name": "Get Query",
      "type": "n8n-nodes-base.set",
      "position": [
        -360,
        240
      ],
      "parameters": {
        "mode": "raw",
        "options": {},
        "jsonOutput": "={{\n{\n  query: ((($('SEARCH API').first().json.query?.q\n      .removeTags())\n      .removeTags())\n      .replaceSpecialChars()).substr(0,128),\n  type: ['video', 'stream'].includes($('SEARCH API').first().json.query.type)\n    ? $('SEARCH API').first().json.query.type\n    : undefined\n}\n}}"
      },
      "typeVersion": 3.4
    },
    {
      "id": "6d14cd25-f65a-4162-bcfc-cc2e7e547c23",
      "name": "Generate Template",
      "type": "n8n-nodes-base.set",
      "position": [
        2460,
        160
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "3e4daf29-906b-4469-b107-6cbc142dab44",
              "name": "results",
              "type": "string",
              "value": "={{\n(function(items) {\n  const groupByVideoId = items.reduce((acc, item) => {\n    if (!acc[item.videoId]) acc[item.videoId] = [];\n    acc[item.videoId].push(item);\n    return acc;\n  }, {});\n  \n  const results = Object.keys(groupByVideoId).map(key => {\n    const parts = groupByVideoId[key]\n      .toSorted((a,b) => Number(a.video_ts) - Number(b.video_ts));\n    const {title,url} = parts[0];\n    return `<li video-id=\"${key}\">\n      <div class=\"resultSource\">\n        <a\n          href=\"${url}\"\n          target=\"_blank\"\n          hx-on:click=\"loadVideo('${key}',0); event.preventDefault()\"\n        >\n          <div class=\"resultSourceTitle\">${title}</div>\n          <div class=\"resultSourceUrl\">${url}</div>\n        </a>\n      </div>\n      ${parts.map(item => `\n        <div class=\"resultContent\">\n          <a\n            class=\"resultTimestamp\"\n            href=\"${item.url}&t=${item.video_ts}\n            \"target=\"_blank\"\n            hx-on:click=\"loadVideo('${item.videoId}',${item.video_ts}); event.preventDefault()\"\n          >\n            [${item.timestamp}]\n            <span>...${item.extract}...</span>\n          </a>\n        </div>`).join('\\n')}\n    </li>`\n  }).join('\\n')\n\n  return `<div id=\"resultsCount\">${Object.keys(groupByVideoId).length} Video Result${Object.keys(groupByVideoId).length === 1 ? '' : 's'}</div>${results}`;\n})(\n  $input.all().map(item => item.json).filter(item => item.videoId)\n)\n}}"
            }
          ]
        }
      },
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "id": "ccf2744d-3678-40b8-b7a1-2fda1d820dd0",
      "name": "Answer Query",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        2760,
        180
      ],
      "parameters": {
        "text": "=<results>{{ $json.results }}</results>\n<user_query>\n{{ $('Get Query').first().json.query }}\n</user_query>",
        "messages": {
          "messageValues": [
            {
              "message": "=Using the available results, generate a 1 or 2 sentence answer for the user's query. You may format your answer using markdown."
            }
          ]
        },
        "promptType": "define"
      },
      "executeOnce": true,
      "typeVersion": 1.5
    },
    {
      "id": "5c9a1091-1c68-4b83-a002-638236044599",
      "name": "Has Results?",
      "type": "n8n-nodes-base.if",
      "position": [
        1720,
        260
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "81f8ec3e-be33-469c-8bf5-c3d3575e3764",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "97e6fdf0-db16-4957-bc4f-ce96a8ccc944",
      "name": "Generate Empty Response",
      "type": "n8n-nodes-base.set",
      "position": [
        1920,
        360
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "7c4bd999-49b1-4532-89ca-c53e98da6b17",
              "name": "text",
              "type": "string",
              "value": "={{ '' }}"
            },
            {
              "id": "916221de-2ec9-4fd9-8029-d7a3de88f395",
              "name": "results",
              "type": "string",
              "value": "=<div id=\"resultsCount\">0 Video Results</div>"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "160933f5-ae39-407d-9124-f24d193f1153",
      "name": "Map Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        3400,
        220
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "36bb30ce-6baf-492a-ad8c-4bec175e85a0",
              "name": "text",
              "type": "string",
              "value": "={{ $json.data }}"
            },
            {
              "id": "60fb3d9d-0342-41c2-80bb-1899773f4bd7",
              "name": "results",
              "type": "string",
              "value": "={{ $('Generate Template').first().json.results }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "ac4881ee-e200-48b9-8339-0a21647cc1c4",
      "name": "Incr Rate Limit",
      "type": "n8n-nodes-base.redis",
      "position": [
        -900,
        360
      ],
      "parameters": {
        "key": "=n8n_videos_session_{{ $json.headers['x-forwarded-for'] }}",
        "expire": true,
        "operation": "incr"
      },
      "credentials": {
        "redis": {
          "id": "zU4DA70qSDrZM1El",
          "name": "Redis account (localhost)"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "5aa5880a-d9c4-4263-877c-b7c8b3f36916",
      "name": "10req/min",
      "type": "n8n-nodes-base.if",
      "position": [
        -720,
        360
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "032093e1-b223-45f4-b1bc-5603134acfe8",
              "operator": {
                "type": "number",
                "operation": "lt"
              },
              "leftValue": "={{ Object.values($json)[0] }}",
              "rightValue": 11
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "7eb4a8e8-ba35-4a55-98cc-f85395a90604",
      "name": "Vectorise Subworkflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        -180,
        -360
      ],
      "parameters": {
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        },
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "dd76b922-8522-4d5b-a49b-e3e4cdca333f",
      "name": "Vectorise Subworkflow1",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        140,
        -360
      ],
      "parameters": {
        "inputSource": "passthrough"
      },
      "typeVersion": 1.1
    },
    {
      "id": "7b7c5773-9eac-4356-8d66-793dd9bcc008",
      "name": "WEB UI",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -1120,
        920
      ],
      "webhookId": "8b531d97-c5d7-4a98-8ef0-f19e59cf886f",
      "parameters": {
        "path": "n8n_videos/",
        "options": {
          "ignoreBots": true
        },
        "responseMode": "responseNode"
      },
      "typeVersion": 2
    },
    {
      "id": "32a0fb68-1b6f-4d65-8591-f370d0307eb4",
      "name": "Qdrant Groups Search",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        0,
        240
      ],
      "parameters": {
        "url": "=http://qdrant:6333/collections/n8n_videos/points/search/groups",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "authentication": "predefinedCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "={{ 4 }}"
            },
            {
              "name": "filter",
              "value": "={{\n$('Get Query').first().json.type\n  ? {\n    \"must\": [\n      {\n        \"key\": \"metadata.type\",\n        \"match\": {\n          \"any\": [].concat($('Get Query').first().json.type)\n        }\n      }\n    ]\n  }\n  : undefined\n}}"
            },
            {
              "name": "with_payload",
              "value": "={{ true }}"
            },
            {
              "name": "group_by",
              "value": "metadata.videoId"
            },
            {
              "name": "group_size",
              "value": "={{ 3 }}"
            },
            {
              "name": "vector",
              "value": "={{ $json.data[0].embedding }}"
            }
          ]
        },
        "nodeCredentialType": "qdrantApi"
      },
      "credentials": {
        "qdrantApi": {
          "id": "AhUP2CNvcQDRd5au",
          "name": "clients-dev"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "0ddf6e63-d0db-499d-873c-ea7d82bf1ef6",
      "name": "Get Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -180,
        240
      ],
      "parameters": {
        "url": "https://api.openai.com/v1/embeddings",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "authentication": "predefinedCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "={{ $json.query }}"
            },
            {
              "name": "model",
              "value": "text-embedding-3-small"
            }
          ]
        },
        "nodeCredentialType": "openAiApi"
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "a2fc2329-79be-49ac-923a-63affdefe464",
      "name": "For Each Group",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        740,
        220
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "ed300a5f-7eca-4f15-bcc3-7855afed0a9e",
      "name": "Group Ref",
      "type": "n8n-nodes-base.noOp",
      "position": [
        900,
        300
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "4e3b33f6-6274-43f1-8206-adeac3220113",
      "name": "Combine Results",
      "type": "n8n-nodes-base.set",
      "position": [
        1540,
        260
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "f797071b-f722-4273-a672-932370123fc0",
              "name": "output",
              "type": "array",
              "value": "={{ $input.all().flatMap(item => item.json.output) }}"
            }
          ]
        }
      },
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "id": "da36d896-3187-40f6-82a5-953ae0fde867",
      "name": "Transcripts to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1920,
        160
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "output"
      },
      "typeVersion": 1
    },
    {
      "id": "e297fd2c-a551-4efe-8240-26522de4cec3",
      "name": "Respond to Webhook2",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -180,
        460
      ],
      "parameters": {
        "options": {
          "responseCode": 200
        },
        "respondWith": "text",
        "responseBody": "=<div id=\"answer\">{{ $json.text }}</div>\n{{ $json.results }}"
      },
      "executeOnce": false,
      "typeVersion": 1.1
    },
    {
      "id": "1cc6136e-b60d-4dc3-aeb7-30efb09b24f1",
      "name": "Respond to Webhook3",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        2100,
        360
      ],
      "parameters": {
        "options": {
          "responseCode": 200
        },
        "respondWith": "text",
        "responseBody": "=<div id=\"answer\">{{ $json.text }}</div>\n{{ $json.results }}"
      },
      "executeOnce": false,
      "typeVersion": 1.1
    },
    {
      "id": "143115aa-5754-4e43-9bda-332b38cce4ae",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -1100,
        -280
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                6
              ],
              "triggerAtHour": 6
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "154adf7a-8390-425c-b96c-641c02c92072",
      "name": "Ignore Already Seen",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        -620,
        -360
      ],
      "parameters": {
        "options": {},
        "operation": "removeItemsSeenInPreviousExecutions",
        "dedupeValue": "={{ $json.id }}"
      },
      "typeVersion": 2
    },
    {
      "id": "c488a718-8c27-4d52-a891-bb875c7b8615",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1180,
        -640
      ],
      "parameters": {
        "color": 7,
        "width": 1200,
        "height": 560,
        "content": "## 1. [Apify.com](https://www.apify.com?fpr=414q6)으로 최신 비디오 가져오기\n\n[Apify.com에 대해 더 알아보기](https://www.apify.com?fpr=414q6) - [유튜브 스크래퍼](https://apify.com/streamers/youtube-scraper?fpr=414q6)\n\n공식 유튜브 API의 낮은 사용 제한을 피하고 심각한 시간과 노력을 절약하고 싶다면, Apify에서 찾을 수 있는 것과 같은 타사 유튜브 스크래퍼에 가입하고 싶을 것입니다. 여기서, 나는 공식 n8n 채널에서 최신 비디오와 라이브스트림 녹화를 가져오기 위해 유튜브 스크래퍼를 사용하고 있습니다. \"중복 제거\" 노드를 통해 실행하여 한 번 이상 처리되지 않도록 합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "09fc0bc7-1efc-495f-b57b-3d62edbe09a6",
      "name": "Get Latest Youtube Videos",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -820,
        -360
      ],
      "parameters": {
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items",
        "options": {},
        "jsonBody": "={{\n{\n  \"maxResultStreams\": 10,\n  \"maxResults\": 10,\n  \"maxResultsShorts\": 0,\n  \"oldestPostDate\": \"2025-01-01\",\n  \"startUrls\": [\n    {\n      \"url\": \"https://www.youtube.com/@n8n-io\",\n      \"method\": \"GET\"\n    }\n  ]\n}\n}}",
        "sendBody": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "SV9BDKc1cRbZBeoL",
          "name": "Apify.com (personal token)"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "06384b2c-c30f-457e-94d8-976b187ff633",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        60,
        -640
      ],
      "parameters": {
        "color": 7,
        "width": 860,
        "height": 560,
        "content": "## 2. 비디오 전사본 가져오기 with [Apify.com](https://www.apify.com?fpr=414q6)  \n[서브워크플로우에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)  \n\n**노트: 에디터 모드에서 이 실행을 볼 수 없습니다! 배경에서 실행됩니다 - 실행 탭을 보세요!**  \n성능 향상을 위해 서브워크플로우를 사용하기로 선택했습니다. 전사본을 임베딩으로 처리하면 그렇지 않은 경우에 비해 클라이언트 측에서 많은 데이터를 축적하는 경향이 있기 때문입니다. 여기서 Apify의 YouTube 스크래퍼를 다시 한 번 사용하여 비디오 전사본을 다운로드합니다. - 기술적으로 이것들은 자동 생성된 자막이지만, 우리의 필요를 충족하기에 충분합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "7a22fa36-955a-4586-8022-bcaa07950621",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        940,
        -740
      ],
      "parameters": {
        "color": 7,
        "width": 1200,
        "height": 660,
        "content": "## 3. Qdrant 벡터 저장소를 채우기 위해 검색 인덱스 구축\n\n[Qdrant Vector Store에 대해 자세히 알아보기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\n\nQdrant을 사용하는 것은 보통 내 개인적인 선호사항이지만, 이 템플릿의 경우 그 고급 검색 API에 대한 훌륭한 용례를 보았고, 나중에 다룰 것입니다.\n\n전사본의 크기 때문에, 우리는 그것들을 더 작은 청크로 나누어 벡터 저장소를 채워야 합니다. 메타데이터가 나중 필터링에 매우 중요하다는 점에 유의하세요. 그래서 최선의 관행은, 항상 미리 메타데이터를 어떻게 사용할지 설계하는 데 시간을 들이는 것입니다!"
      },
      "typeVersion": 1
    },
    {
      "id": "063c6f34-0972-4c2e-a3db-d3e3158015b7",
      "name": "Chunks to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1020,
        -400
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "vtt"
      },
      "typeVersion": 1
    },
    {
      "id": "a088b16e-d518-4746-9f03-6ab0a2a46fc0",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1180,
        80
      ],
      "parameters": {
        "color": 7,
        "width": 680,
        "height": 520,
        "content": "## 4. 레이트 리미팅이 적용된 검색 API\n\n[Redis에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)\n\n웹훅은 n8n으로 간단한 API를 구축하는 데 훌륭한 기능입니다. 이 특정 웹훅은 사용자 쿼리를 입력으로 받아 n8n 비디오의 벡터 저장소를 검색하고 일치하는 결과를 출력으로 반환하는 검색 API 역할을 할 것입니다. Redis 카운터는 자원을 관리하기 위한 간단한 레이트 리미터로 사용할 수 있습니다. 공개적으로 webUI를 게시하는 경우 제거해도 좋습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "3a9d011d-fa8f-4dc0-8e7b-d7e9990f9485",
      "name": "429 Response",
      "type": "n8n-nodes-base.set",
      "position": [
        -360,
        460
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "7c4bd999-49b1-4532-89ca-c53e98da6b17",
              "name": "text",
              "type": "string",
              "value": "={{ '' }}"
            },
            {
              "id": "916221de-2ec9-4fd9-8029-d7a3de88f395",
              "name": "results",
              "type": "string",
              "value": "=<div id=\"resultsCount\">Search Limit Reached!</div>\n<div>\nSearch requests are limited to 3 per minute.\n<br/>Need more? Download the free template and run it yourself!\n</div>"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "c4263da3-bc5f-470b-8ace-b03a88b650af",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -480,
        -20
      ],
      "parameters": {
        "color": 7,
        "width": 1080,
        "height": 680,
        "content": "## 5. Qdrant 고급 검색 - 포인트 그룹\n\n[Qdrant의 Search Groups API에 대해 더 알아보기](https://qdrant.tech/documentation/concepts/search/#search-groups)\n\n우리의 목표는 사용자의 쿼리와 관련된 비디오와 그 안의 타임스탬프를 반환하는 것입니다. 간단한 유사성 검색을 사용할 수 있지만, 문제는 결과가 첫 번째와 두 번째 비디오에 너무 깊이 들어갈 수 있다는 것입니다. 더 많은 비디오를 커버하여 폭을 증가시키고 싶다면, Qdrant의 Search Group API와 같은 것을 사용할 수 있습니다. 이 검색 API는 메타데이터를 사용하여 결과를 그룹화하며, 비디오당 최대 결과 제한을 지정할 수 있습니다. 불행히도, 이 API는 n8n에서 지원되지 않으므로, HTTP 요청 노드를 사용해야 합니다 - **사용 전에 노드의 자격 증명을 구성하세요!**"
      },
      "typeVersion": 1
    },
    {
      "id": "5c655b2c-1986-499b-b89d-563e2f755986",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        -20
      ],
      "parameters": {
        "color": 7,
        "width": 800,
        "height": 640,
        "content": "## 6. AI를 활용한 맥락적 전사본 이해  \n[Information Extractor에 대해 더 읽기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)  \n\nAI/LLM 데이터 추출의 훌륭한 용도 중 하나는 코드로 traditionally 수행되는 많은 파싱 노력을 절약할 수 있다는 것입니다. 여기서 우리는 원시 전사본 블록을 제공하고 AI가 사용자의 쿼리에 답하는 관련 부분과 타임스탬프를 추출하는 데 도와줍니다."
      },
      "typeVersion": 1
    },
    {
      "id": "f825ab4a-b88d-46af-b2f2-271c6b22665c",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1460,
        -20
      ],
      "parameters": {
        "color": 7,
        "width": 1180,
        "height": 620,
        "content": "## 7. 결과 HTML 템플릿 생성\n\n[Edit Fields 노드에 대해 자세히 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\n\n추출된 대본 부분을 얻은 후, 결과를 재그룹화하고 사용자에게 렌더링할 결과 목록 HTML을 구축해야 합니다.  \n저는 Web UI를 위해 훌륭한 **htmx** (htmx.org) 프레임워크를 사용하고 있습니다. 이는 단일 페이지 애플리케이션에 딱 맞습니다. 생성된 결과 HTML 템플릿은 이 프레임워크에 크게 영향을 받았기 때문에, 익숙하지 않으면 이상하게 보일 수 있습니다. 편한 대로 사용하세요!"
      },
      "typeVersion": 1
    },
    {
      "id": "1ed3a232-6c03-4cef-806b-7030615b1e98",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2660,
        -20
      ],
      "parameters": {
        "color": 7,
        "width": 600,
        "height": 560,
        "content": "## 8. 결과를 요약하여 답변 생성\n\n[Basic LLM 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\n이것은 검색 결과를 기반으로 사용자의 쿼리에 답변을 시도하기 위한 멋진 추가 UX입니다. 기본 LLM 노드는 이 간단한 프롬프트에 딱 맞습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "4d5b1466-8bb8-42e7-9cee-275aa4c905df",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3280,
        -20
      ],
      "parameters": {
        "color": 7,
        "width": 600,
        "height": 560,
        "content": "## 9. 답변 및 검색 결과 반환\n\n[웹훅 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.respondtowebhook/)\n\n마지막으로, AI 답변과 결과 목록을 Web UI용 HTML 응답으로 결합합니다.\n\n휴, 그게 꽤 많은 내용이었네요! 이 템플릿을 넘어, 지연 시간을 줄이기 위해 다른 검색 매개변수나 접근 방식을 사용하거나, 다른 콘텐츠 유형을 포함할 수 있습니다. 등."
      },
      "typeVersion": 1
    },
    {
      "id": "07edb5ea-a4ad-4b06-91f2-9bdc2d5150a4",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1180,
        700
      ],
      "parameters": {
        "color": 7,
        "width": 840,
        "height": 480,
        "content": "## 10. N8N 비디오 검색 프론트엔드 Web UI 사용  \n[HTML 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)  \n\nn8n을 사용하여 간단한 웹페이지를 빌드하고 배포하는 것은 매우 쉽고, 기술적인 세부 사항에 대해 너무 걱정하고 싶지 않을 때 좋습니다. n8n 템플릿이 활성화되면, [https://<n8n_url>/webhook/n8n_video](/webhook/n8n_video) 를 방문하여 사용할 수 있습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "8a9593fc-5a7a-4da9-b7d4-a128c0d36e8e",
      "name": "Render Page",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -760,
        920
      ],
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        },
        "respondWith": "text",
        "responseBody": "={{ $json.html }}"
      },
      "typeVersion": 1.1
    },
    {
      "id": "8fbdd941-fba7-4f89-b216-489a6e80cef9",
      "name": "Generate Webpage",
      "type": "n8n-nodes-base.html",
      "position": [
        -940,
        920
      ],
      "parameters": {
        "html": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>N8N Videos Search</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css\" integrity=\"sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/grids-responsive-min.css\" />\n  <script src=\"https://unpkg.com/htmx.org@2.0.4\" integrity=\"sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+\" crossorigin=\"anonymous\"></script>\n  <style>\n    body { font-family: sans-serif;}\n    .header { padding: 1rem 2rem; }\n    .title { color:#000; text-decoration:none}\n    .title-main { display:block; font-weight: 700; }\n    .title-sub { font-size: 0.9rem; }\n    .container { max-width: 1280px; @media screen and (min-width: 80em) { margin-left: 10rem; } }\n    \n    #search-panel { padding: 0 2rem 1rem; }\n    \n    #results-panel { padding: 0 4rem 4rem 2rem; }\n    #results { margin: 0; padding: 0; }\n    #results li { padding: 1rem 0 0 0; margin-left: 1rem; }\n    .resultSource { display:inline-block; margin-bottom:0.5rem; a { text-decoration: none } }\n    .resultSourceTitle { font-size: 0.8rem; font-weight: 700; color: #000}\n    .resultSourceUrl { font-size: 0.8rem;}\n    .resultContent { font-size: 0.9rem; margin-bottom:0.5rem; a { text-decoration: none; span { color: #000; } &:hover { text-decoration: underline;} } }\n    #resultsCount { font-weight: 700;padding: 1rem 0;}\n    #answer-legend {font-size: 0.8rem; font-weight: 700;color: blue;margin-bottom: 0.5rem;}\n    #answer { margin-bottom: 1rem; border-left: 5px solid blue; padding-left: 1rem;  p { margin:0}}\n    \n    #video-panel { position:sticky;top:0; padding: 0 0 2rem; }\n    \n    #about-panel { padding: 1rem 0 0; border-top:1px solid #eee; h2 {font-size:1rem;;margin-bottom:1rem; } p {font-size: 0.8rem;margin-bottom:1rem;} }\n    #about-services { font-size: 0.8rem;margin: 0;padding-left: 1rem;margin-bottom: 1rem; li { margin-bottom: 0.5rem;} }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n      <div class=\"header\">\n        <div class=\"home-menu pure-menu pure-menu-horizontal\">\n          <a class=\"title\" href=\"/webhook/n8n_videos\">\n            <span class=\"title-main\">Search the Official N8N Youtube Channel</span>\n            <span class=\"title-sub\">Cover a wide range of videos in seconds!</span>\n          </a>\n        </div>\n      </div>\n    \n      <div class=\"pure-g\">\n        <div class=\"pure-u-1-2 pure-u-lg-3-5\">\n          <div id=\"search-panel\">\n            <form\n              id=\"search-form\"\n              class=\"pure-form\"\n              hx-get=\"/webhook/n8n_videos/api/search\"\n              hx-target=\"#results\"\n            >\n              <fieldset>\n                <input\n                  type=\"text\"\n                  name=\"q\"\n                  placeholder=\"Eg. When is the next n8n meetup?\"\n                  class=\"pure-input-1-2\"\n                  required\n                />\n                <select name=\"type\">\n                  <option value=\"all\">All</option>\n                  <option value=\"video\">Videos</option>\n                  <option value=\"stream\">LiveStreams</option>\n                </select>\n                <button\n                  type=\"submit\"\n                  class=\"pure-button pure-button-primary\"\n                  style=\"width:100px\"\n                >\n                  Search\n                </button>\n              </fieldset>\n            </form>\n          </div>\n          <div id=\"results-panel\">\n            <ul id=\"results\"></ul>\n          </div>\n        </div>\n        <div class=\"pure-u-1-2 pure-u-lg-2-5\">\n          <div id=\"video-panel\">\n            <div\n              id=\"ytplayer\"\n              style=\"display:flex;align-items:center;justify-content:center;width:100%;height:320px;background-color:#eee;color:#999;font-size:0.9rem\"\n            >\n              <div>Video will show here.</div>\n            </div>\n          </div>\n          <div id=\"about-panel\">\n            <h2>About N8N Video Search</h2>\n            <img\n              class=\"logo\"\n              src=\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/dscioipkxomw8gnj3h2v\"\n              width=\"70%\"\n            />\n            <p>\n              This demo has the ability to search recent video and livestream recordings from the official n8n.io Youtube channel.\n              The results are picked out of the transcripts allowing users to jump to the exact timestamp relevant to their query.\n              This application was built with the following services:\n            </p>\n            <ul id=\"about-services\">\n              <li>\n                <a href=\"https://www.apify.com?fpr=414q6\">Apify.com</a> - \n                Searches for \"n8n @ scale\" Youtube livestream recordings and downloads the transcripts. \n                Use my code <strong>\"20JIMLEUK\"</strong> at checkout for 20% OFF an Apify subscription (*expires May 2025).\n              </li>\n              <li>\n                <a href=\"https://qdrant.tech\">Qdrant.tech</a> - \n                Video transcripts are chunked and vectorised into a Qdrant Vector Store. Qdrant is super fast and have a robust search and filtering capabilities.\n              </li>\n              <li>\n                <a href=\"https://n8n.partnerlinks.io/ee7izbliiw0n\">n8n.io</a> - \n                n8n serves as our automation platform, backend API and frontend Interface for this demo! Really easy to put together quick AI projects like this one.\n                <a href=\"https://n8n.io/creators/jimleuk/\">Also be sure to checkout my other free n8n x AI templates here!</a>\n              </li>\n            </ul>\n            <p>\n              <strong>Questions or Comments?</strong> Check out my forum post here!\n            </p>\n            <p>\n              {{ $now.format('yyyy') }} &copy; Jim Le. \n              If you've enjoyed this demo, connect and follow me on \n              <a href=\"https://linkedin.com/in/jimleuk\">linkedin.com/in/jimleuk</a> and \n              <a href=\"https://x.com/jimle_uk\">x.com/jimle_uk</a>.\n            </p>\n          </div>\n        </div>\n    </div>\n  </div>\n  \n  <script>\n    const form = document.getElementById('search-form');\n    const button = form.querySelector('button[type=submit]');\n\n    document.body.addEventListener('htmx:beforeRequest', function(evt) {\n      form.disabled = true;\n      button.innerHTML = `<img\n        width=\"16px\"\n        height=\"16px\"\n        src=\"https://samherbert.net/svg-loaders/svg-loaders/oval.svg\"\n      />`;\n      button.disabled = true;\n    });\n  \n    document.body.addEventListener('htmx:afterRequest', function(evt) {\n      form.disabled = false;\n      button.innerHTML = 'Search';\n      button.disabled = false;\n    });\n  </script>\n  <script>\n    let player;\n\n    function loadVideo(id,ts) {\n      if (!player) {\n        player = new YT.Player('ytplayer', {\n          height: '390',\n          width: '640',\n          videoId: id,\n          playerVars: {\n            'playsinline': 1,\n            'origin': window.location.origin,\n            'start': ts\n          },\n          events: {\n            'onReady': (event) => { event.target.playVideo(); },\n            'onError': (event) => { console.error('onError', event) }\n          }\n        });\n        return;\n      }\n      \n      if (player && player.loadVideoById) {\n        player.loadVideoById(id, ts);\n      }\n    }\n\n    // Load the YouTube API asynchronously\n    const tag = document.createElement('script');\n    tag.src = \"https://www.youtube.com/iframe_api\";\n    document.body.appendChild(tag);\n  \n    // Create the player when API is ready\n    function onYouTubeIframeAPIReady() {\n      console.log('Youtube Player Ready!');\n    }\n  </script>\n</body>\n</html>"
      },
      "typeVersion": 1.2
    },
    {
      "id": "054feb14-d740-4d05-9ef5-d5c584e07eb6",
      "name": "Markdown",
      "type": "n8n-nodes-base.markdown",
      "position": [
        3080,
        180
      ],
      "parameters": {
        "mode": "markdownToHtml",
        "options": {},
        "markdown": "={{ $json.text }}"
      },
      "typeVersion": 1
    },
    {
      "id": "76c6fb4b-5b82-4115-8be4-63b6ce652793",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -540,
        880
      ],
      "parameters": {
        "color": 7,
        "width": 540,
        "height": 420,
        "content": "그림 1. n8n 비디오 검색 프론트엔드"
      },
      "typeVersion": 1
    },
    {
      "id": "b8ad1b2b-ff05-46a3-a817-951d02d69b01",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        -740
      ],
      "parameters": {
        "color": 5,
        "width": 400,
        "height": 240,
        "content": "Qdrant 컬렉션 생성\n\nqdrant 컬렉션을 수동으로 생성해야 할 수 있습니다. 이를 qdrant 대시보드의 콘솔에서 실행하세요.\n\n```\nPUT collections/n8n_videos\n{\n  \"vectors\": {\n      \"distance\": \"Cosine\",\n      \"size\": 1536\n  }\n}\n```"
      },
      "typeVersion": 1
    },
    {
      "id": "189d6973-cd09-4176-b04b-4c8feea2e653",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1660,
        -1160
      ],
      "parameters": {
        "width": 440,
        "height": 1080,
        "content": "## 사용해 보세요!\n\n### YouTube 비디오에 대한 자체 RAG 검색을 구축해 보고 싶으신가요? 이제 가능합니다! 이 n8n 템플릿은 Apify, Qdrant 및 선택한 LLM을 활용하여 매우 유능한 YouTube 검색 엔진을 구축하는 방법을 보여줍니다. 이를 통해 많은 비디오를 빠르고 효율적으로 탐색하여 연구나 시청을 할 수 있습니다.\n\n이 템플릿은 원래 \"n8n @ scale office-hours\" 라이브스트림 비디오에 질문을 하기 위해 시작했으나, 공식 채널의 최신 비디오를 포함하도록 확장했습니다.\n\n**데모 확인하기**: [https://jimleuk.app.n8n.cloud/webhook/n8n_videos](https://jimleuk.app.n8n.cloud/webhook/n8n_videos)\n\n### 작동 원리\n* 1단계는 YouTube 비디오 자막을 벡터 데이터베이스에 수집하는 것입니다. 이를 위해 Apify를 사용하여 스크래핑하고 Qdrant를 사용하여 저장했습니다.\n* 자막은 더 작은 청크로 분할되며, 나중 검색 및 필터링을 돕기 위해 메타데이터를 신중하게 태그합니다.\n* 2단계는 벡터화된 자막을 쿼리할 수 있는 웹 프론트엔드를 구축하는 것입니다. 웹훅을 사용하여 간단한 웹 앱과 API를 제공하여 결과를 동적으로 가져옵니다.\n* 비디오를 검색할 때, 이 용례에서 더 넓은 범위의 비디오 결과를 반환하므로 더 나은 성능을 발휘하는 Qdrant의 검색 그룹 API를 사용했습니다.\n* 웹 프론트엔드에서 사용자가 결과를 클릭하면, 일치하는 YouTube 비디오가 내장된 비디오 플레이어에서 재생됩니다.\n\n### 사용 방법\n* 자격 증명이 모두 설정되면, 먼저 1-3단계를 실행하여 벡터 저장소를 채우세요.\n* 다음으로 워크플로를 활성화하여 웹 프론트엔드를 노출하세요. 브라우저에서 웹훅 [https://<n8n_url>/webhook/n8n_videos](/webhook/n8n_videos)를 방문하여 사용하세요.\n* 개인 용도로만 사용할 경우, 4단계의 속도 제한 메커니즘을 제거하는 것을 고려하세요.\n\n### 템플릿 커스터마이징\n* 공식 n8n 비디오에 관심이 없다면 다른 채널로 교체하세요.\n* 자막 추출 시 Google Gemini가 더 나은 성능을 발휘할 수 있습니다.\n\n### 도움이 필요하신가요?\n[Discord](https://discord.com/invite/XPKeKXeB7d) 에 참여하거나 [Forum](https://community.n8n.io/) 에 문의하세요!"
      },
      "typeVersion": 1
    },
    {
      "id": "a39f0990-6638-4b07-82ca-e91a9a289dfc",
      "name": "Has Results?1",
      "type": "n8n-nodes-base.if",
      "position": [
        180,
        240
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "0eb32753-8fd7-4266-a32f-a8f51bf77e93",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.result.groups }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "2552bce4-587f-45ee-8702-7c919978c87e",
      "name": "Generate Empty Response1",
      "type": "n8n-nodes-base.set",
      "position": [
        180,
        460
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "7c4bd999-49b1-4532-89ca-c53e98da6b17",
              "name": "text",
              "type": "string",
              "value": "={{ '' }}"
            },
            {
              "id": "916221de-2ec9-4fd9-8029-d7a3de88f395",
              "name": "results",
              "type": "string",
              "value": "=<div id=\"resultsCount\">0 Video Results</div>"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "9e9d74c0-3693-4f6f-b406-0ad9a8592c09",
      "name": "Respond to Webhook4",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        380,
        460
      ],
      "parameters": {
        "options": {
          "responseCode": 200
        },
        "respondWith": "text",
        "responseBody": "=<div id=\"answer\">{{ $json.text }}</div>\n{{ $json.results }}"
      },
      "executeOnce": false,
      "typeVersion": 1.1
    },
    {
      "id": "e39b205e-1574-4ce6-a87a-a0e090ca3e33",
      "name": "Groups to Items1",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        380,
        240
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "result.groups"
      },
      "typeVersion": 1
    },
    {
      "id": "96e5844a-090b-4e1d-b40a-e0ccf58eac13",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1080,
        460
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "03c3b930-c677-45e1-974c-8e6fc43acd56",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        2760,
        340
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    }
  ],
  "pinData": {},
  "connections": {
    "Wait": {
      "main": [
        [
          {
            "node": "For Each Chunk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WEB UI": {
      "main": [
        [
          {
            "node": "Generate Webpage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Map Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "10req/min": {
      "main": [
        [
          {
            "node": "Get Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "429 Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Query": {
      "main": [
        [
          {
            "node": "Get Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group Ref": {
      "main": [
        [
          {
            "node": "Extract Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Ref": {
      "main": [
        [
          {
            "node": "Get Video Subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Map Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SEARCH API": {
      "main": [
        [
          {
            "node": "Incr Rate Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "429 Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Query": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Results?": {
      "main": [
        [
          {
            "node": "Transcripts to Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Empty Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Results?1": {
      "main": [
        [
          {
            "node": "Groups to Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Empty Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "For Each Chunk": {
      "main": [
        [],
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Group": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Group Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Video": {
      "main": [
        [],
        [
          {
            "node": "Vectorise Subworkflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Embeddings": {
      "main": [
        [
          {
            "node": "Qdrant Groups Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk Subtitles": {
      "main": [
        [
          {
            "node": "Chunks to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunks to Items": {
      "main": [
        [
          {
            "node": "For Each Chunk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Up Output": {
      "main": [
        [
          {
            "node": "Sort By Video ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Results": {
      "main": [
        [
          {
            "node": "Has Results?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Results": {
      "main": [
        [
          {
            "node": "For Each Group",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Incr Rate Limit": {
      "main": [
        [
          {
            "node": "10req/min",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Webpage": {
      "main": [
        [
          {
            "node": "Render Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groups to Items1": {
      "main": [
        [
          {
            "node": "For Each Group",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Latest Youtube Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort By Video ID": {
      "main": [
        [
          {
            "node": "Generate Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Template": {
      "main": [
        [
          {
            "node": "Answer Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Results",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Answer Query",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Subtitles": {
      "main": [
        [
          {
            "node": "Chunk Subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ignore Already Seen": {
      "main": [
        [
          {
            "node": "For Each Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Groups Search": {
      "main": [
        [
          {
            "node": "Has Results?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcripts to Items": {
      "main": [
        [
          {
            "node": "Clean Up Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vectorise Subworkflow": {
      "main": [
        [
          {
            "node": "For Each Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vectorise Subworkflow1": {
      "main": [
        [
          {
            "node": "Video Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Empty Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Empty Response1": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Youtube Videos": {
      "main": [
        [
          {
            "node": "Ignore Already Seen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get Latest Youtube Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}