{
  "id": "4sKJLlAF2vqpkk2I",
  "meta": {
    "instanceId": "69133932b9ba8e1ef14816d0b63297bb44feb97c19f759b5d153ff6b0c59e18d"
  },
  "name": "Research AI Agent: Scrape and Summarize Articles and save to Notion (Gemini, Browserless)",
  "tags": [],
  "nodes": [
    {
      "id": "bbfff416-7270-4f1c-8024-b91b1c5acd1b",
      "name": "Gemini 2.5 PRO",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        -840,
        20
      ],
      "parameters": {
        "options": {
          "temperature": 0
        },
        "modelName": "models/gemini-2.5-pro-exp-03-25"
      },
      "credentials": {
        "googlePalmApi": {
          "id": "jLOqyTR4yTT1nYKi",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "e1a4b171-0850-4d90-bf49-5c39888922af",
      "name": "website_scraper",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        -220,
        -100
      ],
      "parameters": {
        "url": "http://browserless:3000/content",
        "method": "POST",
        "jsonBody": "={\n  \"url\": \"{url}\",\n  \"gotoOptions\": {\n    \"waitUntil\": \"networkidle0\"\n  }\n} ",
        "sendBody": true,
        "specifyBody": "json",
        "toolDescription": "website_scraper: Scrape a website given it's URL",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "url",
              "type": "string",
              "description": "the URL of the website to scrape"
            }
          ]
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "fd94022a-bf8d-47e6-b561-d622da350737",
      "name": "save_to_notion",
      "type": "n8n-nodes-base.notionTool",
      "position": [
        -620,
        -100
      ],
      "parameters": {
        "title": "={{ $fromAI('Title', `The original title of the article!`, 'string') }}",
        "blockUi": {
          "blockValues": [
            {
              "type": "heading_1",
              "textContent": "={{ $fromAI('Title', `The original title of the article!`, 'string') }}"
            },
            {
              "type": "heading_2",
              "textContent": "Quick Summary (TL;DR)"
            },
            {
              "textContent": "={{ $fromAI('Summary', `1-3 sentence summary capturing the absolute essence of this article`, 'string') }}"
            },
            {
              "type": "heading_2",
              "textContent": "={{ $fromAI('objective_title', `short title for the Problem Addressed / Objective section`, 'string') }}"
            },
            {
              "textContent": "={{ $fromAI('objective_text', `description of the core problem, question, or goal the article tackles. Keep it focused.`, 'string') }}"
            },
            {
              "type": "heading_2",
              "textContent": "={{ $fromAI('concepts_title', `title for the Key Concepts / Solution Overview section`, 'string') }}"
            },
            {
              "textContent": "={{ $fromAI('concepts_text', `Explain the main ideas, theories, or the high-level approach of the solution presented.`, 'string') }}"
            },
            {
              "type": "heading_2",
              "textContent": "Technologies & Libraries"
            },
            {
              "text": {
                "text": [
                  {
                    "text": "={{ $fromAI('technologies_list', `A bulleted list of Technologies, Libraries, Techniques and Patterns Mentioned in the article along with a short description for each`, 'string') }}",
                    "annotationUi": {}
                  }
                ]
              },
              "richText": true
            },
            {
              "type": "heading_2",
              "textContent": "Core Code Snippets"
            },
            {
              "textContent": "={{ $fromAI('important_code_snippet_description', `1-2 sentences of context explaining what this snippet does or why it's important.`, 'string') }}"
            },
            {
              "text": {
                "text": [
                  {
                    "text": "={{ $fromAI('important_code_snippet', `The actual code snippet. The AI must ensure this block doesn't exceed 2000 chars. If a crucial snippet is longer, the AI should either prioritize a key part of it or potentially link to the source if available. Specify the language (e.g., python, javascript) for syntax highlighting.`, 'string') }}",
                    "annotationUi": {
                      "code": true
                    }
                  }
                ]
              },
              "richText": true
            },
            {
              "type": "heading_2",
              "textContent": "Key Takeaways & Conclusion"
            },
            {
              "textContent": "={{ $fromAI('conclusions', `A bulleted item list that summarizes the main conclusions, results, or actionable insights from the article.`, 'string') }}"
            }
          ]
        },
        "options": {
          "icon": "={{ $fromAI('Icon', `Pick an emoji that would be good as an icon for this article. Remember, this should be a single emoji`, 'string') }}"
        },
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "mode": "list",
          "value": "1c385086-bf58-80a1-a60f-dbc96d64413f",
          "cachedResultUrl": "https://www.notion.so/1c385086bf5880a1a60fdbc96d64413f",
          "cachedResultName": "Knowledge Database"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Description|rich_text",
              "textContent": "={{ $fromAI('Description', `Short description of what the article is about`, 'string') }}"
            },
            {
              "key": "URL|url",
              "urlValue": "={{ $fromAI('URL', `The URL where this article resides.`, 'string') }}"
            },
            {
              "key": "Tags|multi_select",
              "multiSelectValue": "={{ $fromAI('Tags', `General (generic) tags that would be relevant for this article, such as technologies used / talked about, programming language, techniques and so on! Keep them generic not ultra specific.`, 'string') }}"
            },
            {
              "key": "Publication Date|date",
              "date": "={{ $fromAI('publication_date', `The date this article was published if available on the page.`, 'string') }}",
              "includeTime": false
            }
          ]
        },
        "descriptionType": "manual",
        "toolDescription": "save_to_notion: This tool saves the information to the Notion database."
      },
      "credentials": {
        "notionApi": {
          "id": "MDVhXc92xUP3UjxB",
          "name": "Notion account"
        }
      },
      "notesInFlow": false,
      "typeVersion": 2.2
    },
    {
      "id": "0e70e938-97ac-4aa0-80c1-8f7c9c519b9d",
      "name": "discord_notification",
      "type": "n8n-nodes-base.discordTool",
      "position": [
        -420,
        -100
      ],
      "webhookId": "617fa695-5a0a-464e-b3f2-bcd77ab5965b",
      "parameters": {
        "embeds": {
          "values": [
            {
              "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
              "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
            }
          ]
        },
        "content": "={{ $fromAI('Message', `Start with an :information_source: emoji. Then tell the chat that the action has been completed.`, 'string') }}",
        "guildId": {
          "__rl": true,
          "mode": "list",
          "value": "1207038600731168821",
          "cachedResultUrl": "https://discord.com/channels/1207038600731168821",
          "cachedResultName": "Let's Talk Dev Community"
        },
        "options": {},
        "resource": "message",
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": "1354563802854723774",
          "cachedResultUrl": "https://discord.com/channels/1207038600731168821/1354563802854723774",
          "cachedResultName": "research"
        }
      },
      "credentials": {
        "discordBotApi": {
          "id": "LfVy6XSgcAgRUPSS",
          "name": "Discord Bot account"
        }
      },
      "typeVersion": 2
    },
    {
      "id": "ee123a65-f0db-45e8-8e78-618b6c2b74e9",
      "name": "Save Article To Notion",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "onError": "continueErrorOutput",
      "position": [
        -700,
        -320
      ],
      "parameters": {
        "options": {
          "systemMessage": "=You will receive a URL. Your task is to:\n1. use the website_scraper to scrape the provided URL!\n2. use the save_to_notion tool to save the information to Notion.\n3. use the discord_notification tool to send a notification that the research is available, along with the notion URL of the created page.\n\n## Tools\nThe save_to_notion tool expects the following parameters:\n* title: the original title of the article\n* description: short description of what the article is about\n* url: the URL where this article resides.\n* tags: general (generic) tags that would be relevant for this article, such as technologies used / talked about, programming language, techniques and so on! Keep them generic not ultra specific.\n* publication_date: The date this article was published if available on the page.\n* summary: 1-3 sentence summary capturing the absolute essence of this article\n* objective_title: short title for the section about the problem addressed / objective\n* objective_text: description of the core problem, question, or goal the article tackles. Keep it focused.\n* concepts_title: title for the Key Concepts / Solution Overview section\n* concepts_text: explain the main ideas, theories, or the high-level approach of the solution presented. \n* technologies_list: A bulleted list of Technologies, Libraries, Techniques and Patterns Mentioned in the article along with a short description for each.\n* important_code_snippet_description: Description for The most important code snippet in the article. 1-2 sentences of context explaining what this snippet does or why it's important.\n* important_code_snippet: The actual code snippet. The AI must ensure this block doesn't exceed 2000 chars. If a crucial snippet is longer, the AI should either prioritize a key part of it or potentially link to the source if available. Specify the language (e.g., python, javascript) for syntax highlighting.\n* conclusions: A bulleted item list that summarizes the main conclusions, results, or actionable insights from the article.\n* icon: an emoji that represents this article best!\n\nRemember you always have to scrape the website using the website_scraper tool. Don't try to summarize without scraping!\nAlways save the results to notion using the save_to_notion tool. Only execute this tool once!"
        }
      },
      "executeOnce": true,
      "notesInFlow": false,
      "typeVersion": 1.7
    },
    {
      "id": "4a7f0a06-0d5f-4013-964c-fcc272484ff4",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -1000,
        -320
      ],
      "webhookId": "3e4878bb-dcb4-4591-975f-8f279605e90b",
      "parameters": {
        "public": true,
        "options": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "5bcfe9f7-a58f-4851-8ac4-ad6de06705df",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1060,
        -120
      ],
      "parameters": {
        "width": 340,
        "height": 260,
        "content": "## Google Gemini AI 모델\n\n이것을 거대한 컨텍스트 창과 속도 때문에 선택했습니다. 다른 AI 모델과 실험해 보세요."
      },
      "typeVersion": 1
    },
    {
      "id": "8a1ef34e-9f27-4e68-8ef2-34c488463512",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -280,
        -420
      ],
      "parameters": {
        "width": 380,
        "height": 460,
        "content": "## Browserless (https://www.browserless.io/)\n\nBrowserless를 자체 호스팅된 Docker 컨테이너로 (n8n과 함께) 사용하고 있습니다. Browserless의 클라우드 버전을 사용하거나 다른 웹 스크래핑 도구나 API를 사용할 수 있습니다.\n\nBrowserless에 대해 미리 빌드된 도구가 없기 때문에, 일반적인 HTTP 요청 도구를 사용하여 Browserless의 API를 호출할 수 있습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "dfba5742-663c-4b8c-a971-de120c8f73c1",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1980,
        -820
      ],
      "parameters": {
        "width": 860,
        "height": 980,
        "content": "## 설정\n\n1.  **워크플로우 가져오기:** 이 템플릿을 n8n 인스턴스로 가져옵니다.\n2.  **자격 증명 및 Notion 데이터베이스 구성:**\n    * **Notion 데이터베이스:**\n        * 기사 저장을 위한 Notion 데이터베이스를 생성하거나 지정합니다 (예: \"Knowledge Database\").\n        * 이 데이터베이스에 다음 속성(필드)을 포함하세요:\n            * `Name` (유형: 텍스트) - *기사 제목을 저장합니다.*\n            * `URL` (유형: URL) - *원본 기사 링크를 저장합니다.*\n            * `Description` (유형: 텍스트) - *AI 생성 요약을 저장할 수 있습니다.*\n            * `Tags` (유형: 다중 선택) - *선택 사항, 분류를 위해.*\n            * `Publication Date` (유형: 날짜) - *선택 사항, 기사가 게시된 날짜를 저장합니다.*\n        * n8n 통합이 이 특정 데이터베이스에 접근할 수 있도록 하세요.\n\t* Notion 데이터베이스의 형식이 다를 경우, 이 n8n 워크플로의 Notion 도구 구성을 그에 맞게 업데이트해야 합니다.\n    * **Notion 자격 증명:** Notion API 키를 얻어 n8n에서 Notion 자격 증명으로 추가하세요. 이 자격 증명을 `save_to_notion` 도구 노드에서 선택하세요.\n    * **`save_to_notion` 도구 구성:** 워크플로 내 `save_to_notion` 도구 노드에서 'Database ID' 필드를 위에서 준비한 Notion 데이터베이스의 ID로 설정하세요. 워크플로 데이터(URL, AI 요약 등)를 해당 데이터베이스 속성(`URL`, `Description` 등)에 매핑하세요. Notion 도구의 블록 섹션에서 연구 페이지를 위한 맞춤 형식을 정의할 수 있으며, AI가 웹 페이지에서 추출할 정확한 세부 정보를 채울 수 있습니다!\n    * **Google Gemini AI:** [Google AI Studio](https://aistudio.google.com/app/apikey) 또는 Google Cloud Console(Vertex AI 사용 시)에서 API 키를 얻어 자격 증명으로 추가하세요. 이 자격 증명을 \"Tools Agent\" 노드에서 선택하세요.\n    * **Discord(또는 다른 알림 서비스):** Discord 알림을 사용하는 경우, Webhook URL을 생성하세요([지침](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)) 또는 Bot Token을 설정하세요. n8n에 자격 증명을 추가하고 `discord_notification` 도구 노드에서 선택하세요. 대상 채널 ID를 구성하세요.\n    * **Browserless/HTTP Request:**\n        * **클라우드:** [Browserless](https://www.browserless.io/)에서 API 키를 얻어 `website_scraper` HTTP Request 도구 노드를 올바른 API 엔드포인트와 인증 헤더로 구성하세요.\n        * **셀프-호스팅:** Browserless Docker 컨테이너가 n8n에서 접근할 수 있도록 실행 중인지 확인하세요. `website_scraper` HTTP Request 도구 노드를 셀프-호스팅 Browserless 인스턴스 URL로 구성하세요.\n6.  **워크플로우 활성화:** 워크플로를 저장, 테스트하고 활성화하세요.\n\n## 이 워크플로를 필요에 맞게 커스터마이징하는 방법\n\n* **AI 모델 변경:** Gemini 2.5 Pro가 필요나 예산에 맞지 않으면, n8n에서 지원하는 다른 AI 모델(예: OpenAI GPT 모델이나 Anthropic Claude)을 Agent 노드에서 실험하세요. 맥락 창 크기와 대형 콘텐츠 처리 능력의 차이를 염두에 두세요.\n* **Notion 저장 수정:** `save_to_notion` 도구 노드를 조정하여 다른 데이터 필드를 매핑하세요(예: AI 프롬프트를 수정하여 요약 스타일을 변경하거나, 특정 태그를 추가하거나, 페이지 콘텐츠 구조를 변경하여 Notion 데이터베이스 속성에 맞추세요).\n* **스크래핑 조정:** 웹 페이지에서 추출할 데이터가 다를 경우, `website_scraper` 도구의 프롬프트/지시사항을 수정하거나 Browserless API에 보내는 매개변수를 변경하세요. HTTP Request 노드를 통해 Browserless를 다른 스크래핑 서비스/API로 교체할 수도 있습니다.\n\n### 출력"
      },
      "typeVersion": 1
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d5328d32-6ee9-4dd6-a68b-8736c85975fe",
  "connections": {
    "Gemini 2.5 PRO": {
      "ai_languageModel": [
        [
          {
            "node": "Save Article To Notion",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "save_to_notion": {
      "ai_tool": [
        [
          {
            "node": "Save Article To Notion",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "website_scraper": {
      "ai_tool": [
        [
          {
            "node": "Save Article To Notion",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "discord_notification": {
      "ai_tool": [
        [
          {
            "node": "Save Article To Notion",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Save Article To Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}