{
  "id": "Iz8TMdlc6JhaKkd9",
  "meta": {
    "instanceId": "dacfda6d2e1dbefe99a005845405509e9929b16710017f4bd5d2bf758941295c",
    "templateCredsSetupCompleted": true
  },
  "name": "YouTube Video Transcriber",
  "tags": [],
  "nodes": [
    {
      "id": "a4e2f554-ebae-41df-912a-0d1081fa1736",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -100,
        -60
      ],
      "webhookId": "70129cbe-1a05-495f-bd92-18d36c1bc260",
      "parameters": {
        "public": true,
        "options": {
          "title": "Youtube Video Transcriber 🚀",
          "subtitle": "Have a great transcription!  📖",
          "inputPlaceholder": "Insert a URL of a YouTube video.  💻"
        },
        "initialMessages": "Give me a URL of a video from YouTube to start! 👍"
      },
      "typeVersion": 1.1
    },
    {
      "id": "34b2b12e-0eb5-4f59-bd30-e7b595d06b8c",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        280,
        -60
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\ndef youtube_video_url_validatior(video_url) -> str:\n  try:\n    if not video_url:\n      return {\"text\": 'URL from the video is required.', \"is_valid\": False}\n    \n    video_url: str = re.sub(r\"\\s{2,}\", \" \", video_url.strip())\n    \n    if not video_url:\n      return {\"text\": 'URL from the video is required.', \"is_valid\": False}\n    \n    if len(video_url) < 25:\n      return {\"text\": 'URL is too short to be a valid YouTube URL.', \"is_valid\": False}\n    \n    # if not re.match(r'^[A-Za-z0-9:/._?&=-]+$', video_url):\n    #   return {\"text\": 'URL contains invalid characters.', \"is_valid\": False}\n    \n    is_valid: bool = False\n    \n    for pattern in [\n        r'^https?://(?:www\\.)?youtube\\.com/watch\\?v=[\\w-]{11}',\n        r'^https?://youtu\\.be/[\\w-]{11}',\n        r'^https?://(?:www\\.)?youtube\\.com/embed/[\\w-]{11}',\n        r'^https?://(?:www\\.)?youtube\\.com/v/[\\w-]{11}',\n    ]:\n        if re.match(pattern, video_url):\n          is_valid = True\n          \n          break\n    \n    if not is_valid:\n      return {\"text\": 'Invalid YouTube URL format.', \"is_valid\": False}\n      \n    video_url_id: str | None = re.search(r'(?:v=|youtu\\.be/|embed/|v/)([\\w-]{11})', video_url).group(1)\n    \n    if not video_url_id or not re.match(r'^[\\w-]{11}$', video_url_id):\n      return {\"text\": 'Invalid YouTube video ID.', \"is_valid\": False}\n    \n    return {\"text\": video_url, \"is_valid\": True}\n  except Exception as ex:\n    raise ex\n\nreturn youtube_video_url_validatior(_input.first().json.chatInput)"
      },
      "typeVersion": 2
    },
    {
      "id": "712cbf28-df12-44fc-b54a-bc21e13e55e7",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        600,
        -240
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "b8927a53-2755-4364-84b1-5340c5c31af5",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.is_valid }}",
              "rightValue": ""
            }
          ]
        },
        "looseTypeValidation": true
      },
      "typeVersion": 2.2
    },
    {
      "id": "be9e1903-25bc-4f1b-8793-5e657205dd5d",
      "name": "Respond to Webhook - Chat Message",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        600,
        60
      ],
      "parameters": {
        "options": {},
        "respondWith": "text",
        "responseBody": "={{ $json.text }}"
      },
      "retryOnFail": true,
      "typeVersion": 1.1
    },
    {
      "id": "98bc7747-e688-4683-8686-ca44023f8648",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -200,
        -240
      ],
      "parameters": {
        "color": 5,
        "width": 300,
        "height": 420,
        "content": "## 진입 지점\n\n워크플로우 진입 지점은 노드 채팅 메시지입니다."
      },
      "typeVersion": 1
    },
    {
      "id": "7ca94ab6-7306-4b04-8b34-eb9e0937d681",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        180,
        -240
      ],
      "parameters": {
        "color": 3,
        "width": 300,
        "height": 420,
        "content": "## URL 검증\n\n이 노드는 유효한 YouTube 비디오 URL만 전달되도록 합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "c719c022-b55b-42b3-ab5f-36c0e1d62512",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1360,
        -320
      ],
      "parameters": {
        "color": 4,
        "width": 460,
        "height": 560,
        "content": "## 데이터 구조화\n\n여기에는 워크플로의 핵심 부분으로, 답변을 위한 올바른 형식을 얻기 위해 구조화가 수행됩니다.\n\n**주의:**\n\n1. 이 템플릿을 구현하는 사용자는 OpenAI 프롬프트의 언어를 원하는 출력에 맞게 수정해야 합니다.\n\n2. OpenAI API 키는 필수이며, 데이터 구조화 및 처리를 지원하도록 적절히 구성되어야 합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "7e1fa50f-7bd3-4bed-8537-969baa4c61de",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        820,
        -480
      ],
      "parameters": {
        "color": 7,
        "width": 460,
        "height": 900,
        "content": "## Supadata\n\nSupadata는 YouTube 비디오 URL을 간단한 API를 통해 구조화된 데이터로 변환하는 강력한 도구입니다. 효율적으로 전사본을 추출하여 AI 훈련, 데이터 분석 또는 텍스트 기반 애플리케이션에 이상적입니다.\n\n**주의:**\n\n1. 이 템플릿을 구현하는 사용자는 쿼리 매개변수의 언어를 자신의 필요에 맞게 변경해야 합니다. \n\n2. API 키가 필요하며, 워크플로가 제대로 작동하기 위해 구성해야 합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "35bf3191-4113-4a92-85a8-b22d3b2a4134",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -920,
        -180
      ],
      "parameters": {
        "width": 640,
        "height": 300,
        "content": "이 워크플로는 YouTube 비디오 콘텐츠를 명확하고 간결한 필사본으로 변환하여 접근을 간소화하며, 실용성을 추구하는 사용자에게 이상적입니다. YouTube 비디오를 직접 필사하고 텍스트를 반환하며, 전체 비디오를 시청할 필요성을 제거합니다.\n\n이 워크플로의 필요성은 공부의 요구에서 비롯되었으며, 일상의 빠른 속도 속에서 필사된 콘텐츠를 읽는 것이 전체 비디오를 시청하는 것보다 요약을 만드는 데 더 빠르고 효율적임이 입증되었습니다. 종종 시간 제약으로 인해 비디오를 완전히 시청하기 어렵고, 서면 텍스트는 정보를 더 빠르게 흡수할 수 있게 합니다. 이 솔루션은 주제에 관계없이 모든 YouTube 비디오의 콘텐츠에 원활하게 접근하고 검토할 수 있는 방법을 제공합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "2ea0b992-231b-4f6d-9f6f-9f488d266cfb",
      "name": "Edit Fields - Respond to Chat Message 2",
      "type": "n8n-nodes-base.set",
      "position": [
        1000,
        180
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "66270798-60eb-4ab8-8572-ab957474e260",
              "name": "text",
              "type": "string",
              "value": "={{ $json.error }} - {{ $json.message }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "9846e903-015a-4111-b582-572d473fe4d3",
      "name": "Edit Fields - Respond to Chat Message 3",
      "type": "n8n-nodes-base.set",
      "position": [
        1900,
        -320
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "97e0c175-8060-43da-9761-5c25d660c7ed",
              "name": "text",
              "type": "string",
              "value": "={{ $json.message.content }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "775e067c-3518-4c64-a939-5f9b9b435b3c",
      "name": "Edit Fields - Respond to Chat Message 4",
      "type": "n8n-nodes-base.set",
      "position": [
        1900,
        100
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "66270798-60eb-4ab8-8572-ab957474e260",
              "name": "text",
              "type": "string",
              "value": "=Something went wrong with the data structuring."
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "91e22fcc-79b8-48d2-ba6e-bfb699ed9a07",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "onError": "continueErrorOutput",
      "position": [
        1000,
        -100
      ],
      "parameters": {
        "url": "=https://api.supadata.ai/v1/youtube/transcript?url={{ $json.text }}&text=true&lang=pt",
        "options": {
          "timeout": 300000
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "SUPADATA_API_KEY"
            }
          ]
        }
      },
      "executeOnce": false,
      "notesInFlow": false,
      "retryOnFail": false,
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "id": "3fce199e-2e95-40a8-a78e-20a25c3f4300",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "onError": "continueErrorOutput",
      "position": [
        1460,
        20
      ],
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini-2024-07-18",
          "cachedResultName": "GPT-4O-MINI-2024-07-18"
        },
        "options": {},
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert in grammar corrections and textual structuring.\n\nCorrect the classification of the provided text, adding commas, periods, question marks and other symbols necessary for natural and consistent reading. Do not change any words, just adjust the punctuation according to the grammatical rules and context.\n\nOrganize your content using markdown, structuring it with titles, subtitles, lists or other protected elements to clearly highlight the topics and information captured. Leave it in Portuguese and remember to always maintain the original formatting.\n\nTextual organization should always be a priority according to the content of the text, as well as the appropriate title, which must make sense."
            },
            {
              "content": "={{ $json.content }}"
            }
          ]
        }
      },
      "credentials": {
        "openAiApi": {
          "id": "GpAe9wonPZjokqpc",
          "name": "OpenAi account"
        }
      },
      "retryOnFail": true,
      "typeVersion": 1.8
    }
  ],
  "active": true,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d2f6a7fb-f3e1-462f-8627-7f67cc7bfa5b",
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook - Chat Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Edit Fields - Respond to Chat Message 3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields - Respond to Chat Message 4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields - Respond to Chat Message 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}