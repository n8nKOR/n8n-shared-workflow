{
  "meta": {
    "instanceId": "408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9",
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "id": "a342005e-a88e-419b-b929-56ecbba4a936",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        1300,
        1180
      ],
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"learnings\": {\n      \"type\": \"array\",\n      \"description\": \"List of learnings, max of 3.\",\n      \"items\": { \"type\": \"string\" }\n    },\n    \"followUpQuestions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"description\": \"List of follow-up questions to research the topic further, max of 3.\"\n      }\n    }\n  }\n}"
      },
      "typeVersion": 1.2
    },
    {
      "id": "126b8151-6d20-43b8-8028-8163112c4c5b",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        -1360,
        -460
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "df28b12e-7c20-4ff5-b5b8-dc773aa14d4b",
              "name": "request_id",
              "type": "string",
              "value": "={{ $execution.id }}"
            },
            {
              "id": "9362c1e7-717d-444a-8ea2-6b5f958c9f3f",
              "name": "prompt",
              "type": "string",
              "value": "={{ $json['What would you like to research?'] }}"
            },
            {
              "id": "09094be4-7844-4a9e-af82-cc8e39322398",
              "name": "depth",
              "type": "number",
              "value": "={{\n!isNaN($json['input-depth'][0].toNumber())\n  ? $json['input-depth'][0].toNumber()\n  : 1\n}}"
            },
            {
              "id": "3fc30a30-7806-4013-835d-97e27ddd7ae1",
              "name": "breadth",
              "type": "number",
              "value": "={{\n!isNaN($json['input-breadth'][0].toNumber())\n  ? $json['input-breadth'][0].toNumber()\n  : 1\n}}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "1d0fb87b-263d-46c2-b016-a29ba1d407ab",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1120,
        1180
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "o3-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "39b300d9-11ba-44f6-8f43-2fe256fe4856",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -860,
        1760
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "o3-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "018da029-a796-45c5-947c-791e087fe934",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -1060,
        -300
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "o3-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "525da936-a9eb-4523-b27a-ff6ae7b0e5ef",
      "name": "Structured Output Parser1",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -840,
        -300
      ],
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"questions\": {\n      \"type\": \"array\",\n      \"description\": \"Follow up questions to clarify the research direction, max of 3.\",\n      \"items\": {\n          \"type\": \"string\"\n      }\n    }\n  }\n}"
      },
      "typeVersion": 1.2
    },
    {
      "id": "e6664883-cff4-4e09-881e-6b6f684f9cac",
      "name": "On form submission",
      "type": "n8n-nodes-base.formTrigger",
      "position": [
        -1760,
        -460
      ],
      "webhookId": "026629c8-7644-493c-b830-d9c72eea307d",
      "parameters": {
        "options": {
          "path": "deep_research",
          "ignoreBots": true,
          "buttonLabel": "Next"
        },
        "formTitle": " DeepResearcher",
        "formFields": {
          "values": [
            {
              "fieldType": "html"
            }
          ]
        },
        "formDescription": "=DeepResearcher is a multi-step, recursive approach using the internet to solve complex research tasks, accomplishing in tens of minutes what a human would take many hours.\n\nTo use, provide a short summary of what the research and how \"deep\" you'd like the workflow to investigate. Note, the higher the numbers the more time and cost will occur for the research.\n\nThe workflow is designed to complete independently and when finished, a report will be saved in a designated Notion Database."
      },
      "typeVersion": 2.2
    },
    {
      "id": "6b8ebc08-c0b1-4af8-99cc-79d09eea7316",
      "name": "Generate SERP Queries",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -1040,
        820
      ],
      "parameters": {
        "text": "=Given the following prompt from the user, generate a list of SERP queries to research the topic.\nReduce the number of words in each query to its keywords only.\nReturn a maximum of {{ $('JobType Router').first().json.data.breadth }} queries, but feel free to return less if the original prompt is clear. Make sure each query is unique and not similar to each other: <prompt>{{ $('JobType Router').first().json.data.query.trim() }}</prompt>\n\n{{\n$('JobType Router').first().json.data.learnings.length\n  ? `Here are some learnings from previous research, use them to generate more specific queries:\\n${$('JobType Router').first().json.data.learnings.map(text => `* ${text}`).join('\\n')}`\n  : ''\n}}",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=You are an expert researcher. Today is {{ $now.toLocaleString() }}. Follow these instructions when responding:\n  - You may be asked to research subjects that is after your knowledge cutoff, assume the user is right when presented with news.\n  - The user is a highly experienced analyst, no need to simplify it, be as detailed as possible and make sure your response is correct.\n  - Be highly organized.\n  - Suggest solutions that I didn't think about.\n  - Be proactive and anticipate my needs.\n  - Treat me as an expert in all subject matter.\n  - Mistakes erode my trust, so be accurate and thorough.\n  - Provide detailed explanations, I'm comfortable with lots of detail.\n  - Value good arguments over authorities, the source is irrelevant.\n  - Consider new technologies and contrarian ideas, not just the conventional wisdom.\n  - You may use high levels of speculation or prediction, just flag it for me."
            }
          ]
        },
        "promptType": "define",
        "hasOutputParser": true
      },
      "typeVersion": 1.5
    },
    {
      "id": "34e1fa5d-bc0c-4b9e-84a7-35db2b08c772",
      "name": "Structured Output Parser2",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -860,
        980
      ],
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"queries\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"query\": {\n            \"type\": \"string\",\n            \"description\": \"The SERP query\"\n          },\n          \"researchGoal\": {\n            \"type\": \"string\",\n            \"description\": \"First talk about the goal of the research that this query is meant to accomplish, then go deeper into how to advance the research once the results are found, mention additional research directions. Be as specific as possible, especially for additional research directions.\"\n          }\n        }\n      }\n    }\n  }\n}"
      },
      "typeVersion": 1.2
    },
    {
      "id": "be6dd6a2-aacf-4682-8f13-8ae24c4249a3",
      "name": "OpenAI Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -1040,
        980
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "o3-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "d5ce6e21-cd07-44fa-b6d0-90bf7531ee01",
      "name": "Set Initial Query",
      "type": "n8n-nodes-base.set",
      "position": [
        -580,
        180
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "acb41e93-70c6-41a3-be0f-e5a74ec3ec88",
              "name": "query",
              "type": "string",
              "value": "={{ $('JobType Router').first().json.data.query }}"
            },
            {
              "id": "7fc54063-b610-42bc-a250-b1e8847c4d1e",
              "name": "learnings",
              "type": "array",
              "value": "={{ $('JobType Router').first().json.data.learnings }}"
            },
            {
              "id": "e8f1c158-56fb-41c8-8d86-96add16289bb",
              "name": "breadth",
              "type": "number",
              "value": "={{ $('JobType Router').first().json.data.breadth }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "9de6e4a1-a2b5-4a6f-948e-a0585edcae48",
      "name": "SERP to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -700,
        820
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "output.queries"
      },
      "typeVersion": 1
    },
    {
      "id": "2c9c4cdf-942b-494c-83fb-ed5ec37385ee",
      "name": "Item Ref",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -220,
        1020
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "703c57af-de19-4f00-b580-711a272fa5ca",
      "name": "Research Goal + Learnings",
      "type": "n8n-nodes-base.set",
      "position": [
        1460,
        1160
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "9acec2cc-64c8-4e62-bed4-c3d9ffab1379",
              "name": "researchGoal",
              "type": "string",
              "value": "={{ $('Item Ref').first().json.researchGoal }}"
            },
            {
              "id": "1b2d2dad-429b-4fc9-96c5-498f572a85c3",
              "name": "learnings",
              "type": "array",
              "value": "={{ $json.output.learnings }}"
            },
            {
              "id": "7025f533-02ab-4031-9413-43390fb61f05",
              "name": "followUpQuestions",
              "type": "string",
              "value": "={{ $json.output.followUpQuestions }}"
            },
            {
              "id": "c9e34ea4-5606-46d6-8d66-cb42d772a8b4",
              "name": "urls",
              "type": "array",
              "value": "={{\n$('Get Markdown + URL')\n  .all()\n  .map(item => item.json.url)\n}}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "16ed2835-3af4-45e3-b5a7-e4342d571aa0",
      "name": "Accumulate Results",
      "type": "n8n-nodes-base.set",
      "position": [
        -200,
        180
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "db509e90-9a86-431f-8149-4094d22666cc",
              "name": "should_stop",
              "type": "boolean",
              "value": "={{\n$runIndex >= ($('JobType Router').first().json.data.depth)\n}}"
            },
            {
              "id": "90986e2b-8aca-4a22-a9db-ed8809d6284d",
              "name": "all_learnings",
              "type": "array",
              "value": "={{\nArray($runIndex+1)\n  .fill(0)\n  .flatMap((_,idx) => {\n    try {\n      return $('Generate Learnings')\n        .all(0,idx)\n        .flatMap(item => item.json.data.flatMap(d => d.learnings))\n    } catch (e) {\n      return []\n    }\n  })\n}}"
            },
            {
              "id": "3eade958-e8ab-4975-aac4-f4a4a983c163",
              "name": "all_urls",
              "type": "array",
              "value": "={{\nArray($runIndex+1)\n  .fill(0)\n  .flatMap((_,idx) => {\n    try {\n      return $('Generate Learnings')\n        .all(0,idx)\n        .flatMap(item => item.json.data.flatMap(d => d.urls))\n    } catch (e) {\n      return []\n    }\n  })\n}}"
            }
          ]
        }
      },
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "id": "0011773e-85c6-4fe1-8554-c23ce50706d0",
      "name": "DeepResearch Results",
      "type": "n8n-nodes-base.set",
      "position": [
        160,
        360
      ],
      "parameters": {
        "mode": "raw",
        "options": {},
        "jsonOutput": "={{ $('Generate Learnings').item.json }}"
      },
      "typeVersion": 3.4
    },
    {
      "id": "c0b646d0-1246-4864-8f79-8b7a66e4e083",
      "name": "Results to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        320,
        360
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "data"
      },
      "typeVersion": 1
    },
    {
      "id": "3c52ec3e-c952-4b5f-ab12-f1b5d02aba74",
      "name": "Set Next Queries",
      "type": "n8n-nodes-base.set",
      "position": [
        480,
        360
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "d88bfe95-9e73-4d25-b45c-9f164b940b0e",
              "name": "query",
              "type": "string",
              "value": "=Previous research goal: {{ $json.researchGoal }}\nFollow-up research directions: {{ $json.followUpQuestions.map(q => `\\n${q}`).join('') }}"
            },
            {
              "id": "4aa20690-d998-458a-b1e4-0d72e6a68e6b",
              "name": "learnings",
              "type": "array",
              "value": "={{ $('Accumulate Results').item.json.all_learnings }}"
            },
            {
              "id": "89acafae-b04a-4d5d-b08b-656e715654e4",
              "name": "breadth",
              "type": "number",
              "value": "={{ $('JobType Router').first().json.data.breadth }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "bc59dddc-2b03-481f-91c6-ea8aa378eef0",
      "name": "For Each Query...",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -420,
        860
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "903c31c4-5fdc-4cb6-8baa-402555997266",
      "name": "Feedback to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -720,
        -460
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "output.questions"
      },
      "typeVersion": 1
    },
    {
      "id": "59ff671d-5d4f-42ff-b94f-ed30a8531e55",
      "name": "Ask Clarity Questions",
      "type": "n8n-nodes-base.form",
      "position": [
        -360,
        -380
      ],
      "webhookId": "d3375ba6-0008-4fcb-96bc-110374de2603",
      "parameters": {
        "options": {
          "formTitle": "DeepResearcher",
          "buttonLabel": "Answer",
          "formDescription": "=<img\n  src=\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/o4wqztloz3j6okfxpeyw\"\n  width=\"100%\"\n  style=\"border:1px solid #ccc\"\n/>\n<p style=\"text-align:left\">\nAnswer the following clarification questions to assist the DeepResearcher better under the research topic.\n</p>\n<hr style=\"display:block;margin-top:16px;margin-bottom:0\" />\n<p style=\"text-align:left;font-family:sans-serif;font-weight:700;\">\nTotal {{ $('Feedback to Items').all().length }} questions.\n</p>"
        },
        "formFields": {
          "values": [
            {
              "fieldType": "textarea",
              "fieldLabel": "={{ $json[\"output.questions\"] }}",
              "placeholder": "=",
              "requiredField": true
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "1c2cf79b-f1a1-4ecc-bb45-3d4460c947bd",
      "name": "For Each Question...",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -540,
        -460
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "0c9ffa99-2687-4df5-8581-0c5b0b2657a9",
      "name": "DeepResearch Subworkflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -1880,
        820
      ],
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "requestId",
              "type": "any"
            },
            {
              "name": "jobType"
            },
            {
              "name": "data",
              "type": "object"
            }
          ]
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "127ab95d-bf89-4762-bfb5-34521e620ae2",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1140,
        -680
      ],
      "parameters": {
        "color": 7,
        "width": 1000,
        "height": 560,
        "content": "## 2. 명확화 질문을 하다\n\n[폼 노드에 대해 더 읽기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/)\n\nLLM에 의해 생성된 명확화 질문을 처리하기 위해, 내 \"AI Interviewer\" 템플릿([링크](https://n8n.io/workflows/2566-conversational-interviews-with-ai-agents-and-n8n-forms/))에서 발견된 동일한 기술을 사용했습니다.\n이것은 동적으로 생성된 폼의 루핑을 포함하여 사용자에게서 답변을 수집합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "e87c0f19-6002-4aa2-931a-ca7546146a84",
      "name": "Clarifying Questions",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -1040,
        -460
      ],
      "parameters": {
        "text": "=Given the following query from the user, ask some follow up questions to clarify the research direction. Return a maximum of 3 questions, but feel free to return less if the original query is clear: <query>{{ $json.prompt }}</query>`",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=You are an expert researcher. Today is {{ $now.toLocaleString() }}. Follow these instructions when responding:\n  - You may be asked to research subjects that is after your knowledge cutoff, assume the user is right when presented with news.\n  - The user is a highly experienced analyst, no need to simplify it, be as detailed as possible and make sure your response is correct.\n  - Be highly organized.\n  - Suggest solutions that I didn't think about.\n  - Be proactive and anticipate my needs.\n  - Treat me as an expert in all subject matter.\n  - Mistakes erode my trust, so be accurate and thorough.\n  - Provide detailed explanations, I'm comfortable with lots of detail.\n  - Value good arguments over authorities, the source is irrelevant.\n  - Consider new technologies and contrarian ideas, not just the conventional wisdom.\n  - You may use high levels of speculation or prediction, just flag it for me."
            }
          ]
        },
        "promptType": "define",
        "hasOutputParser": true
      },
      "typeVersion": 1.5
    },
    {
      "id": "b84f9c4a-c1de-4288-bab2-b7f5ffb8b542",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -660,
        -60
      ],
      "parameters": {
        "color": 7,
        "width": 1360,
        "height": 640,
        "content": "## 6. DeepSearch 루프 수행\n\n[n8n의 Looping에 대해 자세히 알아보기](https://docs.n8n.io/flow-logic/looping/#creating-loops)\n\nDeep Research 흐름의 핵심은 광범위한 데이터 수집 능력입니다. 이 구현에서 이 능력은 원래 쿼리에서 시작하여 AI가 생성한 서브쿼리로 확장되는 재귀적인 웹 검색 및 스크래프 루프로 나타납니다. 얼마나 많은 서브쿼리를 생성할지 지정된 깊이와 너비 매개변수에 의해 결정됩니다.\n\n각 서브쿼리에 대해 \"Learnings\"이 생성되며 루프의 각 반복에서 누적됩니다. 루프가 깊이 제한에 도달할 때 종료되면, 모든 학습 내용이 수집되며, 이 학습 내용들을 사용하여 보고서를 생성합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "0a8c3a01-d4d4-4075-9521-035b7df9aa5a",
      "name": "End Form",
      "type": "n8n-nodes-base.form",
      "position": [
        960,
        -420
      ],
      "webhookId": "88f2534b-2b82-4b40-a4bc-97d96384e8fd",
      "parameters": {
        "options": {},
        "operation": "completion",
        "completionTitle": "=Thank you for using DeepResearcher.",
        "completionMessage": "=You may now close this window."
      },
      "typeVersion": 1
    },
    {
      "id": "44a3603f-a5a1-4031-8c5f-c748b1007b47",
      "name": "Initiate DeepResearch",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        600,
        -420
      ],
      "parameters": {
        "mode": "each",
        "options": {
          "waitForSubWorkflow": false
        },
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {
            "data": "={{\n{\n  \"query\": $('Get Initial Query').first().json.query,\n  \"learnings\": [],\n  \"depth\": $('Set Variables').first().json.depth,\n  \"breadth\": $('Set Variables').first().json.breadth,\n}\n}}",
            "jobType": "deepresearch_initiate",
            "requestId": "={{ $('Set Variables').first().json.request_id }}"
          },
          "schema": [
            {
              "id": "requestId",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "requestId",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "jobType",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "jobType",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "data",
              "type": "object",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "data",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "b243eb76-9ed9-4327-968f-c21844bc9df4",
      "name": "Execution Data",
      "type": "n8n-nodes-base.executionData",
      "position": [
        -1700,
        820
      ],
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "requestId",
              "value": "={{ $json.requestId }}"
            },
            {
              "key": "=jobType",
              "value": "={{ $json.jobType }}"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "57ca4b22-9349-4b34-8f6b-c502905b5172",
      "name": "JobType Router",
      "type": "n8n-nodes-base.switch",
      "position": [
        -1520,
        820
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "initiate",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.jobType }}",
                    "rightValue": "deepresearch_initiate"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "learnings",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ecbfa54d-fc97-48c5-8d3d-f0538b8d727b",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.jobType }}",
                    "rightValue": "deepresearch_learnings"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "report",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "392f9a98-ec22-4e57-9c8e-0e1ed6b7dafa",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.jobType }}",
                    "rightValue": "deepresearch_report"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 3.2
    },
    {
      "id": "1f880fbd-71ba-4e5b-8d99-9654ae0c949f",
      "name": "OpenAI Chat Model4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -20,
        -280
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "o3-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "8gccIjcuf3gvaoEr",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "ea65589b-106f-4ff1-a6f2-763393c2cb07",
      "name": "Get Initial Query",
      "type": "n8n-nodes-base.set",
      "position": [
        -360,
        -540
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "14b77741-c3c3-4bd2-be6e-37bd09fcea2b",
              "name": "query",
              "type": "string",
              "value": "=Initial query: {{ $('Set Variables').first().json.prompt }}\nFollow-up Questions and Answers:\n{{\n$input.all()\n  .map(item => {\n    const q = Object.keys(item.json)[0];\n    const a = item.json[q];\n    return `question: ${q}\\nanswer: ${a}`;\n  })\n  .join('\\n')\n}}"
            }
          ]
        }
      },
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "id": "09a363f2-6300-430d-8c7e-3e1611ab8e68",
      "name": "Structured Output Parser4",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        160,
        -280
      ],
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"description\":\" A short title summarising the research topic\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"A short description to summarise the research topic\"\n    }\n  }\n}"
      },
      "typeVersion": 1.2
    },
    {
      "id": "9910804e-8376-4e2e-a011-7d32ca951edf",
      "name": "Create Row",
      "type": "n8n-nodes-base.notion",
      "position": [
        300,
        -420
      ],
      "parameters": {
        "title": "={{ $json.output.title }}",
        "options": {},
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "mode": "list",
          "value": "19486dd6-0c0c-80da-9cb7-eb1468ea9afd",
          "cachedResultUrl": "https://www.notion.so/19486dd60c0c80da9cb7eb1468ea9afd",
          "cachedResultName": "n8n DeepResearch"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Description|rich_text",
              "textContent": "={{ $json.output.description }}"
            },
            {
              "key": "Status|status",
              "statusValue": "Not started"
            },
            {
              "key": "Request ID|rich_text",
              "textContent": "={{ $('Set Variables').first().json.request_id }}"
            },
            {
              "key": "Name|title",
              "title": "={{ $json.output.title }}"
            }
          ]
        }
      },
      "credentials": {
        "notionApi": {
          "id": "iHBHe7ypzz4mZExM",
          "name": "Notion account"
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "9f06d9ae-220d-4f5b-bcbf-761b88ba255c",
      "name": "Report Page Generator",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -20,
        -420
      ],
      "parameters": {
        "text": "=Create a suitable title for the research report which will be created from the user's query.\n<query>{{ $json.query }}</query>",
        "promptType": "define",
        "hasOutputParser": true
      },
      "typeVersion": 1.5
    },
    {
      "id": "5b434bdc-e1e7-4348-b03d-dcbb6a485263",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -120,
        -680
      ],
      "parameters": {
        "color": 7,
        "width": 600,
        "height": 560,
        "content": "## 3. Notion에서 빈 보고서 페이지 만들기\n\n[Notion 노드에 대해 더 읽기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.notion/)\n\n최종 보고서를 어디에 업로드할지 고려되었고, 친숙함 때문에 Notion이 선택되었습니다. 이는 선호하는 어떤 위키 도구로도 쉽게 변경할 수 있습니다.\n\n그러나 따라오고 계시다면, 복제해야 할 Notion 데이터베이스가 있습니다 - [Jim의 n8n DeepResearcher 데이터베이스](https://jimleuk.notion.site/19486dd60c0c80da9cb7eb1468ea9afd?v=19486dd60c0c805c8e0c000ce8c87acf)."
      },
      "typeVersion": 1
    },
    {
      "id": "0cfb3548-14a8-4dcc-8362-a7ca1d4c328f",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        500,
        -680
      ],
      "parameters": {
        "color": 7,
        "width": 640,
        "height": 560,
        "content": "## 4. DeepResearch를 비동기적으로 트리거하기\n\n[Execute Trigger 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/)\n\nn8n은 비동기 작업을 별도의 실행으로 분리하여 처리합니다. 이는 기본적으로 사용자가 연구자가 작업을 수행하는 동안 기다리지 않거나 브라우저 창을 열어두지 않아도 된다는 의미입니다.\n\nDeepResearcher 작업을 시작하면, 훌륭한 사용자 경험을 위해 온보딩 여정을 마무리할 수 있습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "b90456d0-fae3-4809-bc13-55649e6e919a",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1160,
        620
      ],
      "parameters": {
        "color": 7,
        "width": 620,
        "height": 540,
        "content": "## 7. 검색 쿼리 생성\n\n[Basic LLM 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\n인간 연구원처럼, DeepResearcher는 웹 검색과 콘텐츠를 정보의 선호 소스로 의존할 것입니다. 다양한 소스를 다룰 수 있도록 하기 위해, AI는 먼저 관련 연구 쿼리를 생성할 수 있으며, 각각을 별도로 탐색할 수 있습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "9fd00d55-1c76-425b-8386-7bc5b2bb47ac",
      "name": "Is Depth Reached?",
      "type": "n8n-nodes-base.if",
      "position": [
        -40,
        180
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "75d18d88-6ba6-43df-bef7-3e8ad99ad8bd",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.should_stop }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "f658537b-4f4c-4427-a66f-56cfd950bffc",
      "name": "Get Research Results",
      "type": "n8n-nodes-base.set",
      "position": [
        160,
        180
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "90b3da00-dcd5-4289-bd45-953146a3b0ba",
              "name": "all_learnings",
              "type": "array",
              "value": "={{ $json.all_learnings }}"
            },
            {
              "id": "623dbb3d-83a1-44a9-8ad3-48d92bc42811",
              "name": "all_urls",
              "type": "array",
              "value": "={{ $json.all_urls }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "6059f3ba-e4a0-4528-894c-6080eedb91c3",
      "name": "Get Existing Row",
      "type": "n8n-nodes-base.notion",
      "position": [
        -1040,
        180
      ],
      "parameters": {
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "key": "Request ID|rich_text",
              "condition": "equals",
              "richTextValue": "={{ $json.requestId.toString() }}"
            }
          ]
        },
        "options": {},
        "resource": "databasePage",
        "matchType": "allFilters",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "mode": "list",
          "value": "19486dd6-0c0c-80da-9cb7-eb1468ea9afd",
          "cachedResultUrl": "https://www.notion.so/19486dd60c0c80da9cb7eb1468ea9afd",
          "cachedResultName": "n8n DeepResearch"
        },
        "filterType": "manual"
      },
      "credentials": {
        "notionApi": {
          "id": "iHBHe7ypzz4mZExM",
          "name": "Notion account"
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "100625bb-bf9a-4993-b387-1c61e486ba6d",
      "name": "Set In-Progress",
      "type": "n8n-nodes-base.notion",
      "position": [
        -840,
        180
      ],
      "parameters": {
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "options": {},
        "resource": "databasePage",
        "operation": "update",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|status",
              "statusValue": "In progress"
            }
          ]
        }
      },
      "credentials": {
        "notionApi": {
          "id": "iHBHe7ypzz4mZExM",
          "name": "Notion account"
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "864332ea-dd25-4347-a49d-68ed6495c1a9",
      "name": "Set Done",
      "type": "n8n-nodes-base.notion",
      "position": [
        1680,
        1600
      ],
      "parameters": {
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('Get Existing Row1').first().json.id }}"
        },
        "options": {},
        "resource": "databasePage",
        "operation": "update",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|status",
              "statusValue": "Done"
            },
            {
              "key": "Last Updated|date",
              "date": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "credentials": {
        "notionApi": {
          "id": "iHBHe7ypzz4mZExM",
          "name": "Notion account"
        }
      },
      "executeOnce": true,
      "typeVersion": 2.2
    },
    {
      "id": "6771568a-e6bd-4c89-a535-089fd1c18fc3",
      "name": "Tags to Items",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -60,
        1600
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "tag"
      },
      "typeVersion": 1
    },
    {
      "id": "47fce580-7b5b-4bc6-ba52-a8e7af6595b5",
      "name": "Convert to HTML",
      "type": "n8n-nodes-base.markdown",
      "position": [
        -380,
        1600
      ],
      "parameters": {
        "mode": "markdownToHtml",
        "options": {
          "tables": true
        },
        "markdown": "={{ $json.text }}"
      },
      "typeVersion": 1
    },
    {
      "id": "e2fb5a31-9ca5-487b-a7f8-f020759ec53a",
      "name": "HTML to Array",
      "type": "n8n-nodes-base.set",
      "position": [
        -220,
        1600
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "851b8a3f-c2d3-41ad-bf60-4e0e667f6c58",
              "name": "tag",
              "type": "array",
              "value": "={{ $json.data.match(/<table[\\s\\S]*?<\\/table>|<ul[\\s\\S]*?<\\/ul>|<[^>]+>[^<]*<\\/[^>]+>/g) }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "5275f9dd-5420-4c59-a330-5f2775b47e51",
      "name": "Notion Block Generator",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        100,
        1600
      ],
      "parameters": {
        "text": "={{ $json.tag.trim() }}",
        "messages": {
          "messageValues": [
            {
              "message": "=Convert the following html into its equivalent Notion Block as per Notion's API schema.\n* Ensure the content is always included and remains the same.\n* Return only a json response.\n* Generate child-level blocks. Should not define \"parent\" or \"children\" property.\n* Strongly prefer headings, paragraphs, tables and lists type blocks.\n* available headings are heading_1, heading_2 and heading_3 - h4,h5,h6 should use heading_3 type instead. ensure headings use the rich text definition.\n* ensure lists blocks include all list items.\n\n## Examples\n\n1. headings\n```\n<h3 id=\"references\">References</h3>\n```\nwould convert to \n```\n{\"object\":  \"block\", \"type\": \"heading_3\", \"heading_3\": { \"rich_text\": [{\"type\": \"text\",\"text\": {\"content\": \"References\"}}]}}\n```\n\n2. lists\n```\n<ul><li>hello</li><li>world</li></ul>\n```\nwould convert to\n```\n[\n{\n  \"object\": \"block\",\n  \"type\": \"bulleted_list_item\",\n  \"bulleted_list_item\": {\"rich_text\": [{\"type\": \"text\",\"text\": {\"content\": \"hello\"}}]}\n},\n{\n  \"object\": \"block\",\n  \"type\": \"bulleted_list_item\",\n  \"bulleted_list_item\": {\"rich_text\": [{\"type\": \"text\",\"text\": {\"content\": \"world\"}}]}\n}\n]\n```\n\n3. tables\n```\n<table>\n  <thead>\n    <tr><th>Technology</th><th>Potential Impact</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5G Connectivity</td><td>Enables faster data speeds and advanced apps</td>\n    </tr>\n  </tbody>\n</table>\n```\nwould convert to\n```\n{\n  \"object\": \"block\",\n  \"type\": \"table\",\n  \"table\": {\n    \"table_width\": 2,\n    \"has_column_header\": true,\n    \"has_row_header\": false,\n    \"children\": [\n      {\n        \"object\": \"block\",\n        \"type\": \"table_row\",\n        \"table_row\": {\n          \"cells\": [\n            [\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"Technology\",\n                  \"link\": null\n                }\n              },\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"Potential Impact\",\n                  \"link\": null\n                }\n              }\n            ],\n            [\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"5G Connectivity\",\n                  \"link\": null\n                }\n              },\n              {\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": \"Enables faster data speeds and advanced apps\",\n                  \"link\": null\n                }\n              }\n            ]\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n4. anchor links\nSince Notion doesn't support anchor links, just convert them to rich text blocks instead.\n```\n<a href=\"#module-0-pre-course-setup-and-learning-principles\">Module 0: Pre-Course Setup and Learning Principles</a>\n```\nconverts to\n```\n{\n  \"object\": \"block\",\n  \"type\": \"paragraph\",\n  \"paragraph\": {\n    \"rich_text\": [\n      {\n        \"type\": \"text\",\n        \"text\": {\n          \"content\": \"Module 0: Pre-Course Setup and Learning Principles\"\n        }\n      }\n    ]\n  }\n}\n```\n5. Invalid html parts\nWhen the html is not syntax valid eg. orphaned closing tags, then just skip the conversion and use an empty rich text block.\n```\n</li>\\n</ol>\n```\ncan be substituted with\n```\n{\n  \"object\": \"block\",\n  \"type\": \"paragraph\",\n  \"paragraph\": {\n    \"rich_text\": [\n      {\n        \"type\": \"text\",\n        \"text\": {\n          \"content\": \" \"\n        }\n      }\n    ]\n  }\n}\n```"
            }
          ]
        },
        "promptType": "define"
      },
      "typeVersion": 1.5
    },
    {
      "id": "30e73ecf-5994-4229-b7f6-01e043e0e65b",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        80,
        1760
      ],
      "parameters": {
        "options": {},
        "modelName": "models/gemini-2.0-flash"
      },
      "credentials": {
        "googlePalmApi": {
          "id": "dSxo6ns5wn658r8N",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "85ce9f7e-0369-41bd-8c31-c4217f400472",
      "name": "Parse JSON blocks",
      "type": "n8n-nodes-base.set",
      "onError": "continueRegularOutput",
      "position": [
        420,
        1600
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "73fcb8a0-2672-4bd5-86de-8075e1e02baf",
              "name": "=block",
              "type": "array",
              "value": "={{\n(function(){\n  const block = $json.text\n    .replace('```json', '')\n    .replace('```', '')\n    .trim()\n    .parseJson();\n  if (Array.isArray(block)) return block;\n  if (block.type.startsWith('heading_')) {\n    const prev = Number(block.type.split('_')[1]);\n    const next = Math.max(1, prev - 1);\n    if (next !== prev) {\n      block.type = `heading_${next}`;\n      block[`heading_${next}`] = Object.assign({}, block[`heading_${prev}`]);\n      block[`heading_${prev}`] = undefined;\n    }\n  }\n  return [block];\n})()\n}}"
            }
          ]
        }
      },
      "executeOnce": false,
      "typeVersion": 3.4
    },
    {
      "id": "349f4323-d65f-4845-accc-6f51340a84c4",
      "name": "Upload to Notion Page",
      "type": "n8n-nodes-base.httpRequest",
      "onError": "continueRegularOutput",
      "maxTries": 2,
      "position": [
        1680,
        1760
      ],
      "parameters": {
        "url": "=https://api.notion.com/v1/blocks/{{ $('Get Existing Row1').first().json.id }}/children",
        "method": "PATCH",
        "options": {
          "timeout": "={{ 1000 * 60 }}"
        },
        "jsonBody": "={{\n{\n  \"children\": $json.block\n}\n}}",
        "sendBody": true,
        "sendHeaders": true,
        "specifyBody": "json",
        "authentication": "predefinedCredentialType",
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "nodeCredentialType": "notionApi"
      },
      "credentials": {
        "notionApi": {
          "id": "iHBHe7ypzz4mZExM",
          "name": "Notion account"
        }
      },
      "retryOnFail": true,
      "typeVersion": 4.2,
      "waitBetweenTries": 3000
    },
    {
      "id": "44c732a9-b805-432e-8e9c-ba279e4cca46",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -520,
        620
      ],
      "parameters": {
        "color": 7,
        "width": 1340,
        "height": 740,
        "content": "## 8. 웹 검색 및 웹 페이지 내용 추출 사용 [APIFY.com](https://www.apify.com?fpr=414q6)\n\n[HTTP Request 노드에 대해 자세히 읽기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)\n\n여기서 나는 참조 구현에서 약간 벗어났습니다. Firecrawl.ai를 사용하지 않기로 결정했습니다. 이유는 (1) 서비스 비용이 높기 때문이고, (2) 일반적인 비-AI 크롤러가 충분히 작동하며 아마도 더 빠를 것입니다. 대신, 더 성능이 좋고 비용 효과적이며 신뢰할 수 있는 웹 스크레이퍼 서비스인 [APIFY.com](https://www.apify.com?fpr=414q6)을 사용하고 있습니다. Apify를 사용하고 싶지 않다면, 원하는 서비스로 교체하세요.\n\n이 단계는 개선과 최적화 측면에서 가장 흥미로운데, 예를 들어 내부 데이터 소스를 혼합하세요! Perplexity.ai나 Jina.ai를 추가하세요! 가능성은 무한합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "daf2e775-72d3-4366-882b-8c9eb65f11e8",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1140,
        60
      ],
      "parameters": {
        "color": 7,
        "width": 460,
        "height": 360,
        "content": "## 5. 보고서를 진행 중으로 설정  \n[Notion 노드에 대해 더 읽기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.notion/)"
      },
      "typeVersion": 1
    },
    {
      "id": "2d1b394d-8b9a-43fc-a646-c4e05c92da5b",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        780
      ],
      "parameters": {
        "color": 7,
        "width": 800,
        "height": 580,
        "content": "## 9. 추론 모델로 학습 내용 컴파일하기\n\n[기본 LLM 노드에 대해 자세히 읽기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\n우리가 수집한 소스와 함께, 이제 이를 우리의 LLM에게 주어 그로부터 \"학습 내용\" 목록을 컴파일하는 것입니다. 우리의 DeepResearcher의 경우, 쓰여지는 시점에서 가장 최신의 추론 모델인 OpenAI의 o3-mini를 사용할 것입니다. 추론 모델은 체인-of-thought 또는 \"생각\" 과정을 수행하기 때문에 일반 채팅 모델보다 더 나아요.\n\n그런 다음 \"학습 내용\"은 생성된 연구 목표와 결합되어 하나의 루프를 완료합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "e2c29aa2-ff79-4bdd-b3c7-cf5e5866db8a",
      "name": "Get Existing Row1",
      "type": "n8n-nodes-base.notion",
      "position": [
        -1020,
        1600
      ],
      "parameters": {
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "key": "Request ID|rich_text",
              "condition": "equals",
              "richTextValue": "={{ $json.requestId.toString() }}"
            }
          ]
        },
        "options": {},
        "resource": "databasePage",
        "matchType": "allFilters",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "mode": "list",
          "value": "19486dd6-0c0c-80da-9cb7-eb1468ea9afd",
          "cachedResultUrl": "https://www.notion.so/19486dd60c0c80da9cb7eb1468ea9afd",
          "cachedResultName": "n8n DeepResearch"
        },
        "filterType": "manual"
      },
      "credentials": {
        "notionApi": {
          "id": "iHBHe7ypzz4mZExM",
          "name": "Notion account"
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "9dff368e-c282-4fef-8894-e218ea266695",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1140,
        1400
      ],
      "parameters": {
        "color": 7,
        "width": 660,
        "height": 540,
        "content": "## 10. 학습을 사용하여 DeepSearch 보고서 생성\n\n[Basic LLM 노드에 대해 자세히 읽기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\n마침내! 모든 학습이 수집된 후 - 높은 설정에서 1시간 이상 걸릴 수 있음! - 이를 우리 LLM에게 제공하여 마크다운 형식의 최종 연구 보고서를 생성합니다. 기술적으로, DeepResearch는 여기서 끝나지만, 이 템플릿의 경우 출력물을 Notion으로 전송해야 합니다. Notion을 사용하지 않는 경우, 마지막 몇 단계를 무시하세요."
      },
      "typeVersion": 1
    },
    {
      "id": "14bfd0fd-6bc4-4dbf-86b2-44ef1c3586f7",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -460,
        1400
      ],
      "parameters": {
        "color": 7,
        "width": 1060,
        "height": 540,
        "content": "## 11. 보고서를 Notion 블록으로 재형식화  \n[Markdown 노드에 대해 자세히 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.markdown/)  \n\n우리의 보고서를 Notion 페이지에 작성하기 위해, 이를 Notion \"블록\"으로 변환해야 합니다 - 이는 Notion API에서 요구하는 특수한 JSON 객체입니다. 이 변환을 AI를 사용하지 않고 할 수 있는 방법이 여러 가지 있지만, 재미로 그래도 그렇게 하기로 했습니다. 이 단계에서, 먼저 HTML로 변환합니다. 왜냐하면 그것이 보고서를 의미적으로 분할할 수 있게 하고, LLM의 더 쉬운 파싱을 가능하게 하기 때문입니다."
      },
      "typeVersion": 1
    },
    {
      "id": "a2aff56d-78b9-40a4-ac78-bd8380802ea0",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        1400
      ],
      "parameters": {
        "color": 7,
        "width": 800,
        "height": 580,
        "content": "## 13. Notion에서 보고서 업데이트\n\n[HTTP 요청 노드에 대해 자세히 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)\n\n이 단계에서, Notion API를 사용하여 페이지에 블록을 순차적으로 추가할 수 있습니다. Notion API가 불안정하기 때문에 루프가 사용되며, 루프는 필요한 블록에 대해 재시도를 허용합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "b5beeccd-e498-48ed-b6f2-b29d4599e2c9",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1840,
        -680
      ],
      "parameters": {
        "color": 7,
        "width": 680,
        "height": 560,
        "content": "## 1. 연구를 해보자!\n\n[폼 트리거 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger)\n\nn8n forms는 프론트엔드를 빠르게 실행되게 하는 정말 좋은 방법입니다. 채팅에 비해 사용자 입력을 위한 우수한 사용자 인터페이스를 제공합니다. 커스텀 HTML 필드에 약간 과도하게 했을 수 있지만, 가끔 커스터마이징을 추가하는 것을 즐깁니다."
      },
      "typeVersion": 1
    },
    {
      "id": "533ede84-1138-426c-93df-c2b862e2d063",
      "name": "DeepResearch Report",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -860,
        1600
      ],
      "parameters": {
        "text": "=You are are an expert and insightful researcher.\n* Given the following prompt from the user, write a final report on the topic using the learnings from research.\n* Make it as as detailed as possible, aim for 3 or more pages, include ALL the learnings from research.\n* Format the report in markdown. Use headings, lists and tables only and where appropriate.\n\n<prompt>{{ $('JobType Router').first().json.data.query }}</prompt>\n\nHere are all the learnings from previous research:\n\n<learnings>\n{{\n$('JobType Router').first().json.data\n  .all_learnings\n  .map(item => `<learning>${item}</learning>`)  \n  .join('\\n')\n}}\n</learnings>",
        "promptType": "define"
      },
      "typeVersion": 1.5
    },
    {
      "id": "efe47725-7fd5-45e7-97c4-d6c133745e5f",
      "name": "DeepResearch Learnings",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1120,
        1020
      ],
      "parameters": {
        "text": "=Given the following contents from a SERP search for the query <query>{{ $('Item Ref').first().json.query }}</query>, generate a list of learnings from the contents. Return a maximum of 3 learnings, but feel free to return less if the contents are clear. Make sure each learning is unique and not similar to each other. The learnings should be concise and to the point, as detailed and infromation dense as possible. Make sure to include any entities like people, places, companies, products, things, etc in the learnings, as well as any exact metrics, numbers, or dates. The learnings will be used to research the topic further.\n\n<contents>\n{{\n$input\n  .all()\n  .map(item =>`<content>\\n${item.json.markdown.substr(0, 25_000)}\\n</content>`)\n  .join('\\n')\n}}\n</contents>",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=You are an expert researcher. Today is {{ $now.toLocaleString() }}. Follow these instructions when responding:\n  - You may be asked to research subjects that is after your knowledge cutoff, assume the user is right when presented with news.\n  - The user is a highly experienced analyst, no need to simplify it, be as detailed as possible and make sure your response is correct.\n  - Be highly organized.\n  - Suggest solutions that I didn't think about.\n  - Be proactive and anticipate my needs.\n  - Treat me as an expert in all subject matter.\n  - Mistakes erode my trust, so be accurate and thorough.\n  - Provide detailed explanations, I'm comfortable with lots of detail.\n  - Value good arguments over authorities, the source is irrelevant.\n  - Consider new technologies and contrarian ideas, not just the conventional wisdom.\n  - You may use high levels of speculation or prediction, just flag it for me."
            }
          ]
        },
        "promptType": "define",
        "hasOutputParser": true
      },
      "executeOnce": true,
      "typeVersion": 1.5
    },
    {
      "id": "d3b42d13-e8ca-4085-ace9-1d9fb53f5e71",
      "name": "Generate Report",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        480,
        180
      ],
      "parameters": {
        "options": {
          "waitForSubWorkflow": false
        },
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {
            "data": "={{\n{\n  ...Object.assign({}, $json),\n  query: $('JobType Router').first().json.data.query\n}\n}}",
            "jobType": "deepresearch_report",
            "requestId": "={{ $('JobType Router').first().json.requestId }}"
          },
          "schema": [
            {
              "id": "requestId",
              "display": true,
              "required": false,
              "displayName": "requestId",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "jobType",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "jobType",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "data",
              "type": "object",
              "display": true,
              "required": false,
              "displayName": "data",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "2b0314ff-cd82-4b3b-a4a9-5fd8067391eb",
      "name": "Generate Learnings",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        -380,
        180
      ],
      "parameters": {
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        },
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {
            "data": "={{ $json }}",
            "jobType": "deepresearch_learnings",
            "requestId": "={{ $('JobType Router').first().json.requestId }}"
          },
          "schema": [
            {
              "id": "requestId",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "requestId",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "jobType",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "jobType",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "data",
              "type": "object",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "data",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "f4457d0b-d708-4bca-9973-46d96ed55826",
      "name": "Confirmation",
      "type": "n8n-nodes-base.form",
      "position": [
        780,
        -420
      ],
      "webhookId": "2eb17c47-c887-4e95-8641-1b3796452ab9",
      "parameters": {
        "options": {
          "formTitle": "DeepResearcher",
          "buttonLabel": "Done",
          "formDescription": "=<img\n  src=\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/o4wqztloz3j6okfxpeyw\"\n  width=\"100%\"\n  style=\"border:1px solid #ccc\"\n/>\n<p style=\"text-align:left\">\n<strong style=\"display:block;font-family:sans-serif;font-weight:700;font-size:16px;margin-top:12px;margin-bottom:0;\">Your Report Is On Its Way!</strong>\n<br/>\nDeepResearcher will now work independently to conduct the research and the compiled report will be uploaded to the following Notion page below when finished.\n<br/><br/>\nPlease click the \"Done\" button to complete the form.\n</p>\n<hr style=\"display:block;margin-top:16px;margin-bottom:0\" />"
        },
        "formFields": {
          "values": [
            {
              "html": "=<a href=\"{{ $json.url }}\" style=\"text-decoration:none\" target=\"_blank\">\n<div style=\"display:flex;text-align:left;font-family:sans-serif;\">\n  <div style=\"width:150px;height:150px;padding:12px;\">\n    <img src=\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/cajjymprexcoesu4gg9g\" width=\"100%\" />\n  </div>\n  <div style=\"width:100%;padding:12px;\">\n    <div style=\"font-size:14px;font-weight:700\">{{ $json.name }}</div>\n    <div style=\"font-size:12px;color:#666\">\n      {{ $json.property_description }}\n    </div>\n  </div>\n</div>\n</a>",
              "fieldType": "html"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "af8fe17a-4314-4e92-ad8e-8be0be62984b",
      "name": "Research Request",
      "type": "n8n-nodes-base.form",
      "position": [
        -1560,
        -460
      ],
      "webhookId": "46142c14-3692-40f6-80e5-f3d976e95191",
      "parameters": {
        "options": {
          "formTitle": "DeepResearcher",
          "formDescription": "=<img\n  src=\"https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/o4wqztloz3j6okfxpeyw\"\n  width=\"100%\"\n  style=\"border:1px solid #ccc\"\n/>"
        },
        "formFields": {
          "values": [
            {
              "fieldType": "textarea",
              "fieldLabel": "What would you like to research?",
              "requiredField": true
            },
            {
              "html": "<video\n    style=\"display:none\"\n    src=\"/when_will_n8n_support_range_sliders.mp4\"\n    onerror='\n  this.insertAdjacentHTML(`afterend`,\n  `<div class=\"form-group\" style=\"margin-bottom:16px;\">\n    <label class=\"form-label\" for=\"breadth\">\n      Enter research depth (Default 1)\n    </label>\n    <p style=\"font-size:12px;color:#666;text-align:left\">\n      This value determines how many sub-queries to generate.\n    </p>\n    <input\n      class=\"form-input\"\n      type=\"range\"\n      id=\"depth\"\n      name=\"field-1\"\n      value=\"1\"\n      step=\"1\"\n      max=\"5\"\n      min=\"1\"\n      list=\"depth-markers\"\n    >\n    <datalist\n      id=\"depth-markers\"\n      style=\"display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      writing-mode: horizontal-tb;\n      margin-top: -10px;\n      text-align: center;\n      font-size: 10px;\n      margin-left: 16px;\n      margin-right: 16px;\"\n    >\n      <option value=\"1\" label=\"1\"></option>\n      <option value=\"2\" label=\"2\"></option>\n      <option value=\"3\" label=\"3\"></option>\n      <option value=\"4\" label=\"4\"></option>\n      <option value=\"5\" label=\"5\"></option>\n    </datalist>\n  </div>`)\n  '\n/>",
              "fieldType": "html",
              "elementName": "input-depth"
            },
            {
              "html": "<video\n    style=\"display:none\"\n    src=\"/when_will_n8n_support_range_sliders.mp4\"\n    onerror='\n  this.insertAdjacentHTML(`afterend`,\n  `<div class=\"form-group\" style=\"margin-bottom:16px;\">\n    <label class=\"form-label\" for=\"breadth\">\n      Enter research breadth (Default 2)\n    </label>\n    <p style=\"font-size:12px;color:#666;text-align:left\">\n      This value determines how many sources to explore.\n    </p>\n    <input\n      class=\"form-input\"\n      type=\"range\"\n      id=\"breadth\"\n      name=\"field-2\"\n      value=\"2\"\n      step=\"1\"\n      max=\"5\"\n      min=\"1\"\n      list=\"breadth-markers\"\n    >\n    <datalist\n      id=\"breadth-markers\"\n      style=\"display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      writing-mode: horizontal-tb;\n      margin-top: -10px;\n      text-align: center;\n      font-size: 10px;\n      margin-left: 16px;\n      margin-right: 16px;\"\n    >\n      <option value=\"1\" label=\"1\"></option>\n      <option value=\"2\" label=\"2\"></option>\n      <option value=\"3\" label=\"3\"></option>\n      <option value=\"4\" label=\"4\"></option>\n      <option value=\"5\" label=\"5\"></option>\n    </datalist>\n  </div>`)\n  '\n/>\n",
              "fieldType": "html",
              "elementName": "input-breadth"
            },
            {
              "fieldType": "dropdown",
              "fieldLabel": "={{ \"\" }}",
              "multiselect": true,
              "fieldOptions": {
                "values": [
                  {
                    "option": "=I understand higher depth and breath values I've selected may incur longer wait times and higher costs. I acknowledging this and wish to proceed with the research request."
                  }
                ]
              },
              "requiredField": true
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "c67a5e5c-f82b-4e8a-9c99-065d16dfa576",
      "name": "Valid Blocks",
      "type": "n8n-nodes-base.filter",
      "position": [
        740,
        1600
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "f68cefe0-e109-4d41-9aa3-043f3bc6c449",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "b89cf700-d955-4de4-bbac-b5c55995a1ee",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        620,
        1400
      ],
      "parameters": {
        "color": 7,
        "width": 580,
        "height": 580,
        "content": "## 12. URL 소스 목록 추가\n\n[코드 노드에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)\n\n우리의 소스 URL에 대해, 우리는 수동으로 Notion 블록을 구성할 것입니다 - 이는 보통 그 수가 많기 때문입니다! 그런 다음 다른 블록의 끝에 추가할 것입니다."
      },
      "typeVersion": 1
    },
    {
      "id": "70c898a1-a757-452d-83ef-de1998fe13ae",
      "name": "Append Blocks",
      "type": "n8n-nodes-base.merge",
      "position": [
        1000,
        1760
      ],
      "parameters": {},
      "typeVersion": 3
    },
    {
      "id": "591a3fcd-1748-43f7-9766-bc2059c195a0",
      "name": "URL Sources to Lists",
      "type": "n8n-nodes-base.code",
      "position": [
        740,
        1760
      ],
      "parameters": {
        "jsCode": "const urls = Object.values($('JobType Router').first().json.data.all_urls\n  .reduce((acc, url) => ({ ...acc, [url]: url }),{}));\nconst chunksize = 50;\nconst splits = Math.max(1, Math.floor(urls.length/chunksize));\n\nconst blocks = Array(splits).fill(0)\n  .map((_, idx) => {\n    const block = urls\n      .slice(\n        idx * chunksize, \n        (idx * chunksize) + chunksize - 1\n      )\n      .map(url => {\n        return {\n          object: \"block\",\n          type: \"bulleted_list_item\",\n          bulleted_list_item: {\n            rich_text: [\n              { type: \"text\", text: { content: url } }\n            ]\n          }\n        }\n      });\n    return { json: { block } }\n  });\n\nreturn [\n  { json: {\n    block:[{\n      \"object\": \"block\",\n      \"type\": \"heading_2\",\n      \"heading_2\": {\n        \"rich_text\": [\n          {\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": \"Sources\"\n            }\n          }\n        ]\n      }\n    }]\n  } },\n  ...blocks\n];"
      },
      "typeVersion": 2
    },
    {
      "id": "e59dbeea-ccf3-4619-9fe1-24874a91bdab",
      "name": "Empty Response",
      "type": "n8n-nodes-base.set",
      "position": [
        640,
        1160
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "1de40158-338b-4db3-9e22-6fd63b21f825",
              "name": "ResearchGoal",
              "type": "string",
              "value": "={{ $('Item Ref').first().json.researchGoal }}"
            },
            {
              "id": "9f59a2d4-5e5a-4d0b-8adf-2832ce746f0f",
              "name": "learnings",
              "type": "array",
              "value": "={{ [] }}"
            },
            {
              "id": "972ab5f5-0537-4755-afcb-d1db4f09ad60",
              "name": "followUpQuestions",
              "type": "array",
              "value": "={{ [] }}"
            },
            {
              "id": "90cef471-76b0-465d-91a4-a0e256335cd3",
              "name": "urls",
              "type": "array",
              "value": "={{ [] }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "34035b2e-eee9-483e-8125-3b6f1f41cd1d",
      "name": "Has Content?",
      "type": "n8n-nodes-base.if",
      "position": [
        480,
        1020
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "1ef1039a-4792-47f9-860b-d2ffcffd7129",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "5e9f80e2-db58-4f89-8aec-a1b8e73e18eb",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1820,
        -240
      ],
      "parameters": {
        "color": 5,
        "width": 300,
        "height": 100,
        "content": "양식을 사용하지 않으세요? 자유롭게 채팅이나 웹훅으로 바꾸어 보세요. 기존 작업 흐름에 맞추기 위해."
      },
      "typeVersion": 1
    },
    {
      "id": "3e513463-2f4c-4e3e-921d-e5c8ea5ec078",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1880,
        540
      ],
      "parameters": {
        "color": 5,
        "width": 460,
        "height": 240,
        "content": "### 🚏 서브워크플로 이벤트 패턴  \nn8n을 처음 사용하는 경우, 이 고급 기술에 대해 설명이 필요할 수 있지만, 요약하자면, 서브워크플로를 사용하여 DeepResearcher 워크플로의 다양한 부분을 별도의 실행으로 처리합니다.  \n\n* 이 워크플로를 활성화하는 데 필요한 재귀 루프 메커니즘을 구현하는 데 필수적입니다.  \n* 이 워크플로를 여러 템플릿으로 나누는 필요성을 없앱니다.  \n* 일반적으로 고성능 n8n 워크플로를 구축하는 데 유용합니다 (미래 게시물의 주제!)."
      },
      "typeVersion": 1
    },
    {
      "id": "fea2568e-86c9-4663-b141-a9b2a36b84f5",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        720,
        -60
      ],
      "parameters": {
        "color": 5,
        "width": 340,
        "height": 200,
        "content": "### 재귀 루핑\n이 워크플로에 구현된 재귀 루핑은 고급 아이템 링킹 기술입니다. 이는 노드가 \"한 번 실행\" 대 \"각 아이템에 대해 실행\"되는 것을 구체적으로 제어하여 작동합니다. 이 때문에 노드 제거에 주의하세요! 항상 교체하는 노드의 설정을 확인하고 설정이 일치하는지 확인하세요."
      },
      "typeVersion": 1
    },
    {
      "id": "fd3fec73-4b1a-4882-8c5a-d4825d9038ad",
      "name": "Combine & Send back to Loop",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        -220,
        860
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData"
      },
      "typeVersion": 1
    },
    {
      "id": "7c183897-e2ce-46da-90bd-0a39122b85f2",
      "name": "For Each Block...",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1440,
        1600
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "bc04462a-780c-48e9-bc38-8eaf8ac1175c",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2420,
        -920
      ],
      "parameters": {
        "width": 520,
        "height": 1060,
        "content": "## n8n DeepResearcher\n### 이 템플릿은 OpenAI의 DeepResearch 기능을 복제하려고 시도합니다. 작성 시점에 이 기능은 프로 구독자들만 사용할 수 있습니다.\n\nDeepResearch의 내부 작동 방식은 공개되지 않았지만, 웹을 깊이 검색하고 웹 콘텐츠를 스크래핑하며 보고서를 생성하기 위해 추론 모델을 사용하는 것으로 추정됩니다. n8n은 이러한 작업에 매우 적합합니다!\n\n### 작동 원리\n* 사용자의 연구 쿼리와 연구자가 얼마나 깊이 조사할지를 먼저 폼으로 수집합니다.\n* 제출되면, 최종 보고서를 담을 빈 Notion 페이지가 생성되고 연구자가 작업을 시작합니다.\n* 사용자의 쿼리는 웹 검색과 웹 스크래핑을 반복적으로 수행하여 연구 주제에 대한 데이터를 수집하고 부분 학습을 생성합니다.\n* 작업이 완료되면, 모든 학습을 결합하여 최종 보고서를 생성하기 위해 추론 LLM에 제공합니다.\n* 보고서는 이전에 생성된 Notion 페이지에 작성됩니다.\n\n### 사용 방법\n* 이 템플릿과 함께 사용하기 위해 이 Notion 데이터베이스를 복제하세요: https://jimleuk.notion.site/19486dd60c0c80da9cb7eb1468ea9afd?v=19486dd60c0c805c8e0c000ce8c87acf\n* 웹 검색 및 스크래핑 서비스를 위해 [APIFY.com](https://www.apify.com?fpr=414q6) API 키에 가입하세요.\n* OpenAI의 o3-mini 모델에 접근할 수 있도록 하세요. 대안으로 o1 시리즈로 교체할 수 있습니다.\n* 이 워크플로를 게시하고 폼 URL이 공용으로 접근 가능하도록 하세요.\n\n### 깊이 및 넓이 구성에 대해\n더 자세한 보고서를 원하면 깊이와 넓이를 증가시키세요. 하지만 워크플로가 지수적으로 더 많은 시간과 비용이 들 수 있으니 주의하세요. 기본값은 보통 충분합니다.\n\n깊이=1 & 넓이=2 - 약 5-10분 소요됩니다.\n깊이=1 & 넓이=3 - 약 15-20분 소요됩니다.\n깊이=3 & 넓이=5 - 약 2+시간 소요됩니다!\n\n### 도움이 필요하신가요?\n[Discord](https://discord.com/invite/XPKeKXeB7d) 에 가입하거나 [Forum](https://community.n8n.io/) 에 문의하세요!\n\n즐거운 해킹!"
      },
      "typeVersion": 1
    },
    {
      "id": "654362c8-bc85-47d1-b277-50630f6f3999",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2420,
        -1180
      ],
      "parameters": {
        "color": 7,
        "width": 520,
        "height": 240,
        "content": "이미지 태그가 포함된 텍스트를 번역합니다:  \n\"![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/o4wqztloz3j6okfxpeyw#full-width)\"  \n\n번역된 텍스트:  \n\"![] (https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/o4wqztloz3j6okfxpeyw#전체-너비)\"  \n\nURL과 같은 기술적 요소는 일반적으로 번역되지 않으며, 그대로 유지됩니다. \"#full-width\" 부분은 \"전체-너비\"로 번역될 수 있습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "c2ddbec3-4579-4d4e-81bf-293c9eee9b73",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        1000
      ],
      "parameters": {
        "width": 180,
        "height": 260,
        "content": "APIFY 자격 증명을 여기 업데이트하세요!"
      },
      "typeVersion": 1
    },
    {
      "id": "43461d7d-1a04-424a-b2b0-4a4cbc46f1c2",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1640,
        1740
      ],
      "parameters": {
        "width": 180,
        "height": 260,
        "content": "Notion 자격 증명을 여기에서 업데이트하세요!"
      },
      "typeVersion": 1
    },
    {
      "id": "48b83b0f-94e7-44e2-8bd4-0addddd62264",
      "name": "Valid Results",
      "type": "n8n-nodes-base.filter",
      "position": [
        300,
        1020
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "f44691e4-f753-47b0-b66a-068a723b6beb",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.crawl.requestStatus }}",
              "rightValue": "handled"
            },
            {
              "id": "8e05df2b-0d4a-47da-9aab-da7e8907cbca",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.markdown }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2.2,
      "alwaysOutputData": true
    },
    {
      "id": "6124becb-2584-472d-8354-b714d9f1e858",
      "name": "RAG Web Browser",
      "type": "n8n-nodes-base.httpRequest",
      "onError": "continueRegularOutput",
      "position": [
        -40,
        1020
      ],
      "parameters": {
        "url": "https://api.apify.com/v2/acts/apify~rag-web-browser/run-sync-get-dataset-items",
        "method": "POST",
        "options": {},
        "sendBody": true,
        "sendQuery": true,
        "authentication": "genericCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{\n`${$json.query} -filetype:pdf (-site:tiktok.com OR -site:instagram.com OR -site:youtube.com OR -site:linkedin.com OR -site:reddit.com)`\n}}"
            }
          ]
        },
        "genericAuthType": "httpHeaderAuth",
        "queryParameters": {
          "parameters": [
            {
              "name": "memory",
              "value": "4096"
            },
            {
              "name": "timeout",
              "value": "180"
            }
          ]
        }
      },
      "credentials": {
        "httpQueryAuth": {
          "id": "cO2w8RDNOZg8DRa8",
          "name": "Apify API"
        },
        "httpHeaderAuth": {
          "id": "SV9BDKc1cRbZBeoL",
          "name": "Apify.com (personal token)"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "749a5d4d-85ae-4ee3-a79b-6659af666a3a",
      "name": "Get Markdown + URL",
      "type": "n8n-nodes-base.set",
      "position": [
        940,
        1020
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "c41592db-f9f0-4228-b6d8-0514c9a21fca",
              "name": "markdown",
              "type": "string",
              "value": "={{ $json.markdown }}"
            },
            {
              "id": "5579a411-94dc-4b10-a276-24adf775be1d",
              "name": "url",
              "type": "string",
              "value": "={{ $json.searchResult.url }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "4a5ad2e4-b274-4a2f-bc0f-15d067ad469c",
      "name": "Is Apify Auth Error?",
      "type": "n8n-nodes-base.if",
      "position": [
        140,
        1020
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "8722e13a-d788-4145-8bea-5bc0ce0a83f8",
              "operator": {
                "type": "number",
                "operation": "equals"
              },
              "leftValue": "={{ $json.error.status }}",
              "rightValue": 401
            }
          ]
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "54118cbc-6466-448d-8832-91ad62a931e2",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "position": [
        300,
        860
      ],
      "parameters": {
        "errorMessage": "=Apify Auth Error! Check your API token is valid and make sure you put \"Bearer <api_key>\" if using HeaderAuth."
      },
      "typeVersion": 1
    },
    {
      "id": "aae46fd1-70bc-4629-8a47-6ae75ce8afb1",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -460,
        1960
      ],
      "parameters": {
        "color": 5,
        "width": 560,
        "height": 300,
        "content": "### n8n을 자가 호스팅하시나요? Notion에 업로드하기 위해 이들 중 하나를 사용하세요!\n\n이 템플릿은 LLM을 사용하여 마크다운을 Notion으로 변환합니다. 이는 가장 효율적이지 않지만, 다른 소프트웨어를 설치할 필요가 없기 때문에 \"더 쉽습니다\". 대화를 가속화하고 오류를 줄이기 위해, 스스로 설치할 수 있다면 이 흐름을 대체할 다음 옵션을 고려하세요.\n\n* [Notion ⇄ Markdown Conversion Community Node](https://community.n8n.io/t/now-available-notion-markdown-conversion-community-node/59087)\n* [tryfabric/martian: Markdown to Notion: Convert Markdown and GitHub Flavoured Markdown to Notion API Blocks and RichText 🔀📝](https://github.com/tryfabric/martian)\n* [brittonhayes/notionmd: 🪄 Convert Markdown into Notion Blocks](https://github.com/brittonhayes/notionmd)\n\n**노트**: Recommendation onl, 자체 조사를 필요로 하며, 자신의 책임으로 사용하세요!"
      },
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Item Ref": {
      "main": [
        [
          {
            "node": "RAG Web Browser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Row": {
      "main": [
        [
          {
            "node": "Initiate DeepResearch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirmation": {
      "main": [
        [
          {
            "node": "End Form",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Content?": {
      "main": [
        [
          {
            "node": "Get Markdown + URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Empty Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid Blocks": {
      "main": [
        [
          {
            "node": "Append Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Blocks": {
      "main": [
        [
          {
            "node": "For Each Block...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML to Array": {
      "main": [
        [
          {
            "node": "Tags to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SERP to Items": {
      "main": [
        [
          {
            "node": "For Each Query...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Clarifying Questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tags to Items": {
      "main": [
        [
          {
            "node": "Notion Block Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid Results": {
      "main": [
        [
          {
            "node": "Has Content?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Response": {
      "main": [
        [
          {
            "node": "For Each Query...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execution Data": {
      "main": [
        [
          {
            "node": "JobType Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JobType Router": {
      "main": [
        [
          {
            "node": "Get Existing Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate SERP Queries",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Existing Row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to HTML": {
      "main": [
        [
          {
            "node": "HTML to Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG Web Browser": {
      "main": [
        [
          {
            "node": "Is Apify Auth Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set In-Progress": {
      "main": [
        [
          {
            "node": "Set Initial Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Row": {
      "main": [
        [
          {
            "node": "Set In-Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Request": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Results to Items": {
      "main": [
        [
          {
            "node": "Set Next Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Next Queries": {
      "main": [
        [
          {
            "node": "Generate Learnings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback to Items": {
      "main": [
        [
          {
            "node": "For Each Question...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Block...": {
      "main": [
        [
          {
            "node": "Set Done",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Upload to Notion Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Query...": {
      "main": [
        [
          {
            "node": "Combine & Send back to Loop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Item Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Row1": {
      "main": [
        [
          {
            "node": "DeepResearch Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Initial Query": {
      "main": [
        [
          {
            "node": "Report Page Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Depth Reached?": {
      "main": [
        [
          {
            "node": "Get Research Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DeepResearch Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "DeepResearch Learnings",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON blocks": {
      "main": [
        [
          {
            "node": "Valid Blocks",
            "type": "main",
            "index": 0
          },
          {
            "node": "URL Sources to Lists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Initial Query": {
      "main": [
        [
          {
            "node": "Generate Learnings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Accumulate Results": {
      "main": [
        [
          {
            "node": "Is Depth Reached?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Learnings": {
      "main": [
        [
          {
            "node": "Accumulate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Markdown + URL": {
      "main": [
        [
          {
            "node": "DeepResearch Learnings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Research Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "DeepResearch Report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Clarifying Questions",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Generate SERP Queries",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Report Page Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepResearch Report": {
      "main": [
        [
          {
            "node": "Convert to HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clarifying Questions": {
      "main": [
        [
          {
            "node": "Feedback to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepResearch Results": {
      "main": [
        [
          {
            "node": "Results to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Question...": {
      "main": [
        [
          {
            "node": "Get Initial Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ask Clarity Questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Research Results": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Apify Auth Error?": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Valid Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "URL Sources to Lists": {
      "main": [
        [
          {
            "node": "Append Blocks",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Ask Clarity Questions": {
      "main": [
        [
          {
            "node": "For Each Question...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SERP Queries": {
      "main": [
        [
          {
            "node": "SERP to Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate DeepResearch": {
      "main": [
        [
          {
            "node": "Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Report Page Generator": {
      "main": [
        [
          {
            "node": "Create Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Notion Page": {
      "main": [
        [
          {
            "node": "For Each Block...",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "DeepResearch Learnings": {
      "main": [
        [
          {
            "node": "Research Goal + Learnings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Block Generator": {
      "main": [
        [
          {
            "node": "Parse JSON blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepResearch Subworkflow": {
      "main": [
        [
          {
            "node": "Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Notion Block Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "DeepResearch Learnings",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Research Goal + Learnings": {
      "main": [
        [
          {
            "node": "For Each Query...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Clarifying Questions",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Generate SERP Queries",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Report Page Generator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  }
}