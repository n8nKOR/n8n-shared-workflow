{
  "meta": {
    "instanceId": "257476b1ef58bf3cb6a46e65fac7ee34a53a5e1a8492d5c6e4da5f87c9b82833",
    "templateId": "2326"
  },
  "nodes": [
    {
      "id": "806e7f80-b936-49c3-9759-6f91fab5781e",
      "name": "For Each User ID...",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1640,
        1438
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "users"
      },
      "typeVersion": 1
    },
    {
      "id": "8a932c63-18d2-438d-a09c-256c3432a01f",
      "name": "Get User",
      "type": "n8n-nodes-base.slack",
      "position": [
        1900,
        1278
      ],
      "parameters": {
        "user": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.users }}"
        },
        "resource": "user"
      },
      "typeVersion": 2.2
    },
    {
      "id": "fefe8889-a564-4d70-a909-a3e836ca6286",
      "name": "Search for Invite Requests",
      "type": "n8n-nodes-base.slack",
      "position": [
        340,
        840
      ],
      "parameters": {
        "limit": 3,
        "query": "in:#n8n-events has::calendar:",
        "options": {},
        "operation": "search"
      },
      "typeVersion": 2.2
    },
    {
      "id": "bbe29b66-2b02-409a-a7c9-c6afd08f62f8",
      "name": "Get Existing Invite EventID",
      "type": "n8n-nodes-base.code",
      "position": [
        815,
        883
      ],
      "parameters": {
        "jsCode": "const channel =  $('Search for Invite Requests').item.json.channel;\n\nreturn $input\n  .all()\n  .filter(item => !item.json.thread_ts || item.json.ts === item.json.thread_ts)\n  .map(invite => {\n    const replies = $input\n      .all()\n      .filter(reply => reply.json.thread_ts === invite.json.thread_ts);\n    const replyWithEventTag = replies\n      .find(reply => reply.json.bot_id && reply.json.text.match(/#event([a-z0-9]+)/i));\n    const eventId = replyWithEventTag\n      ? replyWithEventTag.json.text.match(/#event([a-z0-9]+)/i)[1]\n      : null;\n    return {\n      eventId,\n      invite,\n      channel,\n    }\n  });\n\nreturn output;"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "82053e1b-0ed2-4967-9654-9d1488c0ab3c",
      "name": "Should Create Event?",
      "type": "n8n-nodes-base.if",
      "position": [
        995,
        883
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "5c45447a-ab61-42c8-92c9-4c5d6970def7",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.eventId }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2,
      "alwaysOutputData": false
    },
    {
      "id": "d051c89a-d337-4db4-b9dd-208a6b9488f6",
      "name": "Create Event",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        1940,
        600
      ],
      "parameters": {
        "end": "={{ $json.output.output.event_end_date ? $json.output.output.event_end_date + ' ' + $json.output.output.event_end_time : (new Date($json.output.output.event_start_date + ' ' + $json.output.output.event_start_time)).plus(3, 'hour').format('yyyy-MM-dd HH:mm:ss') }}",
        "start": "={{ $json.output.output.event_start_date }} {{ $json.output.output.event_start_time }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
          "cachedResultName": "n8n-events"
        },
        "additionalFields": {
          "summary": "={{ $json.output.output.event_title }}",
          "location": "={{ $json.output.output.location_address }}",
          "description": "=## {{ $json.output.output.event_title }}\n\n{{ $('Should Create Event?').item.json.invite.json.text }}\n\nTime:\n{{ $json[\"output\"][\"output\"][\"event_start_date\"] + ' ' + $json[\"output\"][\"output\"][\"event_start_time\"] }}{{ $json[\"output\"][\"output\"][\"event_end_date\"] ? ' to ' : '' }}{{ $json[\"output\"][\"output\"][\"event_end_date\"] ? \n $json[\"output\"][\"output\"][\"event_end_date\"] + ' ' + $json[\"output\"][\"output\"][\"event_end_time\"] : '' }}\n\nLocation:\n{{ $json[\"output\"][\"output\"][\"location_address\"] }}\n{{ $json[\"output\"][\"output\"][\"location_url\"] }}",
          "guestsCanModify": true,
          "guestsCanInviteOthers": true,
          "guestsCanSeeOtherGuests": true
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "9b4ab665-edd2-4a4c-b84f-4c1c466c7957",
      "name": "Get Invite Reactions",
      "type": "n8n-nodes-base.slack",
      "position": [
        1640,
        1258
      ],
      "parameters": {
        "resource": "reaction",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('Should Create Event?').item.json.channel.id }}"
        },
        "operation": "get",
        "timestamp": "={{ $('Should Create Event?').item.json.invite.json.ts }}"
      },
      "typeVersion": 2.2
    },
    {
      "id": "783e0e31-43c1-40aa-89de-f886ff7511d9",
      "name": "Get Invite Replies",
      "type": "n8n-nodes-base.slack",
      "position": [
        635,
        883
      ],
      "parameters": {
        "ts": "={{ $json.ts }}",
        "filters": {},
        "resource": "channel",
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": "C074W8X9UJV",
          "cachedResultName": "n8n-events"
        },
        "operation": "replies"
      },
      "typeVersion": 2.2,
      "alwaysOutputData": true
    },
    {
      "id": "963c872e-858d-47bc-b648-d98079dd722a",
      "name": "Extract Invite Reactions",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1320,
        1438
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "message.reactions"
      },
      "typeVersion": 1
    },
    {
      "id": "f4132852-cfc3-4662-8976-cfc262a9ad78",
      "name": "Get Old EventId",
      "type": "n8n-nodes-base.set",
      "position": [
        1320,
        1258
      ],
      "parameters": {
        "mode": "raw",
        "options": {},
        "jsonOutput": "={\n  \"eventId\": \"{{ $json.eventId }}\",\n}"
      },
      "typeVersion": 3.3,
      "alwaysOutputData": true
    },
    {
      "id": "a83ea855-a2fa-4f9f-9b1e-298a97b78591",
      "name": "Add Attendee to Event",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        2380,
        1278
      ],
      "parameters": {
        "eventId": "={{ $('Get Old EventId').item.json.eventId }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
          "cachedResultName": "n8n-events"
        },
        "operation": "update",
        "updateFields": {
          "attendees": [
            "={{ $json.email }}"
          ]
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "80b74ca6-5d98-4db9-8555-56e5967266e8",
      "name": "Get Event Details",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        1480,
        1258
      ],
      "parameters": {
        "eventId": "={{ $json.eventId }}",
        "options": {},
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
          "cachedResultName": "n8n-events"
        },
        "operation": "get"
      },
      "typeVersion": 1.1
    },
    {
      "id": "a059fe82-4d12-48ce-a378-d1e9b7625000",
      "name": "Is Attending",
      "type": "n8n-nodes-base.filter",
      "position": [
        1480,
        1438
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "858b779e-732e-4b89-9007-93f9aafbb50b",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.name }}",
              "rightValue": "white_check_mark"
            }
          ]
        }
      },
      "typeVersion": 2
    },
    {
      "id": "14716446-8014-46d9-a9db-851d35ebfb33",
      "name": "Get User Email",
      "type": "n8n-nodes-base.set",
      "position": [
        2220,
        1278
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "16978160-49ce-42d4-a4ed-677bb2bdfe8d",
              "name": "email",
              "type": "string",
              "value": "={{ $json.profile.email }}"
            }
          ]
        }
      },
      "typeVersion": 3.3
    },
    {
      "id": "8540e7f5-fce1-40cb-89a7-5be4c9f7cd63",
      "name": "Should Add Attendee?",
      "type": "n8n-nodes-base.if",
      "position": [
        2060,
        1278
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "cb9590b0-2c0d-40e3-b379-cac9666d9ffe",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              },
              "leftValue": "={{ Boolean($('Get Event Details').item.json.attendees.find(x => x.email === $json.profile.email)) }}",
              "rightValue": "false"
            }
          ]
        }
      },
      "typeVersion": 2
    },
    {
      "id": "6958ed3a-5d59-40b8-969a-e90988ca68cb",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        1620,
        680
      ],
      "parameters": {
        "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"event_title\": { \"type\": \"string\" },\n    \"event_start_date\": { \"type\": \"string\" },\n    \"event_start_time\": { \"type\": \"string\" },\n    \"event_end_date\": { \"type\": \"string\" },\n    \"event_end_time\": { \"type\": \"string\" },\n    \"location_address\": { \"type\": \"string\" },\n    \"location_url\": { \"type\": \"string\" },\n    \"event_type\": { \"type\": \"string\" }\n  }\n}"
      },
      "typeVersion": 1.1
    },
    {
      "id": "f4518e1e-595f-4492-8439-9de9e8701665",
      "name": "SerpAPI",
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "position": [
        1440,
        740
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 1
    },
    {
      "id": "821c4388-317d-4f40-ac1a-ea7f2d0da711",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1340,
        680
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 1
    },
    {
      "id": "2b0aa447-164f-4f7c-95b1-ae44c699fc89",
      "name": "Wikipedia",
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "position": [
        1520,
        740
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "66b28991-1417-4b4a-a604-68bea258c141",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        140,
        840
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "6cfe47dc-d630-42da-a755-325b5f466488",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        65.15658774955875,
        620
      ],
      "parameters": {
        "color": 7,
        "width": 468.0872755624215,
        "height": 401.633728593893,
        "content": "## 1. Slack 채널에서 메시지 가져오기\n\n[슬랙 사용에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack/)\n\nSlack Node를 사용하면, 캘린더 이모지가 표시된 모든 최상위 메시지를 필터링하여 캘린더 이벤트 생성 요청을 나타낼 수 있습니다. 작업 영역에 필요한 모든 권한으로 슬랙 앱을 구성하세요."
      },
      "typeVersion": 1
    },
    {
      "id": "89b74ffd-6581-43c6-821d-50f34004be6f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        560,
        643.4948198232535
      ],
      "parameters": {
        "color": 7,
        "width": 612.4609442091373,
        "height": 463.294565931203,
        "content": "## 2. 새 이벤트가 생성되어야 하는지 결정\n\n[Code 사용에 대해 자세히 읽기](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)\n\n더 복잡한 워크플로우의 경우, 워크플로우의 나머지 부분이 실행되기 전에 변수를 수집하고 준비해야 할 때가 있습니다. Code 노드는 코드에 익숙하다면 이를 달성할 수 있는 도구 중 하나이지만, 유일한 방법은 아닙니다.\n\n이 워크플로우는 이벤트가 생성되어야 하는지에 따라 분기됩니다. 이벤트가 이미 존재하는 경우, 기존 이벤트의 참석자를 업데이트합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "355b928a-3f1f-415b-8bcf-3a715ac770c3",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        264.3100105144731
      ],
      "parameters": {
        "color": 7,
        "width": 582.5773441997128,
        "height": 614.2457232899785,
        "content": "## 3. AI 에이전트를 사용하여 이벤트 생성 자동화  \n[AI 에이전트에 대해 자세히 읽기](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)  \n\nAI 에이전트는 일반적으로 다양한 \"도구\"에 접근할 수 있는 자치형 LLM으로 묘사되며, 이는 그들의 지식 및/또는 능력을 확장합니다. 이 데모에서, 우리는 AI에게 다음을 지시했습니다:  \n1. 좋은 이벤트 제목 생성.  \n2. 사용자 메시지에서 날짜와 시간을 파싱하고 가정.  \n3. 위치/장소의 주소와 웹사이트를 파싱하고, 메시지나 자체 지식에서 이 데이터를 얻을 수 없으면 \"도구\"를 사용."
      },
      "typeVersion": 1
    },
    {
      "id": "d9ab9ce6-c2ae-43f1-af69-b39403b8ef36",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1260,
        1040
      ],
      "parameters": {
        "color": 7,
        "width": 555.022465659362,
        "height": 579.2571386002115,
        "content": "## 5. 이모지 반응으로 참석자 추적\n\n[Slack 사용에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack)\n\n이벤트가 존재할 때, 대신 메시지에 ✅ 이모지로 반응한 다른 팀 멤버를 추가하기 시작할 수 있습니다. 이 워크플로의 이 부분에서, 반응한 사람들의 수를 실제 이벤트의 참석자 목록과 비교하는 약간의 로직이 있습니다. 이는 원하지 않는 알림을 피하기 위해 필요합니다. 이 알림은 꽤 성가실 수 있습니다!"
      },
      "typeVersion": 1
    },
    {
      "id": "8d60d40a-5eae-4a57-ab68-5572199ddfbb",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1860,
        1107
      ],
      "parameters": {
        "color": 7,
        "width": 665.8690262556933,
        "height": 354.87325537783204,
        "content": "## 6. 기존 캘린더 이벤트에 참석자 추가\n\n[Google Calendar 사용에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar)\n\nn8n 노드는 Google API에 대한 훌륭한 커버리지를 통해 Google Calendar 작업을 쉽게 만듭니다. 가장 일반적인 작업은 드롭다운 목록에서 찾을 수 있습니다 - 코드를 직접 배우는 필요가 없습니다!"
      },
      "typeVersion": 1
    },
    {
      "id": "2e58ced7-5849-4726-9050-57e60a3f8e93",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        600
      ],
      "parameters": {
        "width": 359.6648027457353,
        "height": 416.9747281125149,
        "content": "## 직접 해보세요!\n\n### 이 워크플로우는 다음을 수행합니다\n\n* 슬랙 채널에서 캘린더 (📅) 이모지로 태그된 이벤트 메시지를 모니터링합니다.\n* 캘린더 이벤트가 존재하는지 확인하고, 그렇지 않으면 ChatGPT를 사용하여 캘린더 이벤트를 생성합니다; AI가 이벤트 제목, 설명 및 위치 세부 정보를 추가합니다.\n* 캘린더 이벤트가 존재하면, 채널 사용자들이 체크마크 (✅) 이모지로 반응한 사용자를 확인합니다.\n* 이러한 사용자는 이벤트에 자동으로 참석자로 추가됩니다.\n\n### 도움이 필요하세요?\n\n[Discord](https://discord.com/invite/XPKeKXeB7d) 에 가입하거나 [Forum](https://community.n8n.io/) 에서 물어보세요!\n\n즐겁게 해킹하세요!"
      },
      "typeVersion": 1
    },
    {
      "id": "e64b575a-e422-4c98-86b7-dc69e15150c3",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1840,
        400
      ],
      "parameters": {
        "color": 7,
        "width": 492.07150832656214,
        "height": 414.62723127587867,
        "content": "## 4. 이벤트 생성 및 답장 메시지 보내기\n\n[Google Calendar 사용에 대해 더 알아보기](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar)\n\n이러한 세부 사항을 얻으면, 우리는 초대를 생성하고 원래 사용자 메시지에 이벤트가 성공적으로 생성되었음을 확인하는 답장을 보냅니다. 참고로, 우리는 이 답장을 중복을 피하기 위해 사용합니다!"
      },
      "typeVersion": 1
    },
    {
      "id": "3d3a6d11-a68f-4623-943d-55493d334290",
      "name": "Reply Invite with EventId",
      "type": "n8n-nodes-base.slack",
      "position": [
        2120,
        600
      ],
      "parameters": {
        "text": "=Event Created!\nAdd to Calendar: {{ $json.htmlLink }}\n#event{{ $json.id }}",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('Should Create Event?').item.json.channel.id }}"
        },
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Should Create Event?').item.json.invite.json.ts }}"
            }
          }
        }
      },
      "typeVersion": 2.2
    },
    {
      "id": "0b0e02e7-1375-4de9-9781-915d7e96ef20",
      "name": "Calendar Event Booking Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1380,
        540
      ],
      "parameters": {
        "text": "=Your role is to create professional event calendar events based on user message.\nGiven the following user message, do the following 5 tasks. Note, Assume all dates are within the current year which is {{ $now.format(\"yyyy\") }} unless stated otherwise.\n1. Summarize the message and generate a title for the event. Make sure it's eye-catching to attract more attendees!\n2. Determine and extract the start date and time for the event. Date must be in the format yyyy-MM-dd and time in the format of hh:mm:ss. If no start time is indicated, the start time is 9am. If you are unable to do so, just leave it blank.\n3. Determine and extract the end date and time for the event. Date must be in the format yyyy-MM-dd and time in the format of hh:mm:ss. If you are unable to do so, just leave it blank.\n4. Where the user message refers to a location or venue, use the SerpAPI tool to search for this location or venue on the web and retrieve the full address.\n5. Additionally, if the location or venue has a website or relevant webpage, return the URL of the location or venue.\n6. Try to identify the event type as one of \"social meeting\", \"social gathering\", \"business meeting\", \"business gathering\" or \"unknown\".\n\nuser message:\n```{{ $json.invite.json.text }}```",
        "agent": "openAiFunctionsAgent",
        "options": {},
        "promptType": "define",
        "hasOutputParser": true
      },
      "typeVersion": 1.5
    },
    {
      "id": "e4ce06a0-cc42-4732-aadd-519fe7307a4d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        160
      ],
      "parameters": {
        "color": 5,
        "width": 394.45954589267495,
        "height": 80,
        "content": "### 파트 1: 이벤트 생성\n\n이 브랜치가 새로운 이벤트가 있을 때 실행됩니다."
      },
      "typeVersion": 1
    },
    {
      "id": "463a2dbc-2d10-403a-a417-aec442e917dd",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1260,
        940
      ],
      "parameters": {
        "color": 5,
        "width": 394.45954589267495,
        "height": 80,
        "content": "### 부분 2: 이벤트에 참석자 추가\n\n이 분기가 이벤트가 이미 존재하는 경우에 실행됩니다."
      },
      "typeVersion": 1
    },
    {
      "id": "aa4d41ca-1332-40da-a2b9-331257b6a1f2",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        300,
        820
      ],
      "parameters": {
        "width": 179.82769272818715,
        "height": 362.21121634583966,
        "content": "🚨**필수**  \n* 여기에 모니터링할 채널을 설정하세요. 또한, 자격 증명에 사용자 액세스 토큰을 사용하세요."
      },
      "typeVersion": 1
    },
    {
      "id": "790293df-46bc-47ba-a60b-be611f46b670",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1900,
        580
      ],
      "parameters": {
        "width": 179.82769272818715,
        "height": 317.6738512911155,
        "content": "🚨**필수**\n* 여기에 사용할 Google 캘린더를 설정하세요."
      },
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "Calendar Event Booking Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get User": {
      "main": [
        [
          {
            "node": "Should Add Attendee?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia": {
      "ai_tool": [
        [
          {
            "node": "Calendar Event Booking Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "main": [
        [
          {
            "node": "Reply Invite with EventId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Attending": {
      "main": [
        [
          {
            "node": "For Each User ID...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Email": {
      "main": [
        [
          {
            "node": "Add Attendee to Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Old EventId": {
      "main": [
        [
          {
            "node": "Get Event Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Search for Invite Requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Event Details": {
      "main": [
        [
          {
            "node": "Get Invite Reactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar Event Booking Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Invite Replies": {
      "main": [
        [
          {
            "node": "Get Existing Invite EventID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each User ID...": {
      "main": [
        [
          {
            "node": "Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Invite Reactions": {
      "main": [
        [
          {
            "node": "Extract Invite Reactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Add Attendee?": {
      "main": [
        [
          {
            "node": "Get User Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Create Event?": {
      "main": [
        [
          {
            "node": "Calendar Event Booking Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Old EventId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Invite Reactions": {
      "main": [
        [
          {
            "node": "Is Attending",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Calendar Event Booking Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Search for Invite Requests": {
      "main": [
        [
          {
            "node": "Get Invite Replies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Invite EventID": {
      "main": [
        [
          {
            "node": "Should Create Event?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Event Booking Agent": {
      "main": [
        [
          {
            "node": "Create Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}