{
  "meta": {
    "instanceId": "6b6a2db47bdf8371d21090c511052883cc9a3f6af5d0d9d567c702d74a18820e"
  },
  "nodes": [
    {
      "id": "f4570aad-db25-4dcd-8589-b1c8335935de",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        200,
        2800
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "92aae60e-5fcd-4588-9a41-92e7c1b7f2ff",
      "name": "SERP results",
      "type": "n8n-nodes-base.set",
      "position": [
        1286,
        2800
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "b3e662aa-7ace-45ca-815a-0ad1d65ef7a0",
              "name": "organicResults",
              "type": "array",
              "value": "={{ $json.result.organicResults }}"
            },
            {
              "id": "ac655bf2-181f-4117-a7d6-aa4ec2738bd9",
              "name": "peopleAlsoAsk",
              "type": "array",
              "value": "={{ $json.result.peopleAlsoAsk }}"
            },
            {
              "id": "9e045f00-006e-4b8b-863d-cb25d682b69d",
              "name": "searchQuery",
              "type": "string",
              "value": "={{ $json.result.searchQuery.term }}"
            },
            {
              "id": "08c1f92b-deac-4951-863f-721e0714739b",
              "name": "paidAds",
              "type": "string",
              "value": "={{ $json.result.paidResults }}"
            }
          ]
        }
      },
      "notesInFlow": true,
      "typeVersion": 3.4
    },
    {
      "id": "e8a7a918-7afd-4c2b-8b79-1c5652362a53",
      "name": "Separate",
      "type": "n8n-nodes-base.splitOut",
      "notes": "Split SERP into rows",
      "position": [
        1457,
        2800
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "organicResults"
      },
      "notesInFlow": true,
      "typeVersion": 1
    },
    {
      "id": "e2683fec-1a04-47ff-82b9-11749921a34c",
      "name": "Title <> Empty",
      "type": "n8n-nodes-base.filter",
      "notes": "Title is not empty",
      "position": [
        1637,
        2800
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "6dd422fc-0b66-4d7e-9b40-ee4a6d713e83",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.title }}",
              "rightValue": ""
            }
          ]
        }
      },
      "notesInFlow": true,
      "typeVersion": 2
    },
    {
      "id": "e2a21776-86f4-4c99-973c-19e5ede4eab3",
      "name": "Assign SERP #pos",
      "type": "n8n-nodes-base.code",
      "notes": "Assign SERP position",
      "position": [
        2020,
        2800
      ],
      "parameters": {
        "jsCode": "const items = $input.all(); // Get all input items\n\n// Group items by searchQuery\nconst groupedItems = items.reduce((acc, item) => {\n  const searchQuery = item.json.searchQuery || 'default';\n  if (!acc[searchQuery]) {\n    acc[searchQuery] = [];\n  }\n  acc[searchQuery].push(item);\n  return acc;\n}, {});\n\n// Assign positions within each group\nconst result = Object.values(groupedItems).flatMap(group => \n  group.map((item, index) => ({\n    json: {\n      ...item.json,\n      position: index + 1, // Add the position based on the index within the group\n    },\n  }))\n);\n\nreturn result; // Return the modified items"
      },
      "notesInFlow": true,
      "typeVersion": 2
    },
    {
      "id": "34a38c07-6439-4177-a12a-a2f6295cd914",
      "name": "GET SERP",
      "type": "n8n-nodes-base.httpRequest",
      "notes": "SERP results - scrapingRobot\n\nhttps://dashboard.scrapingrobot.com/dashboard",
      "position": [
        1106,
        2800
      ],
      "parameters": {
        "url": "https://api.scrapingrobot.com",
        "method": "POST",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 20
            }
          }
        },
        "jsonBody": "={\n  \"url\": \"https://www.google.com\",\n  \"module\": \"GoogleScraper\",\n  \"params\": {\n    \"query\": \"{{ $json[\"Keyword\"] }}\"\n  }\n}  ",
        "sendBody": true,
        "sendHeaders": true,
        "specifyBody": "json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        }
      },
      "credentials": {
        "httpQueryAuth": {
          "id": "6DyKxvSsLAZLluDL",
          "name": "Query Auth - Scraping Robot"
        },
        "httpHeaderAuth": {
          "id": "QWp7emU1xKIVm5GD",
          "name": "Header Auth - Scraping Robot"
        }
      },
      "notesInFlow": false,
      "retryOnFail": false,
      "typeVersion": 4.2
    },
    {
      "id": "6bf86303-6aa1-4afd-834b-35bc84b1fd82",
      "name": "Sticky Note29",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        356,
        2760
      ],
      "parameters": {
        "color": 7,
        "width": 669.4820758928554,
        "height": 205.68165856370325,
        "content": "Airtable에서 데이터를 가져오고 이미 완료되었는지 확인하세요."
      },
      "typeVersion": 1
    },
    {
      "id": "0ff2885f-f372-40c5-94e4-f1d90a66b6b7",
      "name": "Sticky Note30",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1046,
        2760
      ],
      "parameters": {
        "color": 7,
        "width": 208.81803918109597,
        "height": 205.68165856370314,
        "content": "스크래핑 로봇 API에 POST"
      },
      "typeVersion": 1
    },
    {
      "id": "ee9e47b4-5137-4909-8c3d-3cb023517e03",
      "name": "Sticky Note22",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        360,
        2980
      ],
      "parameters": {
        "color": 3,
        "width": 284.87764467541297,
        "height": 119.14378614369562,
        "content": "필수  \n키워드 데이터베이스에 연결하세요. 열을 'Keyword'로 명명하거나 대안으로 `Set Keywords to get SERPs for` 배열에 키워드를 입력하세요."
      },
      "typeVersion": 1
    },
    {
      "id": "fee9236d-4c04-4d05-90a3-fbff8e15c4f8",
      "name": "Connect to your own database - ",
      "type": "n8n-nodes-base.noOp",
      "position": [
        420,
        2800
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "d506d14f-1871-4176-97a2-09da6062729b",
      "name": "Set Keywords to get SERPs for",
      "type": "n8n-nodes-base.set",
      "notes": "Array of keywords",
      "position": [
        660,
        2800
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "859ba768-9ae1-4d11-bab9-6b5f085adc59",
              "name": "Keyword",
              "type": "array",
              "value": "[\"constant contact email automation\", \"business worfklow software\", \"n8n automation\"]"
            }
          ]
        }
      },
      "notesInFlow": true,
      "typeVersion": 3.4
    },
    {
      "id": "d65f61f6-5c6b-4145-915b-af4cb56da1cb",
      "name": "Sticky Note24",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        2980
      ],
      "parameters": {
        "color": 3,
        "width": 284.87764467541297,
        "height": 150.1322172211123,
        "content": "필수  \nAuth 매개변수를 자신의 [Scraping Robot](https://billing.scrapingrobot.com/aff.php?aff=2) 토큰으로 업데이트하세요  \n\n쿼리 Auth 매개변수  \nname - 토큰  \nvalue - 자신의 API 키"
      },
      "typeVersion": 1
    },
    {
      "id": "bea785be-b146-4bd8-92f5-f7e14127d969",
      "name": "Sticky Note31",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1420,
        2760
      ],
      "parameters": {
        "color": 7,
        "width": 749.5454794091054,
        "height": 205.68165856370314,
        "content": "유기적 검색 쿼리를 분리하여 1부터 10까지의 순위를 부여합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "e7e3ce78-a8ec-45e2-9fb9-c4f615085985",
      "name": "Sticky Note27",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2200,
        2740
      ],
      "parameters": {
        "color": 7,
        "width": 231.51775697271012,
        "height": 223.71949738241096,
        "content": "자신의 데이터베이스에서 레코드를 업데이트"
      },
      "typeVersion": 1
    },
    {
      "id": "02ccb470-a6a6-49f3-9bda-7429c5dd3150",
      "name": "Connect to your own database2",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2263,
        2800
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "92922d26-3e68-47dd-94eb-b6be13161efe",
      "name": "Assign SearchQuery",
      "type": "n8n-nodes-base.set",
      "position": [
        1820,
        2800
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "e69839b4-9ab5-4792-b6c0-a4d0e1172fa8",
              "name": "searchQuery",
              "type": "string",
              "value": "={{ $('SERP results').item.json.searchQuery }}"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4
    },
    {
      "id": "53d835d0-d656-4255-abe2-b4bfb23f455e",
      "name": "Split out Keywords",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        860,
        2800
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "Keyword"
      },
      "typeVersion": 1
    },
    {
      "id": "5dc6f9b0-4f75-4e71-bd3d-86fa41d862b9",
      "name": "Sticky Note40",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2200,
        2980
      ],
      "parameters": {
        "color": 3,
        "width": 284.87764467541297,
        "height": 91.91340067739628,
        "content": "필수: 데이터를 자신의 데이터 소스로 출력하세요. 예: Airtable"
      },
      "typeVersion": 1
    },
    {
      "id": "6b2bf27e-de9b-41da-9f27-17a6541fd2f9",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -540,
        2400
      ],
      "parameters": {
        "color": 4,
        "width": 697.67602815855,
        "height": 735.4043641289052,
        "content": "## Google 검색 결과(SERPs) SEO 연구용 가져오기\n\n## 사용 사례\nSEO 분석을 위한 검색 엔진 순위 연구:\n- 웹사이트의 키워드 순위를 추적해야 함\n- 검색 결과에서 경쟁자 위치를 분석하고 싶음\n- SEO 경쟁 분석을 위한 데이터 필요\n- SERP 변화를 시간 경과에 따라 모니터링하고 싶음\n\n## 이 워크플로우가 하는 일\n워크플로우는 ScrapingRobot API를 사용하여 Google 검색 결과를 가져옴:\n- 대상 키워드에 대한 SERP 데이터를 검색\n- URL 순위 및 페이지 제목을 캡처\n- 무료 계정으로 최대 5000회 검색 처리\n- SEO 분석을 위한 결과를 정리\n\n## 설정\n1. [ScrapingRobot 계정](https://billing.scrapingrobot.com/aff.php?aff=2)을 만들고 API 키를 얻음\n2. ScrapingRobot API 키를 HTTP Request 노드의 `GET SERP` 토큰 매개변수에 추가\n3. 키워드 데이터베이스(열 이름 \"Keyword\")를 연결하거나 \"Set Keywords\" 노드를 사용\n4. 선호하는 출력 데이터베이스 연결 구성\n\n## 필요에 맞게 조정하는 방법\n- 키워드 소스를 다른 데이터베이스에서 가져오도록 수정\n- 캡처할 SERP 결과 수를 조정\n- 보고서 필요에 맞게 출력 형식을 사용자 정의\n\nSimon @ [automake.io](https://automake.io) 제작"
      },
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "GET SERP": {
      "main": [
        [
          {
            "node": "SERP results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separate": {
      "main": [
        [
          {
            "node": "Title <> Empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SERP results": {
      "main": [
        [
          {
            "node": "Separate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Title <> Empty": {
      "main": [
        [
          {
            "node": "Assign SearchQuery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign SERP #pos": {
      "main": [
        [
          {
            "node": "Connect to your own database2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign SearchQuery": {
      "main": [
        [
          {
            "node": "Assign SERP #pos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split out Keywords": {
      "main": [
        [
          {
            "node": "GET SERP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Keywords to get SERPs for": {
      "main": [
        [
          {
            "node": "Split out Keywords",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Connect to your own database - ": {
      "main": [
        [
          {
            "node": "Set Keywords to get SERPs for",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Connect to your own database - ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}