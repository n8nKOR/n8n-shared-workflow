{
  "meta": {
    "instanceId": "173bb893d2008dedab0ccfa3d7dba2c858a9076afa8f7dce6ebaa9c817262edf"
  },
  "nodes": [
    {
      "id": "c9e46f43-b159-42ca-945d-7aa8546e5fa2",
      "name": "Get playlist snapshot",
      "type": "n8n-nodes-base.spotify",
      "position": [
        380,
        1580
      ],
      "parameters": {
        "id": "={{ $json.spotify_playlist_id }}",
        "resource": "playlist",
        "operation": "get"
      },
      "typeVersion": 1
    },
    {
      "id": "73c2303e-24c2-4026-95f6-825e5d08baa4",
      "name": "Get playlist snapshot1",
      "type": "n8n-nodes-base.spotify",
      "position": [
        720,
        1580
      ],
      "parameters": {
        "id": "={{ $('variables').item.json.spotify_playlist_id }}",
        "resource": "playlist",
        "operation": "get"
      },
      "typeVersion": 1
    },
    {
      "id": "bb71003b-0945-4333-91d3-662290dfb42d",
      "name": "If different snapshot",
      "type": "n8n-nodes-base.if",
      "position": [
        900,
        1580
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "2606c811-7c92-4c61-b99e-be2aaced10dd",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $('Get playlist snapshot').item.json.snapshot_id }}",
              "rightValue": "={{ $json.snapshot_id }}"
            }
          ]
        }
      },
      "typeVersion": 2
    },
    {
      "id": "4894d2a7-dda9-430f-849a-d2368daa0aab",
      "name": "Get all musics",
      "type": "n8n-nodes-base.supabase",
      "position": [
        1220,
        1600
      ],
      "parameters": {
        "tableId": "={{ (() => { try { return $('variables').item.json.supabase_table_name } catch(e) {} try { return $('variables2').item.json.supabase_table_name } catch(e) {} return undefined; })() }}",
        "operation": "getAll",
        "returnAll": true
      },
      "typeVersion": 1
    },
    {
      "id": "e854147b-a5fa-400d-8440-bda25a0226b2",
      "name": "Update to_delete to true",
      "type": "n8n-nodes-base.supabase",
      "position": [
        1700,
        1620
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.id }}",
              "condition": "eq"
            }
          ]
        },
        "tableId": "={{ (() => { try { return $('variables').item.json.supabase_table_name } catch(e) {} try { return $('variables2').item.json.supabase_table_name } catch(e) {} return undefined; })() }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "to_delete",
              "fieldValue": "TRUE"
            }
          ]
        },
        "operation": "update"
      },
      "typeVersion": 1
    },
    {
      "id": "2425db39-487b-4b61-9b61-9ae00067bbca",
      "name": "Add music",
      "type": "n8n-nodes-base.supabase",
      "position": [
        1700,
        1400
      ],
      "parameters": {
        "tableId": "={{ (() => { try { return $('variables').item.json.supabase_table_name } catch(e) {} try { return $('variables2').item.json.supabase_table_name } catch(e) {} return undefined; })() }}\n",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.track.id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.track.name }}"
            },
            {
              "fieldId": "artist",
              "fieldValue": "={{ $json.track.artists[0].name }}"
            },
            {
              "fieldId": "duration",
              "fieldValue": "={{ $json.track.duration_ms }}"
            }
          ]
        }
      },
      "typeVersion": 1,
      "alwaysOutputData": false
    },
    {
      "id": "1c28ae15-9049-4ac7-9a7f-dcd094a60ace",
      "name": "Compare Datasets",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        1460,
        1540
      ],
      "parameters": {
        "options": {
          "skipFields": "title, artists, duration, youtube_video_id, added_at, added_by, is_local, primary_color, video_thumbnail,"
        },
        "mergeByFields": {
          "values": [
            {
              "field1": "track.id",
              "field2": "id"
            }
          ]
        }
      },
      "typeVersion": 2.3
    },
    {
      "id": "af89d454-1071-42c1-9455-d64e02ae14b7",
      "name": "Spotify",
      "type": "n8n-nodes-base.spotify",
      "position": [
        1220,
        1440
      ],
      "parameters": {
        "id": "={{ (() => { try { return $('variables').item.json.spotify_playlist_id } catch(e) {} try { return $('variables2').item.json.spotify_playlist_id } catch(e) {} return undefined; })() }}",
        "resource": "playlist",
        "operation": "getTracks",
        "returnAll": true
      },
      "typeVersion": 1
    },
    {
      "id": "b924ad92-b1f2-41d5-b662-1e64ad0cc6dc",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1220,
        1800
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "2665982e-68ac-4a83-988d-78d07a0d6c75",
      "name": "Get all musics not in youtube playlist",
      "type": "n8n-nodes-base.supabase",
      "position": [
        400,
        960
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "youtube_video_id",
              "keyValue": "null",
              "condition": "is"
            },
            {
              "keyName": "to_delete",
              "keyValue": "FALSE",
              "condition": "is"
            }
          ]
        },
        "tableId": "={{ $json.supabase_table_name }}",
        "matchType": "allFilters",
        "operation": "getAll",
        "returnAll": true
      },
      "typeVersion": 1
    },
    {
      "id": "6ea4ae11-9889-4ae2-904f-614ca4118b8a",
      "name": "Every day at noon",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        20,
        1220
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 12
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "8e4b14f4-a7ec-45dd-9b24-8c86889fd135",
      "name": "Every day at noon + 1mn",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        20,
        960
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 12,
              "triggerAtMinute": 1
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "16242250-5f3f-49f9-b6cb-7302bc11765a",
      "name": "Every hour",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        20,
        1580
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "6b6784ce-e236-40ca-b85c-1b0f0abdd7a5",
      "name": "Wait 1 hour",
      "type": "n8n-nodes-base.wait",
      "position": [
        560,
        1580
      ],
      "webhookId": "7d71bd21-a70a-47d5-bde5-299299fdb84e",
      "parameters": {
        "unit": "hours",
        "amount": 1
      },
      "typeVersion": 1.1
    },
    {
      "id": "746e7e33-00ba-4e92-a877-3619e14fa718",
      "name": "variables",
      "type": "n8n-nodes-base.set",
      "position": [
        200,
        1580
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "89615f0d-1f93-4416-bab4-1c69479e135e",
              "name": "spotify_playlist_id",
              "type": "string",
              "value": "4fjIxvQt8aQrQZs4XqvsmR"
            },
            {
              "id": "be22a9a9-58be-4275-aac5-c0d95ba91cfd",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "PLjmwnzu1gWRsnW6icKeUyvbaK9-Cs8oom"
            },
            {
              "id": "3536712c-8881-4089-98aa-e25516fea624",
              "name": "supabase_table_name",
              "type": "string",
              "value": "musics"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "0006e12a-fea6-408d-bcf5-6d0a726322b1",
      "name": "Search video",
      "type": "n8n-nodes-base.youTube",
      "position": [
        2500,
        1420
      ],
      "parameters": {
        "limit": 5,
        "filters": {
          "q": "={{ $json.title }} {{ '-' }} {{ $json.artist }}"
        },
        "options": {},
        "resource": "video"
      },
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "id": "24f5a360-fa93-4942-baea-baf134dd40a3",
      "name": "Get video duration",
      "type": "n8n-nodes-base.youTube",
      "position": [
        3020,
        1420
      ],
      "parameters": {
        "part": [
          "contentDetails",
          "snippet"
        ],
        "options": {},
        "videoId": "={{ $json.id.videoId }}",
        "resource": "video",
        "operation": "get"
      },
      "typeVersion": 1
    },
    {
      "id": "2027d659-01d6-4dd0-bfdc-c92f65b021bc",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        2840,
        1420
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "3e843f70-bc17-4749-86ba-11f5a0e98e7d",
      "name": "If video duration ~= music duration",
      "type": "n8n-nodes-base.if",
      "position": [
        3240,
        1420
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e8ed16f1-f0c6-4ef4-bf09-8ecb6fbf44cb",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ $json.contentDetails.duration.match(/(\\d+)(?=[MHS])/g).reduce((acc, time, i) => acc + time * [60000, 1000, 1][i], 0) }}",
              "rightValue": "={{ $('data1').first().json.duration - 5000}}"
            },
            {
              "id": "c4317b05-69bb-4244-ac8a-4cc51113a63b",
              "operator": {
                "type": "number",
                "operation": "lt"
              },
              "leftValue": "={{ $json.contentDetails.duration.match(/(\\d+)(?=[MHS])/g).reduce((acc, time, i) => acc + time * [60000, 1000, 1][i], 0) }}",
              "rightValue": "={{ $('data1').first().json.duration + 20000}}"
            }
          ]
        }
      },
      "typeVersion": 2
    },
    {
      "id": "a21e462c-72c9-4e77-99dc-1046acbaa998",
      "name": "Add music to playlist",
      "type": "n8n-nodes-base.youTube",
      "position": [
        3460,
        1400
      ],
      "parameters": {
        "options": {},
        "videoId": "={{ $('Get video duration').item.json.id }}",
        "resource": "playlistItem",
        "playlistId": "PLjmwnzu1gWRsnW6icKeUyvbaK9-Cs8oom"
      },
      "typeVersion": 1
    },
    {
      "id": "68fc1180-ce51-496a-909f-a652bb43febc",
      "name": "Add youtube id to row",
      "type": "n8n-nodes-base.supabase",
      "position": [
        3640,
        1400
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('data1').first().json.id }}",
              "condition": "eq"
            }
          ]
        },
        "tableId": "={{ $('data1').first().json.supabase_table_name }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "youtube_video_id",
              "fieldValue": "={{ $json.snippet.resourceId.videoId }}"
            }
          ]
        },
        "operation": "update"
      },
      "typeVersion": 1
    },
    {
      "id": "3611f50e-3000-46e9-b145-109251c3a12d",
      "name": "Discord",
      "type": "n8n-nodes-base.discord",
      "position": [
        4040,
        1400
      ],
      "parameters": {
        "content": "=Added : {{ $json.title }} (https://www.youtube.com/watch?v={{ $json.youtube_video_id }})",
        "options": {},
        "authentication": "webhook"
      },
      "typeVersion": 2
    },
    {
      "id": "bd6438b2-8628-4bb9-be34-03785458f194",
      "name": "Discord1",
      "type": "n8n-nodes-base.discord",
      "position": [
        4040,
        1020
      ],
      "parameters": {
        "content": "=No match for : {{ $('data1').first().json.title }}",
        "options": {},
        "authentication": "webhook"
      },
      "typeVersion": 2
    },
    {
      "id": "97ea9e76-96a5-48de-afe3-f81dbe7e431b",
      "name": "Set youtube id to NOTFOUND if no matching",
      "type": "n8n-nodes-base.supabase",
      "position": [
        3320,
        1020
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('data1').first().json.id }}",
              "condition": "eq"
            }
          ]
        },
        "tableId": "={{ $('data1').first().json.supabase_table_name }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "youtube_video_id",
              "fieldValue": "NOTFOUND"
            }
          ]
        },
        "matchType": "allFilters",
        "operation": "update"
      },
      "typeVersion": 1
    },
    {
      "id": "acb1e31e-5f17-4092-b357-b0b255a4d15f",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        3060,
        1220
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData"
      },
      "typeVersion": 1
    },
    {
      "id": "2db8c163-bf26-445f-9339-9e387cf22286",
      "name": "If no result",
      "type": "n8n-nodes-base.if",
      "position": [
        2660,
        1420
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "49a188bb-3cc8-4a8d-babf-f591c2e72094",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json }}",
              "rightValue": ""
            }
          ]
        }
      },
      "typeVersion": 2
    },
    {
      "id": "5eea12d7-c313-4176-b85a-54f631e3a98f",
      "name": "data",
      "type": "n8n-nodes-base.set",
      "position": [
        1900,
        1340
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "3622fecd-9a77-4cd4-ab02-6997cd83362d",
              "name": "title",
              "type": "string",
              "value": "={{ $json.title }}"
            },
            {
              "id": "76232c1e-f4de-41c4-837f-d20bd2bcfca2",
              "name": "artist",
              "type": "string",
              "value": "={{ $json.artist }}"
            },
            {
              "id": "01c3e160-f1ce-42e9-9010-a8ac806bb029",
              "name": "duration",
              "type": "number",
              "value": "={{ $json.duration }}"
            },
            {
              "id": "65f29ba5-28b4-4b50-8d38-540236229312",
              "name": "id",
              "type": "string",
              "value": "={{ $json.id }}"
            },
            {
              "id": "d6b26130-454c-4625-bdf2-688498d61321",
              "name": "supabase_table_name",
              "type": "string",
              "value": "={{ (() => { try { return $('variables').item.json.supabase_table_name } catch(e) {} try { return $('variables1').item.json.supabase_table_name } catch(e) {} try { return $('variables2').item.json.supabase_table_name } catch(e) {} return undefined; })() }}\n"
            },
            {
              "id": "9d82b3d1-b9f9-4dc1-9e7f-ec2a3c97bfe1",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "={{ (() => { try { return $('variables').item.json.youtube_playlist_id } catch(e) {} try { return $('variables1').item.json.youtube_playlist_id } catch(e) {} try { return $('variables2').item.json.youtube_playlist_id } catch(e) {} return undefined; })() }}\n"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "73055f49-c804-4b54-a16f-c795f1295069",
      "name": "variables2",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        1220
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "89615f0d-1f93-4416-bab4-1c69479e135e",
              "name": "spotify_playlist_id",
              "type": "string",
              "value": "4fjIxvQt8aQrQZs4XqvsmR"
            },
            {
              "id": "be22a9a9-58be-4275-aac5-c0d95ba91cfd",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "PLjmwnzu1gWRsnW6icKeUyvbaK9-Cs8oom"
            },
            {
              "id": "3536712c-8881-4089-98aa-e25516fea624",
              "name": "supabase_table_name",
              "type": "string",
              "value": "musics"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "4f7da7fb-5b18-4b44-9aad-d24c2e1409cc",
      "name": "variables1",
      "type": "n8n-nodes-base.set",
      "position": [
        200,
        960
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "89615f0d-1f93-4416-bab4-1c69479e135e",
              "name": "spotify_playlist_id",
              "type": "string",
              "value": "4fjIxvQt8aQrQZs4XqvsmR"
            },
            {
              "id": "be22a9a9-58be-4275-aac5-c0d95ba91cfd",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "PLjmwnzu1gWRsnW6icKeUyvbaK9-Cs8oom"
            },
            {
              "id": "3536712c-8881-4089-98aa-e25516fea624",
              "name": "supabase_table_name",
              "type": "string",
              "value": "musics"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "a814763e-d073-4984-986f-7c627bbe2269",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        2120,
        1400
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "5329c838-56bd-4d85-a789-7ded3a128d87",
      "name": "data1",
      "type": "n8n-nodes-base.set",
      "position": [
        2320,
        1420
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "3622fecd-9a77-4cd4-ab02-6997cd83362d",
              "name": "title",
              "type": "string",
              "value": "={{ $json.title }}"
            },
            {
              "id": "76232c1e-f4de-41c4-837f-d20bd2bcfca2",
              "name": "artist",
              "type": "string",
              "value": "={{ $json.artist }}"
            },
            {
              "id": "01c3e160-f1ce-42e9-9010-a8ac806bb029",
              "name": "duration",
              "type": "number",
              "value": "={{ $json.duration }}"
            },
            {
              "id": "65f29ba5-28b4-4b50-8d38-540236229312",
              "name": "id",
              "type": "string",
              "value": "={{ $json.id }}"
            },
            {
              "id": "d6b26130-454c-4625-bdf2-688498d61321",
              "name": "supabase_table_name",
              "type": "string",
              "value": "={{ $json.supabase_table_name }}"
            },
            {
              "id": "9d82b3d1-b9f9-4dc1-9e7f-ec2a3c97bfe1",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "={{ $json.youtube_playlist_id }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "01039cab-f822-4cfc-996f-0e88923f9c14",
      "name": "Get playlist items",
      "type": "n8n-nodes-base.youTube",
      "position": [
        540,
        2600
      ],
      "parameters": {
        "options": {},
        "resource": "playlistItem",
        "operation": "getAll",
        "returnAll": true,
        "playlistId": "={{ $json.youtube_playlist_id }}"
      },
      "typeVersion": 1
    },
    {
      "id": "c12fb59f-ad15-4456-b827-f749a22f2f0c",
      "name": "Playlist items to be deleted",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        840,
        2700
      ],
      "parameters": {
        "options": {
          "skipFields": "kind, etag, snippet, thumbnails, channelTitle, position, resourceId, contentDetails, status"
        },
        "mergeByFields": {
          "values": [
            {
              "field1": "snippet.resourceId.videoId",
              "field2": "youtube_video_id"
            }
          ]
        }
      },
      "typeVersion": 2.3
    },
    {
      "id": "57172162-a766-4c51-8249-e6e0632d1312",
      "name": "Get all musics that should be in playlist",
      "type": "n8n-nodes-base.supabase",
      "position": [
        540,
        2400
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "youtube_video_id",
              "keyValue": "={{ null }}",
              "condition": "neq"
            },
            {
              "keyName": "youtube_video_id",
              "keyValue": "NOTFOUND",
              "condition": "neq"
            }
          ]
        },
        "tableId": "={{ $json.supabase_table_name }}",
        "matchType": "allFilters",
        "operation": "getAll",
        "returnAll": true
      },
      "typeVersion": 1
    },
    {
      "id": "88f01cff-33a2-4184-af92-80cf7dd6d28b",
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        1080,
        2700
      ],
      "parameters": {
        "compare": "selectedFields",
        "options": {},
        "fieldsToCompare": "different.youtube_video_id.inputB"
      },
      "typeVersion": 1.1
    },
    {
      "id": "e25d78cd-d3a9-4b24-8663-84344b6f0b68",
      "name": "Remove video from playlist",
      "type": "n8n-nodes-base.youTube",
      "position": [
        1240,
        2700
      ],
      "parameters": {
        "options": {},
        "resource": "playlistItem",
        "operation": "delete",
        "playlistItemId": "={{ $json.different.id.inputA }}"
      },
      "typeVersion": 1
    },
    {
      "id": "1420795b-fac4-47ac-8449-96ae39541c22",
      "name": "Check for deleted videos",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        820,
        2480
      ],
      "parameters": {
        "options": {
          "skipFields": "kind, etag, snippet, thumbnails, channelTitle, position, resourceId, contentDetails, status"
        },
        "mergeByFields": {
          "values": [
            {
              "field1": "youtube_video_id",
              "field2": "contentDetails.videoId"
            }
          ]
        }
      },
      "typeVersion": 2.3
    },
    {
      "id": "fc2e2908-c491-4d45-87e4-a572a2f3e72a",
      "name": "Set youtube_video_id to null",
      "type": "n8n-nodes-base.supabase",
      "onError": "continueRegularOutput",
      "position": [
        1080,
        2440
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.id }}",
              "condition": "eq"
            },
            {
              "keyName": "youtube_video_id",
              "keyValue": "NOTFOUND",
              "condition": "neq"
            }
          ]
        },
        "tableId": "={{ $('variables3').item.json.supabase_table_name }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "youtube_video_id",
              "fieldValue": "={{ null }}"
            }
          ]
        },
        "matchType": "allFilters",
        "operation": "update"
      },
      "typeVersion": 1
    },
    {
      "id": "52523569-4347-477f-abe3-718b0177324a",
      "name": "Get all musics to be deleted",
      "type": "n8n-nodes-base.supabase",
      "position": [
        540,
        2820
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "to_delete",
              "keyValue": "TRUE",
              "condition": "is"
            },
            {
              "keyName": "youtube_video_id",
              "keyValue": "NOTFOUND",
              "condition": "neq"
            }
          ]
        },
        "tableId": "={{ $json.supabase_table_name }}",
        "matchType": "allFilters",
        "operation": "getAll",
        "returnAll": true
      },
      "typeVersion": 1
    },
    {
      "id": "c1306c1e-07aa-46f9-970c-3e9ecb01638a",
      "name": "Delete music",
      "type": "n8n-nodes-base.supabase",
      "position": [
        1400,
        2700
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "youtube_video_id",
              "keyValue": "={{ $('Get all musics to be deleted').item.json.youtube_video_id }}",
              "condition": "eq"
            },
            {
              "keyName": "to_delete",
              "keyValue": "true",
              "condition": "is"
            }
          ]
        },
        "tableId": "={{ $('variables3').item.json.supabase_table_name }}",
        "matchType": "allFilters",
        "operation": "delete"
      },
      "typeVersion": 1
    },
    {
      "id": "770083fa-6ac1-4dd9-929e-e30e933bbd95",
      "name": "Every day at midnight",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        40,
        2620
      ],
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "92e5e851-0c66-476e-bec8-a46fc96915ab",
      "name": "variables3",
      "type": "n8n-nodes-base.set",
      "position": [
        240,
        2620
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "89615f0d-1f93-4416-bab4-1c69479e135e",
              "name": "spotify_playlist_id",
              "type": "string",
              "value": "4fjIxvQt8aQrQZs4XqvsmR"
            },
            {
              "id": "be22a9a9-58be-4275-aac5-c0d95ba91cfd",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "PLjmwnzu1gWRsnW6icKeUyvbaK9-Cs8oom"
            },
            {
              "id": "3536712c-8881-4089-98aa-e25516fea624",
              "name": "supabase_table_name",
              "type": "string",
              "value": "musics"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "acde16fc-3fe3-453b-bffe-ead681e97046",
      "name": "Reset NOTFOUND id to NULL",
      "type": "n8n-nodes-base.supabase",
      "position": [
        420,
        3280
      ],
      "parameters": {
        "filters": {
          "conditions": [
            {
              "keyName": "youtube_video_id",
              "keyValue": "NOTFOUND",
              "condition": "eq"
            }
          ]
        },
        "tableId": "={{ $json.supabase_table_name }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "youtube_video_id",
              "fieldValue": "={{ null }}"
            }
          ]
        },
        "operation": "update"
      },
      "typeVersion": 1
    },
    {
      "id": "62053829-3253-4a7c-b70f-ba6075df034b",
      "name": "variables4",
      "type": "n8n-nodes-base.set",
      "position": [
        220,
        3280
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "89615f0d-1f93-4416-bab4-1c69479e135e",
              "name": "spotify_playlist_id",
              "type": "string",
              "value": "4fjIxvQt8aQrQZs4XqvsmR"
            },
            {
              "id": "be22a9a9-58be-4275-aac5-c0d95ba91cfd",
              "name": "youtube_playlist_id",
              "type": "string",
              "value": "PLjmwnzu1gWRsnW6icKeUyvbaK9-Cs8oom"
            },
            {
              "id": "3536712c-8881-4089-98aa-e25516fea624",
              "name": "supabase_table_name",
              "type": "string",
              "value": "musics"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "9a205a87-f32a-49c1-8282-469777c83c9c",
      "name": "Every month",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        40,
        3280
      ],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months"
            }
          ]
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "a40fa87c-71ae-4045-8285-91235f0cf1f0",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2040,
        780
      ],
      "parameters": {
        "color": 6,
        "width": 1780,
        "height": 980,
        "content": "# Spotify 트랙을 YouTube 비디오에 매칭  \n\n## 이 부분은 YouTube Data API v3를 사용하여 Spotify 트랙에 대한 최적의 YouTube 비디오를 찾습니다. 트랙 제목과 아티스트로 검색하여 상위 5개의 비디오를 가져오고, Spotify 트랙 길이의 ±10% 내에 있는 첫 번째 비디오를 선택합니다. 매칭된 비디오는 YouTube 플레이리스트에 추가되며, 그 ID는 데이터베이스에 저장됩니다.  \n\n## 동작:  \n- ## Spotify 데이터(제목 + 아티스트)를 검색에 사용합니다.  \n- ## 지속 시간 정확도(±10% 허용)를 보장합니다.  \n- ## 플레이리스트 업데이트와 데이터베이스 저장을 자동화합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "b850a168-7fa4-417c-980c-da8fcf558cfb",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -20,
        1440
      ],
      "parameters": {
        "color": 4,
        "width": 1100,
        "height": 420,
        "content": "snapshot_id를 가진 Spotify 플레이리스트의 수정 사항을 확인하세요  \n체크 간격을 변경하려면 트리거와 대기 노드를 변경하세요"
      },
      "typeVersion": 1
    },
    {
      "id": "fe2aaa9f-e4de-4000-b535-3e351a643d01",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1360,
        1120
      ],
      "parameters": {
        "color": 3,
        "width": 960,
        "height": 1340,
        "content": "# Spotify에서 YouTube 플레이리스트 동기화\n## Spotify 플레이리스트와 동기화된 YouTube 플레이리스트를 유지하는 워크플로우, 스마트 비디오 매칭 및 지속적인 동기화 기능 포함.\n\n## 주요 기능\n- **일방향 동기화**: Spotify 플레이리스트 → YouTube 플레이리스트 (추가 및 삭제)\n- **지속적인 모니터링**: 자동 동기화 (기본적으로 매 시간, 하지만 원하는 시간으로 설정 가능)\n- **스마트 비디오 매칭**: 비디오 길이와 콘텐츠 관련성을 고려\n- **자동 복구**: 삭제된 YouTube 비디오를 자동으로 처리\n- **데이터베이스 백업**: Supabase를 사용한 영구 저장\n\n## 전제 조건\n\n1. Supabase 프로젝트에 다음 테이블 구조:\n```sql\nCREATE TABLE IF NOT EXISTS musics (\n    id TEXT PRIMARY KEY,\n    title TEXT NOT NULL,\n    artist TEXT NOT NULL,\n    duration INT8 NOT NULL,\n    youtube_video_id TEXT,\n    to_delete BOOLEAN DEFAULT FALSE\n);\n```\n2. 비어 있는 YouTube 플레이리스트 (중복 처리가 되지 않으므로 추천)\n3. YouTube, Spotify 및 Supabase API에 대한 자격증명 구성\n4. 모든 \"variables\" 노드 (variables, variables1, variables2, variables3, variables4 등 동일)에서 변수를 올바르게 설정\n5. 워크플로우 활성화!\n\n## 워크플로우 구성 요소\n\n### 워크플로우 1: 주요 동기화 프로세스\n1. **변경 감지**\n   - Spotify 플레이리스트의 변화를 모니터링\n   - 데이터베이스 상태와 현재 플레이리스트를 비교\n\n2. **비디오 매칭**\n   - 제목, 아티스트 및 기간을 기반으로 YouTube에서 검색\n   - 상위 5개 결과를 평가하여 최적의 매칭 선택\n   - 매칭되지 않은 트랙을 \"NOTFOUND\"로 표시\n   - 성공적인 매칭과 실패를 사용자에게 알림\n\n### 워크플로우 2: YouTube 유지 관리\n- YouTube 플레이리스트에서 제거된 비디오를 모니터링\n- 제거된 비디오를 재검색을 위해 표시\n- 표시된 비디오 삭제 처리\n\n### 워크플로우 3: 복구 프로세스\n- 주기적으로 \"NOTFOUND\" 표시를 지우고 이전에 매칭되지 않은 트랙을 재검색\n\n## 구현 노트\n- 워크플로우를 더 나은 모니터링을 위해 별도의 파일로 분리할 수 있음\n- 복구 프로세스가 장기적인 플레이리스트 유지 보수를 보장"
      },
      "typeVersion": 1
    },
    {
      "id": "a86748bf-e52a-4d14-b940-d66a62de802e",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1100,
        700
      ],
      "parameters": {
        "color": 5,
        "width": 920,
        "height": 1260,
        "content": "# Spotify-데이터베이스 동기화\n\n## 동작:\n- ## Spotify 재생 목록 트랙을 데이터베이스 항목과 비교합니다\n- ## 누락된 트랙을 데이터베이스에 추가합니다\n- ## Spotify 재생 목록에서 제거된 경우 데이터베이스 항목을 삭제 대상으로 표시합니다"
      },
      "typeVersion": 1
    },
    {
      "id": "c58d3233-7059-4095-bae7-c0b451748c2f",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -20,
        620
      ],
      "parameters": {
        "width": 800,
        "height": 800,
        "content": "# 일일 강제 확인\n\n## 스포티파이 플레이리스트와 데이터베이스 상태 간의 일일 비교를 강제 실행하며, 플레이리스트 수정 확인을 우회합니다. 다음을 위한 필수 기능:\n- ## 대형 플레이리스트의 초기 설정 (YouTube API 제한 관리)\n- ## 플레이리스트가 변경되지 않았을 때 보류된 트랙 처리\n- ## 일치하지 않는 트랙에 대한 동기화 시도 계속"
      },
      "typeVersion": 1
    },
    {
      "id": "cfea38bb-d8b2-48aa-9718-e5d2d36f52c7",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3840,
        780
      ],
      "parameters": {
        "color": 2,
        "width": 460,
        "height": 980,
        "content": "## 선택적 알림 (원하는 채팅을 사용할 수 있습니다)"
      },
      "typeVersion": 1
    },
    {
      "id": "fb6fa7af-a434-463a-a2d7-e78d0328033c",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        120
      ],
      "parameters": {
        "color": 7,
        "width": 4400,
        "height": 1880,
        "content": "# 워크플로 1: 메인 싱크 프로세스  \n# 1. **변경 감지**  \n   - ## 스포티파이 플레이리스트의 변경을 모니터링  \n   - ## 데이터베이스 상태와 현재 플레이리스트를 비교  \n\n# 2. **비디오 매칭**  \n   - ## 제목, 아티스트, 그리고 지속 시간을 기반으로 YouTube를 검색  \n   - ## 최상의 매치를 위해 상위 5개 결과를 평가  \n   - ## 일치하지 않는 트랙을 \"NOTFOUND\"로 표시  \n   - ## 성공적인 매치와 실패를 사용자에게 알림"
      },
      "typeVersion": 1
    },
    {
      "id": "03e20125-37c8-4e40-98fd-9b4617eaab70",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        2200
      ],
      "parameters": {
        "color": 7,
        "width": 1740,
        "height": 800,
        "content": "# 워크플로 2: YouTube 유지 보수\n- ## YouTube 재생 목록의 제거된 비디오를 모니터링\n- ## 제거된 비디오를 재검색을 위해 플래그 지정\n- ## 표시된 비디오의 삭제를 처리"
      },
      "typeVersion": 1
    },
    {
      "id": "031c2984-96b1-4c60-9e24-a125619b204a",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        3080
      ],
      "parameters": {
        "color": 7,
        "width": 760,
        "height": 360,
        "content": "# 워크플로 3: 복구 프로세스\n\n- ## \"NOTFOUND\" 플래그를 정기적으로 지워 이전에 매치되지 않은 트랙을 다시 검색합니다"
      },
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "data": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data1": {
      "main": [
        [
          {
            "node": "Search video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spotify": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add music": {
      "main": [
        [
          {
            "node": "data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Set youtube id to NOTFOUND if no matching",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "variables": {
      "main": [
        [
          {
            "node": "Get playlist snapshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every hour": {
      "main": [
        [
          {
            "node": "variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "variables1": {
      "main": [
        [
          {
            "node": "Get all musics not in youtube playlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "variables2": {
      "main": [
        [
          {
            "node": "Spotify",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get all musics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "variables3": {
      "main": [
        [
          {
            "node": "Get all musics that should be in playlist",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get playlist items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get all musics to be deleted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "variables4": {
      "main": [
        [
          {
            "node": "Reset NOTFOUND id to NULL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every month": {
      "main": [
        [
          {
            "node": "variables4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1 hour": {
      "main": [
        [
          {
            "node": "Get playlist snapshot1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If no result": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search video": {
      "main": [
        [
          {
            "node": "If no result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all musics": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get video duration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Datasets": {
      "main": [
        [
          {
            "node": "Add music",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [
          {
            "node": "Update to_delete to true",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every day at noon": {
      "main": [
        [
          {
            "node": "variables2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Remove video from playlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get playlist items": {
      "main": [
        [
          {
            "node": "Playlist items to be deleted",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check for deleted videos",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get video duration": {
      "main": [
        [
          {
            "node": "If video duration ~= music duration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add music to playlist": {
      "main": [
        [
          {
            "node": "Add youtube id to row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add youtube id to row": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every day at midnight": {
      "main": [
        [
          {
            "node": "variables3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get playlist snapshot": {
      "main": [
        [
          {
            "node": "Wait 1 hour",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If different snapshot": {
      "main": [
        [
          {
            "node": "Spotify",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get all musics",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get playlist snapshot1": {
      "main": [
        [
          {
            "node": "If different snapshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every day at noon + 1mn": {
      "main": [
        [
          {
            "node": "variables1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for deleted videos": {
      "main": [
        [
          {
            "node": "Set youtube_video_id to null",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove video from playlist": {
      "main": [
        [
          {
            "node": "Delete music",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all musics to be deleted": {
      "main": [
        [
          {
            "node": "Playlist items to be deleted",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Playlist items to be deleted": {
      "main": [
        [],
        [],
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If video duration ~= music duration": {
      "main": [
        [
          {
            "node": "Add music to playlist",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all musics not in youtube playlist": {
      "main": [
        [
          {
            "node": "data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all musics that should be in playlist": {
      "main": [
        [
          {
            "node": "Check for deleted videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set youtube id to NOTFOUND if no matching": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}