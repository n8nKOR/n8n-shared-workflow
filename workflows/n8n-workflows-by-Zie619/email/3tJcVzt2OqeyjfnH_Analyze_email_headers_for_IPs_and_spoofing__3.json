{
  "id": "3tJcVzt2OqeyjfnH",
  "meta": {
    "instanceId": "03e9d14e9196363fe7191ce21dc0bb17387a6e755dcc9acc4f5904752919dca8"
  },
  "name": "Analyze_email_headers_for_IPs_and_spoofing__3",
  "tags": [
    {
      "id": "GCHVocImoXoEVnzP",
      "name": "🛠️ In progress",
      "createdAt": "2023-10-31T02:17:21.618Z",
      "updatedAt": "2023-10-31T02:17:21.618Z"
    },
    {
      "id": "QPJKatvLSxxtrE8U",
      "name": "Secops",
      "createdAt": "2023-10-31T02:15:11.396Z",
      "updatedAt": "2023-10-31T02:15:11.396Z"
    }
  ],
  "nodes": [
    {
      "id": "a2dca82d-f2b4-41f7-942a-2713a5ae012e",
      "name": "Receive Headers",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -320,
        740
      ],
      "webhookId": "1bde44ab-1360-48b3-9b2f-260a82629bfa",
      "parameters": {
        "path": "90e9e395-1d40-4575-b2a0-fbf52c534167",
        "options": {},
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "typeVersion": 1
    },
    {
      "id": "8cb2e9f4-6954-4812-a443-47cc83e7db0a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2900,
        420
      ],
      "parameters": {
        "width": 528.410729274179,
        "height": 545.969373616973,
        "content": "[\n    {\n        \"IP 분석\": [\n            {\n                \"IP\": \"104.245.209.248\",\n                \"사기 점수\": 87,\n                \"최근 남용\": true,\n                \"조직\": \"Deft Hosting\",\n                \"Tor\": false,\n                \"ISP\": \"Server Central Network\",\n                \"최근 스팸 활동\": \"지난 24-48시간 동안 스팸이 식별됨\",\n                \"IP 발신자 평판\": \"나쁨\"\n            },\n            {\n                \"IP\": \"09.06.05.41\",\n                \"최근 스팸 활동\": \"알 수 없음\",\n                \"IP 발신자 평판\": \"알 수 없음\"\n            }\n        ]\n    },\n    {\n        \"SPF\": \"통과\",\n        \"DKIM\": \"통과\",\n        \"DMARC\": \"통과\"\n    }\n]"
      },
      "typeVersion": 1
    },
    {
      "id": "2464403b-5cb9-4090-b923-912bb8af673a",
      "name": "Fraud Score",
      "type": "n8n-nodes-base.code",
      "position": [
        1340,
        560
      ],
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let recentSpamActivity = \"undefined\";\nlet ipSenderReputation = \"undefined\";\n\ntry {\n  if ($('IP Quality Score')) {\n    const fraudScore = $('IP Quality Score').item.json.fraud_score;\n\n    recentSpamActivity = \"Not associated with recent spam activity\";\n    \n    if( fraudScore >= 85 ) {\n      recentSpamActivity = \"Identified spam in the past 24-48 hours\";\n    } else if( fraudScore >= 75 ) {\n      recentSpamActivity = \"Identified spam in the past month\";\n    }\n\n    if(!fraudScore) recentSpamActivity = \"unknown\";\n    \n    ipSenderReputation = \"unknown\";\n    \n    if( fraudScore >= 85 ) {\n      ipSenderReputation = \"Bad\";\n    } else if( fraudScore >= 75 ) {\n      ipSenderReputation = \"Poor\";  \n    } else if( fraudScore >= 50 ) {\n      ipSenderReputation = \"Suspicious\";  \n    } else if( fraudScore >= 11 ) {\n      ipSenderReputation = \"OK\";  \n    } else if( fraudScore <= 10 ) {\n      ipSenderReputation = \"Good\";  \n    }\n  }\n} catch (error) {\n  return {\n    \"recent_spam_activity\": recentSpamActivity,\n    \"ip_sender_reputation\": ipSenderReputation\n  };\n}\n\nreturn {\n  \"recent_spam_activity\": recentSpamActivity,\n  \"ip_sender_reputation\": ipSenderReputation\n};"
      },
      "typeVersion": 2
    },
    {
      "id": "70e3e88a-001a-40fc-a771-ace7696f54eb",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        2680,
        760
      ],
      "parameters": {
        "options": {
          "responseCode": 200
        },
        "respondWith": "text",
        "responseBody": "={{ $json.result }}"
      },
      "typeVersion": 1
    },
    {
      "id": "4e16523d-a7e1-44d1-840a-3df3a44bd034",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        -39.5
      ],
      "parameters": {
        "width": 628.6931617686989,
        "height": 834.0576186324413,
        "content": "![ipqualityscore](https://i.imgur.com/CQRV2uV.png)  \n## IP 평판 및 이메일 보안 분석  \n이 워크플로의 핵심 부분은 받은 헤더에서 IP 주소를 추출하여 이메일 보안을 강화하는 데 특화되어 있습니다. 세련된 프로세스를 통해 추출된 IP를 IP Quality Score API와 비교하여 잠재적 위험을 평가하고 사기 활동을 방지합니다.  \n\n`Extract IPs from \"received\"` 노드는 이메일 헤더에서 IP 주소를 분리하여 n8n의 복잡한 데이터를 분석하고 구문 분석하는 능력을 보여줍니다. `Split Out IPs` 노드는 이러한 IP를 개별적으로 검토할 수 있도록 준비하며, n8n의 데이터 처리 유연성을 세부적인 수준에서 입증합니다. 마지막으로, `IP Quality Score` 노드는 외부 API를 조회하여 각 IP를 평가하여 보안 매개변수를 강화하고 자세한 위험 평가를 제공합니다.  \n\n### 인증 - 무료 티어 이용 가능 (월 5000 크레딧)  \n\nIP Quality Score는 API 키를 웹사이트 URL의 일부로 사용합니다. n8n이 현재 URL에 자격 증명을 노출하는 것을 허용하지 않기 때문에, `IP Quality Score` 노드의 가상 표현 스니펫에 API 키를 하드코딩해야 합니다.  \n\nAPI 키는 [여기](https://www.ipqualityscore.com/documentation/proxy-detection-api/overview) 문서를 방문하여 로그인한 후, 아래로 스크롤하여 Private Key를 찾을 수 있습니다.  \n\n### 출력"
      },
      "typeVersion": 1
    },
    {
      "id": "2e8ead40-a97a-4c7e-953c-33546b83eaf6",
      "name": "Explode Email Header",
      "type": "n8n-nodes-base.code",
      "position": [
        80,
        740
      ],
      "parameters": {
        "jsCode": "// Takes the Header string and splits it into various items for analysis.\nlet returnArray = [];\n\nfor (const item of $input.all()) {\n  const headerStr = item.json.header;\n  const headerLines = headerStr.split('\\n');\n    const headerObj = {};\n\n    let currentKey = null;\n    let currentValue = '';\n\n    headerLines.forEach((line) => {\n        const match = line.match(/^([\\w-]+):\\s*(.*)/);\n\n        if (match) {\n            if (currentKey) {\n                if (!headerObj[currentKey]) headerObj[currentKey] = [];\n                headerObj[currentKey].push({ [`${currentKey}`]: currentValue });\n            }\n\n            currentKey = match[1].toLowerCase();\n            currentValue = match[2];\n        } else {\n            currentValue += ' ' + line.trim();\n        }\n    });\n\n    if (currentKey) {\n        if (!headerObj[currentKey]) headerObj[currentKey] = [];\n        headerObj[currentKey].push({ [`${currentKey}Item`]: currentValue });\n    }\n  returnArray.push({\"header\":headerObj});\n}\n\nreturn returnArray;"
      },
      "typeVersion": 2
    },
    {
      "id": "1118176d-a315-439d-a3b6-fe4d40c900c6",
      "name": "Split Out IPs",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        740,
        560
      ],
      "parameters": {
        "options": {
          "destinationFieldName": "ip"
        },
        "fieldToSplitOut": "ips"
      },
      "typeVersion": 3
    },
    {
      "id": "ef118900-11a6-418a-b1b3-159933d62cbf",
      "name": "Extract IPs from \"received\"",
      "type": "n8n-nodes-base.code",
      "position": [
        540,
        560
      ],
      "parameters": {
        "jsCode": "let ips = []\n\nfor (const item of $input.all()) {\n  const header = JSON.stringify(item.json.header.received);\n  console.log(header)\n  const ipRegex = /\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/g;\n  const ipAddresses = header.match(ipRegex) || [];\n  ips.push(...ipAddresses);\n}\n\nreturn [\n  {\n    ips: ips\n  }\n];"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "ffefc1e2-214c-47d7-a7a3-104fefdccda1",
      "name": "IP Quality Score",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        920,
        560
      ],
      "parameters": {
        "url": "=https://ipqualityscore.com/api/json/ip/{{ Replace me with your API key, it can be found inside the api documentation, leave json.ip alone }}/{{ $json.ip }}?strictness=1&allow_public_access_points=true&lighter_penalties=true",
        "options": {}
      },
      "typeVersion": 4.1
    },
    {
      "id": "2f1c5b30-950c-4e0d-81a6-bf4c2c64f968",
      "name": "IP-API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1140,
        560
      ],
      "parameters": {
        "url": "=http://ip-api.com/json/{{ $('Split Out IPs').item.json.ip }}",
        "method": "POST",
        "options": {}
      },
      "typeVersion": 4.1
    },
    {
      "id": "c9cae845-63e8-475a-bc08-ba0552712394",
      "name": "Collect interesting data",
      "type": "n8n-nodes-base.set",
      "position": [
        1520,
        560
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "IP",
              "value": "={{ $('Split Out IPs').item.json.ip }}"
            },
            {
              "name": "fraud_score",
              "value": "={{ $('IP Quality Score').item.json.fraud_score }}"
            },
            {
              "name": "recent_abuse",
              "value": "={{ $('IP Quality Score').item.json.recent_abuse }}"
            },
            {
              "name": "Organization",
              "value": "={{ $('IP Quality Score').item.json.organization }}"
            },
            {
              "name": "tor",
              "value": "={{ $('IP Quality Score').item.json.tor }}"
            },
            {
              "name": "ISP",
              "value": "={{ $('IP-API').item.json.isp }}"
            },
            {
              "name": "recent_spam_activity",
              "value": "={{ $json.recent_spam_activity }}"
            },
            {
              "name": "ip_sender_reputation",
              "value": "={{ $json.ip_sender_reputation }}"
            }
          ]
        },
        "options": {
          "dotNotation": true
        },
        "keepOnlySet": true
      },
      "typeVersion": 2
    },
    {
      "id": "01b33cc9-b7b3-44e6-b683-b753e6daa2dc",
      "name": "SPF/DKIM/DMARC from \"authentication-results\"",
      "type": "n8n-nodes-base.code",
      "position": [
        520,
        1160
      ],
      "parameters": {
        "jsCode": "let mailAuth = [];\n\nfor (const item of $input.all()) {\n  // SPF\n  let spf = \"unknown\";\n  if( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"spf=pass\") ) {\n    spf = \"pass\";\n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"spf=fail\") ) {\n    spf = \"fail\";    \n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"spf=neutral\") ) {\n    spf = \"neutral\";\n  }\n\n  // DKIM\n  let dkim = \"unknown\";\n  if( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dkim=pass\") ) {\n    dkim = \"pass\";\n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dkim=fail\") ) {\n    dkim = \"fail\";    \n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dkim=temperror\") ) {\n    dkim = \"error\";\n  }\n\n  // DMARC\n  let dmarc = \"unknown\";\n  if( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dmarc=pass\") ) {\n    dmarc = \"pass\";\n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dmarc=fail\") ) {\n    dmarc = \"fail\";    \n  }\n  \n  mailAuth.push({\n    \"spf\": spf,\n    \"dkim\": dkim,\n    \"dmarc\": dmarc\n  });\n}\n\nreturn mailAuth;"
      },
      "typeVersion": 2
    },
    {
      "id": "33923ec2-10db-4799-9b5e-a369cdd74640",
      "name": "SPF from \"received-spf\"",
      "type": "n8n-nodes-base.code",
      "position": [
        500,
        1858
      ],
      "parameters": {
        "jsCode": "let spfArray = [];\n\nfor (const item of $('Authentication Results Present?').all()) {\n    const spfList = item.json.header[\"received-spf\"];\n\n    if (!spfList || spfList.length == 0) {\n        spfArray.push(\"not-found\");\n    } else {\n        for (const spfItem of spfList) {\n            if (spfItem[\"received-spf\"].toLowerCase().includes(\"fail\")) {\n                spfArray.push(\"fail\");\n            } else if (spfItem[\"received-spf\"].toLowerCase().includes(\"pass\")) {\n                spfArray.push(\"pass\");\n            } else {\n                spfArray.push(\"found\");\n            }\n        }\n    }\n}\nreturn [{spf:spfArray.join(\",\")}];\n"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "9cec1f09-3887-46ec-aa25-b03a0ab34190",
      "name": "DKIM from \"dkim-signature\"",
      "type": "n8n-nodes-base.code",
      "position": [
        760,
        1858
      ],
      "parameters": {
        "jsCode": "let dkimArray = [];\n\nfor (const item of $('Authentication Results Present?').all()) {\n    const dkimList = item.json.header[\"dkim-signature\"];\n\n    if (!dkimList || dkimList.length == 0) { dkimArray.push(\"not-found\") } else {\n        dkimArray.push(\"found\");\n        return dkimArray;\n    }\n\n}\nreturn [{dkim:dkimArray.join(\",\")}];\n"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "0f856808-c044-4547-bc81-5e6d1208d9ad",
      "name": "DMARC from \"received-dmarc\"",
      "type": "n8n-nodes-base.code",
      "position": [
        1020,
        1858
      ],
      "parameters": {
        "jsCode": "let dmarcArray = [];\n\nfor (const item of $('Authentication Results Present?').all()) {\n    const dmarcList = item.json.header[\"received-dmarc\"];\n\n    if (!dmarcList || dmarcList.length == 0) {\n        dmarcArray.push(\"not-found\");\n    } else {\n        for (const dmarcItem of dmarcList) {\n            if (dmarcItem[\"received-dmarc\"].toLowerCase().includes(\"fail\")) {\n                dmarcArray.push(\"fail\");\n            } else if (dmarcItem[\"received-dmarc\"].toLowerCase().includes(\"pass\")) {\n                dmarcArray.push(\"pass\");\n            } else {\n                dmarcArray.push(\"found\");\n            }\n        }\n    }\n}\nreturn [{dmarc:dmarcArray.join(\",\")}];"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "0780dc59-8a4c-4355-9cdc-35b2505043a6",
      "name": "DKIM",
      "type": "n8n-nodes-base.switch",
      "position": [
        1260,
        2718
      ],
      "parameters": {
        "rules": {
          "rules": [
            {
              "value2": "spf=pass",
              "operation": "contains"
            },
            {
              "output": 1,
              "value2": "spf=fail",
              "operation": "contains"
            },
            {
              "output": 2,
              "value2": "spf=neutral",
              "operation": "contains"
            }
          ]
        },
        "value1": "={{ $('Authentication Results Present?').item.json.header['authentication-results'] }}",
        "dataType": "string",
        "fallbackOutput": 3
      },
      "typeVersion": 1
    },
    {
      "id": "b0be02f9-ae6c-460e-9e1c-0be8f878f81b",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -359.7001600000003,
        -46.60400000000038
      ],
      "parameters": {
        "width": 811.1951544353835,
        "height": 1042.0833160085729,
        "content": "이 n8n 워크플로는 이메일 헤더를 분석하여 보안 위험을 평가하는 데 탁월합니다. 웹훅을 사용하여 데이터를 수신한 후, 특정 헤더 내용에 기반하여 두 가지 철저한 조사 경로로 분기됩니다. `received` 헤더가 있는 이메일의 경우, IP 세부 정보를 추출하고 IP Quality Score API를 통해 포괄적인 위험 평가를 수행하며, 잠재적 사기 또는 남용 및 IP-API를 통한 지리 위치 정보를 포함합니다.\n\n반대로, `authentication-results` 헤더가 존재하는 경우, SPF, DKIM 및 DMARC 검증을 세밀하게 평가하여 각 이메일을 인증 검사에 기반하여 분류합니다.\n\n마지막으로, 워크플로는 두 경로의 데이터를 통합하여 일관된 분석을 제공하며, 이를 웹훅을 통해 다시 전달하여 IP 평판 및 이메일 인증 상태에 대한 상세한 보고서를 제공합니다.\n\n`워크플로우가 아직 완성되지 않았으나, DKIM 분석 없이도 작동합니다.`\n\n## 트리거 방식: 웹훅을 통해\n워크플로는 수신된 웹훅 쿼리에 따라 즉시 트리거되거나, `Execute Workflow` 노드 내에서 사용될 수 있습니다. 이 경우 `webhook trigger`를 `Execute Workflow Trigger`로 대체하고, `respond to webhook` 노드를 데이터만 유지하는 `Set node`로 변경합니다. 이로 인해 더 큰 워크플로의 일부로서 이 부분이 헤더 분석을 처리할 수 있습니다. 예시 입력은 다음과 같습니다:\n\n[\n  {\n    \"headers\": {\n      \"host\": \"internal.users.n8n.cloud\"\n    },\n    \"params\": {},\n    \"query\": {},\n    \"body\": \"Delivered-To: g.andreini@gmail.com\\nReceived: by 2002:a05:7412:be08:b0:df:2c3c:4cc with SMTP id la8csp2349351rdb;\\n        Tue, 5 Sep 2023 15:06:08 -0700 (PDT)\\nX-Google-Smtp-Source: AGHT+IEHz2WAE5kssnJSpwJyhbuq3ZjNQTqZfo6OFeCd5w2EKOdnF3nICb1zIL4Y1tahQpr5xY6+\\nX-Received: by 2002:a17:907:78c3:b0:9a1:f2d3:ade9 with SMTP id kv3-20020a17090778c300b009a1f2d3ade9mr802685ejc.42.1693951567785;\\n        Tue, 05 Sep 2023 15:06:07 -0700 (PDT)\\nARC-Seal: i=1; a=rsa-sha256; t=1693951567; cv=none;\\n        d=google.com; s=arc-20160816;\\n        b=zsD04giTt/gbOxX6IW6/ETi7zkiuLYPaM6nYtckkcCfhqz5H7qvNN1NkDrlbnsXEr2\\n         3jVLDlhAZCXVg4qGNEWTjfzLwn5eQoUdW7iy//8XZU3Xy2xtORLBKKWs+Pjzx2sBP9KS\\n         zsy0Tg+rlAqi/aOH8+D+ANC0dCibsPau92zLS6GIvil700hvAJ7KB9fw0s/Ntx4z8VGv\\n         0P+BodOQDO9kdHtuMkgu/waF86Xe0ImcxtvMHQ/mNjbTSRDTa0d04+X7ILVf4q0B5gFg\\n         tnykE51GIS8Ey8ElAd4z/it1E/ffMJ7QAgiDSO0tZRc2NnM0QQ1oYrO9IL0cNuW1P33Q\\n         PfNA==\\nARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;\\n        h=mime-version:date:subject:to:from:reply-to:message-id;\\n        bh=f9tT4LpRqlQSioyOCLufJC57T1y2rwgsPezOJPbokDM=;\\n        fh=syfPZFOxHm03Bg8T666hpPsY3BFS1EZPTr8jKyQ7bFk=;\\n        b=fsZErxdmb95VXJpAyI8Pff38Ifu47WaONvSwpYaSstYbRoKDZSS3SH247NHt/+uyq+\\n         7UUF37XenbcZif1p3iOa96JxcYBtLLp3cI9pe8NRQjJtceXQk70PVcCGNXORiAxoCGT+\\n         iCMzUoFjTAfhK729rSldyFJ+I+WU3k+W/CjL1+geJkU5fEmg+eBEo8hDifqW3Iv73auq\\n         uDnxkLZ55yX9W2ARwv/204qqqxYHKfdXDIWGDyeXE10NHLTr/GAR8DWVx6qD8b4U0Zc3\\n         MC+SZxGsIcSCr5ouXIovuQBYcdmqDgDxAaN9VTfYdnXobblN6bo3OcC0rqiiyVJnV3ZA\\n         BYoQ==\\nARC-Authentication-Results: i=1; mx.google.com;\\n       spf=fail (google.com: domain of eljyzxd@molkase.de does not designate 89.31.72.29 as permitted sender) smtp.mailfrom=eljyzxd@molkase.de\\nReturn-Path: <eljyzxd@molkase.de>\\nReceived: from mail19.interhost.it (mail19.interhost.it. [89.31.72.29])\\n        by mx.google.com with ESMTPS id k15-20020a170906578f00b00992aaed9f81si7955121ejq.356.2023.09.05.15.06.07\\n        for <g.andreini@gmail.com>\\n        (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);\\n        Tue, 05 Sep 2023 15:06:07 -0700 (PDT)\\nReceived-SPF: fail (google.com: domain of eljyzxd@molkase.de does not designate 89.31.72.29 as permitted sender) client-ip=89.31.72.29;\\nAuthentication-Results: mx.google.com;\\n       spf=fail (google.com: domain of eljyzxd@molkase.de does not designate 89.31.72.29 as permitted sender) smtp.mailfrom=eljyzxd@molkase.de\\nReceived: from mailfront2.interhost.it (mailfront2.interhost.it [89.31.72.21]) (using TLSv1.2 with cipher ADH-AES256-GCM-SHA384 (256/256 bits)) (No client certificate requested) by mail19.interhost.it (Postfix) with ESMTPS id 7BA73561D21 for <info@thepund.it>; Wed,\\n  6 Sep 2023 00:06:06 +0200 (CEST)\\nReceived: from mailfront2.interhost.it (localhost [127.0.0.1]) by mailfront2.interhost.it (Postfix) with ESMTP id 5AEE1835B2 for <info@thepund.it>; Wed,\\n  6 Sep 2023 00:06:06 +0200 (CEST)\\nReceived-SPF: Pass (mailfrom) identity=mailfrom; client-ip=62.173.139.164; helo=mail.molkase.de; envelope-from=eljyzxd@molkase.de; receiver=<UNKNOWN>\\nReceived: from mail.molkase.de (mail.molkase.de [62.173.139.164]) by mailfront2.interhost.it (Postfix) with ESMTP id A8BC3835B5 for <info@thepund.it>; Wed,\\n  6 Sep 2023 00:06:05 +0200 (CEST)\\nReceived: from molkase.de (mail.molkase.de [62.173.139.164]) by mail.molkase.de (Postfix) with ESMTPA id A561D80FB872; Tue,\\n  5 Sep 2023 23:08:50 +0300 (EEST)\\nMessage-ID: <15404342A12424728J51235153O87748181D@ideljyzxd>\\nReply-To: Legal Casino <eljyzxd@molkase.de>\\nFrom: Legal Casino <eljyzxd@molkase.de>\\nTo: <info@tevassociati.it>\\nSubject: Bonus for all European residents\\nDate: Tue, 05 Sep 2023 23:08:55 +0300\\nMIME-Version: 1.0\\nContent-Type: multipart/related; type=\\\"multipart/alternative\\\"; boundary=\\\"----=_NextPart_000_0018_01D9E04D.79971B70\\\"\\nX-Virus-Scanned: ClamAV using ClamSMTP\"\n  }\n]"
      },
      "typeVersion": 1
    },
    {
      "id": "3c8fe0f3-0b65-4366-9c1e-a2a7bcc35ed5",
      "name": "Extract Email Header from webhook",
      "type": "n8n-nodes-base.set",
      "position": [
        -99,
        740
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "header",
              "value": "={{ $json.body }}"
            }
          ]
        },
        "options": {},
        "keepOnlySet": true
      },
      "typeVersion": 2
    },
    {
      "id": "4eef6457-27cf-442f-bccf-75663170401b",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1100,
        20
      ],
      "parameters": {
        "width": 610.1426815377504,
        "height": 772.7590323462559,
        "content": "![ipapi](https://i.imgur.com/OMhn14b.png)  \n## IP 평판 및 사기 분석  \n이 워크플로 섹션은 각 IP 주소에 대한 심층 평판 평가를 수행합니다. `IP-API` 노드는 지리적 위치 데이터를 검색하며, `Fraud Score` 노드는 IP와 관련된 위험을 평가하여 잠재적인 스팸 또는 남용 활동을 플래그합니다.  \n\n### 발견 사항 통합  \n사기 점수 및 ISP 정보와 같은 주요 데이터 포인트는 `Collect interesting data` 노드에 의해 합성되어, 각 IP에 대한 명확한 프로필을 제공하여 정보에 기반한 의사 결정을 가능하게 합니다.  \n\n### 인증 - 무료 티어 사용 가능 (45 요청/분)  \n이 엔드포인트는 IP 주소당 45 요청 per 분으로 제한됩니다.  \n\n제한을 초과하면 요청이 스로틀링됩니다 `(HTTP 429)`까지 속도 제한 창이 재설정될 때까지. 지속적으로 제한을 초과하면 IP 주소가 1시간 동안 차단됩니다.  \n\n인증이 필요하지 않습니다, [여기를 클릭하여 문서를 보십시오.](https://ip-api.com/docs)  \n\n### 출력"
      },
      "typeVersion": 1
    },
    {
      "id": "764de66e-8e40-44d1-8c09-fb099753d800",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1720,
        141.75
      ],
      "parameters": {
        "width": 1153.9919748350057,
        "height": 818.3738794326835,
        "content": "![n8n](https://i.imgur.com/lKnBNnH.png)  \n## 이메일 헤더 분석 및 응답  \n`Analyze Email Headers For IPs and Spoofing` 워크플로의 결론 부분은 이메일 헤더 정보를 수집한 후 이를 분석하고 응답하기 위해 정교한 데이터 처리를 통합합니다. 이 부분은 이메일 헤더에서 수집된 데이터를 종합하여 실행 가능한 인사이트를 준비하는 데 필수적입니다.  \n\n- **데이터 집계 및 병합:** `Merge1`과 Item `Lists2` 노드는 이전 단계의 데이터를 집계하는 데 핵심적입니다. 이 노드들은 다양한 항목을 효과적으로 연결하고 IP 분석 데이터를 컴파일합니다. 이 작업은 이메일 헤더의 포괄적인 보기를 생성하는 데 필수적이며, 특히 IP와 잠재적 스푸핑 지표에 중점을 둡니다.  \n\n- **추가 병합 및 응답 준비:** `Merge3`에 의해 또 다른 병합 작업이 수행되어 최종 출력에 대한 데이터를 준비합니다. 그 후, Item Lists3이 항목을 추가로 연결하여 하나의 일관된 결과를 형성합니다. 이 단계는 모든 관련 정보를 정확하게 컴파일하여 최종 응답에 대비합니다.  \n\n- **최종 웹훅 응답:** Respond to Webhook 노드는 이 워크플로의 끝 지점입니다. 이 노드는 분석된 데이터를 텍스트 형식으로 캡슐화하여 응답하도록 구성됩니다. 응답은 200 HTTP 상태 코드를 반환하여 성공적인 작업을 나타냅니다. 이 노드는 n8n의 데이터 처리 및 분석 능력뿐만 아니라 지정된 수신자(웹훅 또는 기타 엔드포인트)에게 결과를 원활하게 전달하는 능력을 보여줍니다.  \n\n이 워크플로가 끝나면 이메일 헤더에 대한 구조화된 세부 분석을 얻을 수 있으며, 특히 IP와 잠재적 스푸핑 위협을 식별하도록 맞춤화됩니다. 이는 n8n이 데이터 처리 능력뿐만 아니라 이메일 보안을 유지하는 데 중요한 실행 가능한 인사이트를 제공하는 사이버 보안 도구로서의 효과성을 강조합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "2fa3c912-f478-48a1-9b2e-5e3f51c6a363",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        800
      ],
      "parameters": {
        "width": 630.5819800503231,
        "height": 535.80387776221,
        "content": "## 인증 분석\n\n이 섹션은 이메일 헤더 내의 SPF, DKIM 및 DMARC 레코드들의 존재와 유효성을 평가하여 인증을 확인합니다. `SPF/DKIM/DMARC from \"authentication-results\"` 노드는 인증 결과를 평가하여 이메일이 발신자 검증을 위한 설정된 보안 표준을 충족하는지 보장합니다. \n\nn8n 코드 노드는 `node.js`라고 불리는 `Javascript` 버전이나 `Pyodide`라고 불리는 `Python` 버전을 사용합니다. 이 경우에는 Javascript를 사용하고 있습니다."
      },
      "typeVersion": 1
    },
    {
      "id": "5297e5a0-f2d1-4ee3-b931-9b1abe75b2cc",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        2038
      ],
      "parameters": {
        "width": 983.9576126829675,
        "height": 1039.0141642262715,
        "content": "![n8n](https://i.imgur.com/yz109RJ.png)  \n## SPF 및 DKIM 인증 라우팅  \n이 노드 그룹은 이메일 헤더에서 발견된 SPF 및 DKIM 레코드에 대한 인증 상태 라우팅을 조정합니다.  \n\nSPF 유효성 검사 결정  \n`SPF` 스위치 노드는 이메일 헤더의 SPF 결과를 평가하여 SPF가 통과, 실패, 또는 중립인지에 따라 흐름을 다른 경로로 안내합니다. `\"Set1,\" \"Set2,\" 및 \"Set4\"` 노드는 각각의 SPF 인증 상태를 할당하여, 보안 검증에 따라 이메일을 추가 처리하도록 표시합니다.  \n\nDKIM 평가 처리  \nDKIM을 명시적으로 처리하지 않지만, `\"DKIM\" 스위치 노드`는 이름이 잘못 지정된 것으로 보이며, 역할을 정확히 반영하도록 조정해야 합니다. 이는 SPF 노드와 유사한 라우팅 로직으로 설정되어 있어 DKIM 결과를 처리해야 함을 시사합니다. 만약 실제로 DKIM을 위한 것이라면, 인증 결과 내에서 `\"dkim=pass/fail/neutral\"`을 확인하도록 해야 합니다.  \n\n알 수 없는 SPF 상태 할당  \n마지막으로, `\"Set5\"` 노드는 SPF 결과가 발견되지 않거나 불확실한 경우를 처리하여 상태를 `\"unknown\"`으로 설정합니다."
      },
      "typeVersion": 1
    },
    {
      "id": "f6c06bc5-048c-433e-9bfa-f155ca6735e4",
      "name": "Received Headers Present?",
      "type": "n8n-nodes-base.if",
      "position": [
        300,
        660
      ],
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.header.received.length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "a92ef09c-0cc6-469c-98ff-8c6172615a4b",
      "name": "Authentication Results Present?",
      "type": "n8n-nodes-base.if",
      "position": [
        300,
        820
      ],
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.header[\"authentication-results\"].length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "aef7f739-dfef-40b1-b01f-29adad4a9bda",
      "name": "Aggregate Authentication Data",
      "type": "n8n-nodes-base.set",
      "position": [
        1280,
        1858
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "={{ $('SPF from \"received-spf\"').all() }}"
            },
            {
              "name": "dkim",
              "value": "={{ $('DKIM from \"dkim-signature\"').all() }}"
            },
            {
              "name": "dmarc",
              "value": "={{ $('DMARC from \"received-dmarc\"').all() }}"
            }
          ]
        },
        "options": {},
        "keepOnlySet": true
      },
      "typeVersion": 2
    },
    {
      "id": "5d7ce661-3bdf-45e5-a1e2-335602e62b5d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        1349.3807407407407
      ],
      "parameters": {
        "width": 984.4210239195738,
        "height": 672.6925241611406,
        "content": "![nodejs](https://i.imgur.com/OqjRFGZ.png)  \n## 이메일 인증 평가  \n이 노드 세트는 이메일 헤더의 인증을 평가하는 데 전념하며, 특히 SPF, DKIM 및 DMARC 유효성을 중점으로 합니다.  \n\n### SPF, DKIM 및 DMARC 추출  \n`SPF from 'received-spf'`로 시작하여, 이 노드는 이메일의 SPF 레코드를 준수 여부를 분석합니다. 그 다음, `DKIM from 'dkim-signature'`는 DKIM 서명을 검사하여 존재와 상태를 확인합니다. 다음으로, `DMARC from 'received-dmarc'`는 DMARC 레코드를 예상되는 보안 관행과 일치 여부를 확인합니다.  \n\n### 데이터 집계  \n평가가 완료되면, `Aggregate Authentication Data`는 결과를 통합된 데이터 세트로 컴파일하여 각 이메일의 인증 상태를 명확히 나타냅니다.  \n\n### 주요 초점  \n이 노드는 이메일의 진위를 확인하여 잠재적으로 유해한 이메일을 필터링하는 데 필수적이며, 피싱 및 스푸핑 시도에 대한 보호의 핵심 단계입니다."
      },
      "typeVersion": 1
    },
    {
      "id": "88888a82-815b-423a-85d3-8c86756d10cd",
      "name": "IP Data Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        1800,
        660
      ],
      "parameters": {},
      "typeVersion": 2.1
    },
    {
      "id": "b7add244-9759-450f-8b01-6ec4555a5971",
      "name": "Merge Security Data",
      "type": "n8n-nodes-base.merge",
      "position": [
        2171,
        760
      ],
      "parameters": {},
      "typeVersion": 2.1
    },
    {
      "id": "ef679cda-9420-44fd-90cc-23be1b166e2c",
      "name": "Join IP Analysis into one JSON object",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        1960,
        660
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData",
        "operation": "concatenateItems",
        "destinationFieldName": "ipAnalysis"
      },
      "typeVersion": 3
    },
    {
      "id": "1e5ae57b-948c-40c8-8248-fcbda80264e2",
      "name": "Join results into one JSON object",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        2391,
        760
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData",
        "operation": "concatenateItems",
        "destinationFieldName": "result"
      },
      "typeVersion": 3
    },
    {
      "id": "7fef7675-1350-4886-b184-f907dacf08b1",
      "name": "SPF Authentication Checker",
      "type": "n8n-nodes-base.switch",
      "position": [
        500,
        2718
      ],
      "parameters": {
        "rules": {
          "rules": [
            {
              "value2": "spf=pass",
              "operation": "contains"
            },
            {
              "output": 1,
              "value2": "spf=fail",
              "operation": "contains"
            },
            {
              "output": 2,
              "value2": "spf=neutral",
              "operation": "contains"
            }
          ]
        },
        "value1": "={{ JSON.stringify($json.header[\"authentication-results\"]) }}",
        "dataType": "string",
        "fallbackOutput": 3
      },
      "typeVersion": 1
    },
    {
      "id": "410ccb8c-a551-45a3-a487-b0ce15a56882",
      "name": "Set SPF Pass Status",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2518
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "pass"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "127c0c91-162c-4cbb-b692-eb0675a55c42",
      "name": "Set SPF Fail Status",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2658
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "fail"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "7a15ae91-012f-4fc8-9075-7f855b15d979",
      "name": "Set SPF Neutral Status",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2798
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "neutral"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "2ac1e5ce-83a4-4205-9774-76506f06108e",
      "name": "Set SPF UnknownStatus",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2938
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "unknown"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    }
  ],
  "active": false,
  "pinData": {
    "Receive Headers": [
      {
        "json": {
          "body": "Delivered-To: g.andreini@gmail.com\nReceived: by 2002:a05:7412:be08:b0:df:2c3c:4cc with SMTP id la8csp2349351rdb;\n        Tue, 5 Sep 2023 15:06:08 -0700 (PDT)\nX-Google-Smtp-Source: AGHT+IEHz2WAE5kssnJSpwJyhbuq3ZjNQTqZfo6OFeCd5w2EKOdnF3nICb1zIL4Y1tahQpr5xY6+\nX-Received: by 2002:a17:907:78c3:b0:9a1:f2d3:ade9 with SMTP id kv3-20020a17090778c300b009a1f2d3ade9mr802685ejc.42.1693951567785;\n        Tue, 05 Sep 2023 15:06:07 -0700 (PDT)\nARC-Seal: i=1; a=rsa-sha256; t=1693951567; cv=none;\n        d=google.com; s=arc-20160816;\n        b=zsD04giTt/gbOxX6IW6/ETi7zkiuLYPaM6nYtckkcCfhqz5H7qvNN1NkDrlbnsXEr2\n         3jVLDlhAZCXVg4qGNEWTjfzLwn5eQoUdW7iy//8XZU3Xy2xtORLBKKWs+Pjzx2sBP9KS\n         zsy0Tg+rlAqi/aOH8+D+ANC0dCibsPau92zLS6GIvil700hvAJ7KB9fw0s/Ntx4z8VGv\n         0P+BodOQDO9kdHtuMkgu/waF86Xe0ImcxtvMHQ/mNjbTSRDTa0d04+X7ILVf4q0B5gFg\n         tnykE51GIS8Ey8ElAd4z/it1E/ffMJ7QAgiDSO0tZRc2NnM0QQ1oYrO9IL0cNuW1P33Q\n         PfNA==\nARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;\n        h=mime-version:date:subject:to:from:reply-to:message-id;\n        bh=f9tT4LpRqlQSioyOCLufJC57T1y2rwgsPezOJPbokDM=;\n        fh=syfPZFOxHm03Bg8T666hpPsY3BFS1EZPTr8jKyQ7bFk=;\n        b=fsZErxdmb95VXJpAyI8Pff38Ifu47WaONvSwpYaSstYbRoKDZSS3SH247NHt/+uyq+\n         7UUF37XenbcZif1p3iOa96JxcYBtLLp3cI9pe8NRQjJtceXQk70PVcCGNXORiAxoCGT+\n         iCMzUoFjTAfhK729rSldyFJ+I+WU3k+W/CjL1+geJkU5fEmg+eBEo8hDifqW3Iv73auq\n         uDnxkLZ55yX9W2ARwv/204qqqxYHKfdXDIWGDyeXE10NHLTr/GAR8DWVx6qD8b4U0Zc3\n         MC+SZxGsIcSCr5ouXIovuQBYcdmqDgDxAaN9VTfYdnXobblN6bo3OcC0rqiiyVJnV3ZA\n         BYoQ==\nARC-Authentication-Results: i=1; mx.google.com;\n       spf=fail (google.com: domain of eljyzxd@molkase.de does not designate 89.31.72.29 as permitted sender) smtp.mailfrom=eljyzxd@molkase.de\nReturn-Path: <eljyzxd@molkase.de>\nReceived: from mail19.interhost.it (mail19.interhost.it. [89.31.72.29])\n        by mx.google.com with ESMTPS id k15-20020a170906578f00b00992aaed9f81si7955121ejq.356.2023.09.05.15.06.07\n        for <g.andreini@gmail.com>\n        (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);\n        Tue, 05 Sep 2023 15:06:07 -0700 (PDT)\nReceived-SPF: fail (google.com: domain of eljyzxd@molkase.de does not designate 89.31.72.29 as permitted sender) client-ip=89.31.72.29;\nAuthentication-Results: mx.google.com;\n       spf=fail (google.com: domain of eljyzxd@molkase.de does not designate 89.31.72.29 as permitted sender) smtp.mailfrom=eljyzxd@molkase.de\nReceived: from mailfront2.interhost.it (mailfront2.interhost.it [89.31.72.21]) (using TLSv1.2 with cipher ADH-AES256-GCM-SHA384 (256/256 bits)) (No client certificate requested) by mail19.interhost.it (Postfix) with ESMTPS id 7BA73561D21 for <info@thepund.it>; Wed,\n  6 Sep 2023 00:06:06 +0200 (CEST)\nReceived: from mailfront2.interhost.it (localhost [127.0.0.1]) by mailfront2.interhost.it (Postfix) with ESMTP id 5AEE1835B2 for <info@thepund.it>; Wed,\n  6 Sep 2023 00:06:06 +0200 (CEST)\nReceived-SPF: Pass (mailfrom) identity=mailfrom; client-ip=62.173.139.164; helo=mail.molkase.de; envelope-from=eljyzxd@molkase.de; receiver=<UNKNOWN>\nReceived: from mail.molkase.de (mail.molkase.de [62.173.139.164]) by mailfront2.interhost.it (Postfix) with ESMTP id A8BC3835B5 for <info@thepund.it>; Wed,\n  6 Sep 2023 00:06:05 +0200 (CEST)\nReceived: from molkase.de (mail.molkase.de [62.173.139.164]) by mail.molkase.de (Postfix) with ESMTPA id A561D80FB872; Tue,\n  5 Sep 2023 23:08:50 +0300 (EEST)\nMessage-ID: <15404342A12424728J51235153O87748181D@ideljyzxd>\nReply-To: Legal Casino <eljyzxd@molkase.de>\nFrom: Legal Casino <eljyzxd@molkase.de>\nTo: <info@tevassociati.it>\nSubject: Bonus for all European residents\nDate: Tue, 05 Sep 2023 23:08:55 +0300\nMIME-Version: 1.0\nContent-Type: multipart/related; type=\"multipart/alternative\"; boundary=\"----=_NextPart_000_0018_01D9E04D.79971B70\"\nX-Virus-Scanned: ClamAV using ClamSMTP",
          "query": {},
          "params": {},
          "headers": {
            "host": "internal.users.n8n.cloud",
            "accept": "*/*",
            "x-real-ip": "10.255.0.2",
            "user-agent": "PostmanRuntime/7.32.3",
            "content-type": "text/plain",
            "authorization": "1234567890",
            "postman-token": "8701ef86-2136-4c79-941a-bc8ed79bcc9e",
            "content-length": "3900",
            "accept-encoding": "gzip, deflate, br",
            "x-forwarded-for": "10.255.0.2",
            "x-forwarded-host": "internal.users.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "e591fa1c2d01"
          }
        },
        "pairedItem": {
          "item": 0
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6e01f4f9-d42b-4168-91a1-0bfe850c43ea",
  "connections": {
    "IP-API": {
      "main": [
        [
          {
            "node": "Fraud Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fraud Score": {
      "main": [
        [
          {
            "node": "Collect interesting data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IP Data Merge": {
      "main": [
        [
          {
            "node": "Join IP Analysis into one JSON object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out IPs": {
      "main": [
        [
          {
            "node": "IP Quality Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Receive Headers": {
      "main": [
        [
          {
            "node": "Extract Email Header from webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IP Quality Score": {
      "main": [
        [
          {
            "node": "IP-API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Security Data": {
      "main": [
        [
          {
            "node": "Join results into one JSON object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF Fail Status": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF Pass Status": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Explode Email Header": {
      "main": [
        [
          {
            "node": "Received Headers Present?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Authentication Results Present?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF UnknownStatus": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF Neutral Status": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SPF from \"received-spf\"": {
      "main": [
        [
          {
            "node": "DKIM from \"dkim-signature\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect interesting data": {
      "main": [
        [
          {
            "node": "IP Data Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Received Headers Present?": {
      "main": [
        [
          {
            "node": "Extract IPs from \"received\"",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IP Data Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "DKIM from \"dkim-signature\"": {
      "main": [
        [
          {
            "node": "DMARC from \"received-dmarc\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SPF Authentication Checker": {
      "main": [
        [
          {
            "node": "Set SPF Pass Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set SPF Fail Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set SPF Neutral Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set SPF UnknownStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DMARC from \"received-dmarc\"": {
      "main": [
        [
          {
            "node": "Aggregate Authentication Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract IPs from \"received\"": {
      "main": [
        [
          {
            "node": "Split Out IPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Authentication Data": {
      "main": [
        [
          {
            "node": "Merge Security Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Authentication Results Present?": {
      "main": [
        [
          {
            "node": "SPF/DKIM/DMARC from \"authentication-results\"",
            "type": "main",
            "index": 0
          },
          {
            "node": "SPF Authentication Checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SPF from \"received-spf\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Email Header from webhook": {
      "main": [
        [
          {
            "node": "Explode Email Header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join results into one JSON object": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join IP Analysis into one JSON object": {
      "main": [
        [
          {
            "node": "Merge Security Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SPF/DKIM/DMARC from \"authentication-results\"": {
      "main": [
        [
          {
            "node": "Merge Security Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
}